// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct media_stream {
 *     char media_dev_name[64];
 *     char lens_ent_name[32];
 *     char sensor_ent_name[32];
 *     char csiphy_ent_name[32];
 *     char adap_ent_name[32];
 *     char isp_ent_name[32];
 *     char video_ent_name0[32];
 *     char video_ent_name1[32];
 *     char video_ent_name2[32];
 *     char video_ent_name3[32];
 *     char video_stats_name[32];
 *     char video_param_name[32];
 *     struct media_device *media_dev;
 *     struct media_entity *lens_ent;
 *     struct media_entity *sensor_ent;
 *     struct media_entity *csiphy_ent;
 *     struct media_entity *adap_ent;
 *     struct media_entity *isp_ent;
 *     struct media_entity *video_ent0;
 *     struct media_entity *video_ent1;
 *     struct media_entity *video_ent2;
 *     struct media_entity *video_ent3;
 *     struct media_entity *video_stats;
 *     struct media_entity *video_param;
 * }
 * }
 */
public class media_stream {

    media_stream() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(64, mediaAPI.C_CHAR).withName("media_dev_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("lens_ent_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("sensor_ent_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("csiphy_ent_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("adap_ent_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("isp_ent_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_ent_name0"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_ent_name1"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_ent_name2"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_ent_name3"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_stats_name"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("video_param_name"),
        mediaAPI.C_POINTER.withName("media_dev"),
        mediaAPI.C_POINTER.withName("lens_ent"),
        mediaAPI.C_POINTER.withName("sensor_ent"),
        mediaAPI.C_POINTER.withName("csiphy_ent"),
        mediaAPI.C_POINTER.withName("adap_ent"),
        mediaAPI.C_POINTER.withName("isp_ent"),
        mediaAPI.C_POINTER.withName("video_ent0"),
        mediaAPI.C_POINTER.withName("video_ent1"),
        mediaAPI.C_POINTER.withName("video_ent2"),
        mediaAPI.C_POINTER.withName("video_ent3"),
        mediaAPI.C_POINTER.withName("video_stats"),
        mediaAPI.C_POINTER.withName("video_param")
    ).withName("media_stream");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout media_dev_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("media_dev_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static final SequenceLayout media_dev_name$layout() {
        return media_dev_name$LAYOUT;
    }

    private static final long media_dev_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static final long media_dev_name$offset() {
        return media_dev_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static MemorySegment media_dev_name(MemorySegment struct) {
        return struct.asSlice(media_dev_name$OFFSET, media_dev_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static void media_dev_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, media_dev_name$OFFSET, media_dev_name$LAYOUT.byteSize());
    }

    private static long[] media_dev_name$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static long[] media_dev_name$dimensions() {
        return media_dev_name$DIMS;
    }
    private static final VarHandle media_dev_name$ELEM_HANDLE = media_dev_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static byte media_dev_name(MemorySegment struct, long index0) {
        return (byte)media_dev_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char media_dev_name[64]
     * }
     */
    public static void media_dev_name(MemorySegment struct, long index0, byte fieldValue) {
        media_dev_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout lens_ent_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lens_ent_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static final SequenceLayout lens_ent_name$layout() {
        return lens_ent_name$LAYOUT;
    }

    private static final long lens_ent_name$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static final long lens_ent_name$offset() {
        return lens_ent_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static MemorySegment lens_ent_name(MemorySegment struct) {
        return struct.asSlice(lens_ent_name$OFFSET, lens_ent_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static void lens_ent_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lens_ent_name$OFFSET, lens_ent_name$LAYOUT.byteSize());
    }

    private static long[] lens_ent_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static long[] lens_ent_name$dimensions() {
        return lens_ent_name$DIMS;
    }
    private static final VarHandle lens_ent_name$ELEM_HANDLE = lens_ent_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static byte lens_ent_name(MemorySegment struct, long index0) {
        return (byte)lens_ent_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char lens_ent_name[32]
     * }
     */
    public static void lens_ent_name(MemorySegment struct, long index0, byte fieldValue) {
        lens_ent_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout sensor_ent_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sensor_ent_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static final SequenceLayout sensor_ent_name$layout() {
        return sensor_ent_name$LAYOUT;
    }

    private static final long sensor_ent_name$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static final long sensor_ent_name$offset() {
        return sensor_ent_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static MemorySegment sensor_ent_name(MemorySegment struct) {
        return struct.asSlice(sensor_ent_name$OFFSET, sensor_ent_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static void sensor_ent_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sensor_ent_name$OFFSET, sensor_ent_name$LAYOUT.byteSize());
    }

    private static long[] sensor_ent_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static long[] sensor_ent_name$dimensions() {
        return sensor_ent_name$DIMS;
    }
    private static final VarHandle sensor_ent_name$ELEM_HANDLE = sensor_ent_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static byte sensor_ent_name(MemorySegment struct, long index0) {
        return (byte)sensor_ent_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char sensor_ent_name[32]
     * }
     */
    public static void sensor_ent_name(MemorySegment struct, long index0, byte fieldValue) {
        sensor_ent_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout csiphy_ent_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("csiphy_ent_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static final SequenceLayout csiphy_ent_name$layout() {
        return csiphy_ent_name$LAYOUT;
    }

    private static final long csiphy_ent_name$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static final long csiphy_ent_name$offset() {
        return csiphy_ent_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static MemorySegment csiphy_ent_name(MemorySegment struct) {
        return struct.asSlice(csiphy_ent_name$OFFSET, csiphy_ent_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static void csiphy_ent_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, csiphy_ent_name$OFFSET, csiphy_ent_name$LAYOUT.byteSize());
    }

    private static long[] csiphy_ent_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static long[] csiphy_ent_name$dimensions() {
        return csiphy_ent_name$DIMS;
    }
    private static final VarHandle csiphy_ent_name$ELEM_HANDLE = csiphy_ent_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static byte csiphy_ent_name(MemorySegment struct, long index0) {
        return (byte)csiphy_ent_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char csiphy_ent_name[32]
     * }
     */
    public static void csiphy_ent_name(MemorySegment struct, long index0, byte fieldValue) {
        csiphy_ent_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout adap_ent_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("adap_ent_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static final SequenceLayout adap_ent_name$layout() {
        return adap_ent_name$LAYOUT;
    }

    private static final long adap_ent_name$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static final long adap_ent_name$offset() {
        return adap_ent_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static MemorySegment adap_ent_name(MemorySegment struct) {
        return struct.asSlice(adap_ent_name$OFFSET, adap_ent_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static void adap_ent_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, adap_ent_name$OFFSET, adap_ent_name$LAYOUT.byteSize());
    }

    private static long[] adap_ent_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static long[] adap_ent_name$dimensions() {
        return adap_ent_name$DIMS;
    }
    private static final VarHandle adap_ent_name$ELEM_HANDLE = adap_ent_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static byte adap_ent_name(MemorySegment struct, long index0) {
        return (byte)adap_ent_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char adap_ent_name[32]
     * }
     */
    public static void adap_ent_name(MemorySegment struct, long index0, byte fieldValue) {
        adap_ent_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout isp_ent_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("isp_ent_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static final SequenceLayout isp_ent_name$layout() {
        return isp_ent_name$LAYOUT;
    }

    private static final long isp_ent_name$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static final long isp_ent_name$offset() {
        return isp_ent_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static MemorySegment isp_ent_name(MemorySegment struct) {
        return struct.asSlice(isp_ent_name$OFFSET, isp_ent_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static void isp_ent_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, isp_ent_name$OFFSET, isp_ent_name$LAYOUT.byteSize());
    }

    private static long[] isp_ent_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static long[] isp_ent_name$dimensions() {
        return isp_ent_name$DIMS;
    }
    private static final VarHandle isp_ent_name$ELEM_HANDLE = isp_ent_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static byte isp_ent_name(MemorySegment struct, long index0) {
        return (byte)isp_ent_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char isp_ent_name[32]
     * }
     */
    public static void isp_ent_name(MemorySegment struct, long index0, byte fieldValue) {
        isp_ent_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_ent_name0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_ent_name0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static final SequenceLayout video_ent_name0$layout() {
        return video_ent_name0$LAYOUT;
    }

    private static final long video_ent_name0$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static final long video_ent_name0$offset() {
        return video_ent_name0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static MemorySegment video_ent_name0(MemorySegment struct) {
        return struct.asSlice(video_ent_name0$OFFSET, video_ent_name0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static void video_ent_name0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_ent_name0$OFFSET, video_ent_name0$LAYOUT.byteSize());
    }

    private static long[] video_ent_name0$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static long[] video_ent_name0$dimensions() {
        return video_ent_name0$DIMS;
    }
    private static final VarHandle video_ent_name0$ELEM_HANDLE = video_ent_name0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static byte video_ent_name0(MemorySegment struct, long index0) {
        return (byte)video_ent_name0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_ent_name0[32]
     * }
     */
    public static void video_ent_name0(MemorySegment struct, long index0, byte fieldValue) {
        video_ent_name0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_ent_name1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_ent_name1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static final SequenceLayout video_ent_name1$layout() {
        return video_ent_name1$LAYOUT;
    }

    private static final long video_ent_name1$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static final long video_ent_name1$offset() {
        return video_ent_name1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static MemorySegment video_ent_name1(MemorySegment struct) {
        return struct.asSlice(video_ent_name1$OFFSET, video_ent_name1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static void video_ent_name1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_ent_name1$OFFSET, video_ent_name1$LAYOUT.byteSize());
    }

    private static long[] video_ent_name1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static long[] video_ent_name1$dimensions() {
        return video_ent_name1$DIMS;
    }
    private static final VarHandle video_ent_name1$ELEM_HANDLE = video_ent_name1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static byte video_ent_name1(MemorySegment struct, long index0) {
        return (byte)video_ent_name1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_ent_name1[32]
     * }
     */
    public static void video_ent_name1(MemorySegment struct, long index0, byte fieldValue) {
        video_ent_name1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_ent_name2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_ent_name2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static final SequenceLayout video_ent_name2$layout() {
        return video_ent_name2$LAYOUT;
    }

    private static final long video_ent_name2$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static final long video_ent_name2$offset() {
        return video_ent_name2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static MemorySegment video_ent_name2(MemorySegment struct) {
        return struct.asSlice(video_ent_name2$OFFSET, video_ent_name2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static void video_ent_name2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_ent_name2$OFFSET, video_ent_name2$LAYOUT.byteSize());
    }

    private static long[] video_ent_name2$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static long[] video_ent_name2$dimensions() {
        return video_ent_name2$DIMS;
    }
    private static final VarHandle video_ent_name2$ELEM_HANDLE = video_ent_name2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static byte video_ent_name2(MemorySegment struct, long index0) {
        return (byte)video_ent_name2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_ent_name2[32]
     * }
     */
    public static void video_ent_name2(MemorySegment struct, long index0, byte fieldValue) {
        video_ent_name2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_ent_name3$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_ent_name3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static final SequenceLayout video_ent_name3$layout() {
        return video_ent_name3$LAYOUT;
    }

    private static final long video_ent_name3$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static final long video_ent_name3$offset() {
        return video_ent_name3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static MemorySegment video_ent_name3(MemorySegment struct) {
        return struct.asSlice(video_ent_name3$OFFSET, video_ent_name3$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static void video_ent_name3(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_ent_name3$OFFSET, video_ent_name3$LAYOUT.byteSize());
    }

    private static long[] video_ent_name3$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static long[] video_ent_name3$dimensions() {
        return video_ent_name3$DIMS;
    }
    private static final VarHandle video_ent_name3$ELEM_HANDLE = video_ent_name3$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static byte video_ent_name3(MemorySegment struct, long index0) {
        return (byte)video_ent_name3$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_ent_name3[32]
     * }
     */
    public static void video_ent_name3(MemorySegment struct, long index0, byte fieldValue) {
        video_ent_name3$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_stats_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_stats_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static final SequenceLayout video_stats_name$layout() {
        return video_stats_name$LAYOUT;
    }

    private static final long video_stats_name$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static final long video_stats_name$offset() {
        return video_stats_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static MemorySegment video_stats_name(MemorySegment struct) {
        return struct.asSlice(video_stats_name$OFFSET, video_stats_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static void video_stats_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_stats_name$OFFSET, video_stats_name$LAYOUT.byteSize());
    }

    private static long[] video_stats_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static long[] video_stats_name$dimensions() {
        return video_stats_name$DIMS;
    }
    private static final VarHandle video_stats_name$ELEM_HANDLE = video_stats_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static byte video_stats_name(MemorySegment struct, long index0) {
        return (byte)video_stats_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_stats_name[32]
     * }
     */
    public static void video_stats_name(MemorySegment struct, long index0, byte fieldValue) {
        video_stats_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout video_param_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("video_param_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static final SequenceLayout video_param_name$layout() {
        return video_param_name$LAYOUT;
    }

    private static final long video_param_name$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static final long video_param_name$offset() {
        return video_param_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static MemorySegment video_param_name(MemorySegment struct) {
        return struct.asSlice(video_param_name$OFFSET, video_param_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static void video_param_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, video_param_name$OFFSET, video_param_name$LAYOUT.byteSize());
    }

    private static long[] video_param_name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static long[] video_param_name$dimensions() {
        return video_param_name$DIMS;
    }
    private static final VarHandle video_param_name$ELEM_HANDLE = video_param_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static byte video_param_name(MemorySegment struct, long index0) {
        return (byte)video_param_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char video_param_name[32]
     * }
     */
    public static void video_param_name(MemorySegment struct, long index0, byte fieldValue) {
        video_param_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout media_dev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("media_dev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_device *media_dev
     * }
     */
    public static final AddressLayout media_dev$layout() {
        return media_dev$LAYOUT;
    }

    private static final long media_dev$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_device *media_dev
     * }
     */
    public static final long media_dev$offset() {
        return media_dev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_device *media_dev
     * }
     */
    public static MemorySegment media_dev(MemorySegment struct) {
        return struct.get(media_dev$LAYOUT, media_dev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_device *media_dev
     * }
     */
    public static void media_dev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(media_dev$LAYOUT, media_dev$OFFSET, fieldValue);
    }

    private static final AddressLayout lens_ent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lens_ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *lens_ent
     * }
     */
    public static final AddressLayout lens_ent$layout() {
        return lens_ent$LAYOUT;
    }

    private static final long lens_ent$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *lens_ent
     * }
     */
    public static final long lens_ent$offset() {
        return lens_ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *lens_ent
     * }
     */
    public static MemorySegment lens_ent(MemorySegment struct) {
        return struct.get(lens_ent$LAYOUT, lens_ent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *lens_ent
     * }
     */
    public static void lens_ent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lens_ent$LAYOUT, lens_ent$OFFSET, fieldValue);
    }

    private static final AddressLayout sensor_ent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sensor_ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *sensor_ent
     * }
     */
    public static final AddressLayout sensor_ent$layout() {
        return sensor_ent$LAYOUT;
    }

    private static final long sensor_ent$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *sensor_ent
     * }
     */
    public static final long sensor_ent$offset() {
        return sensor_ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *sensor_ent
     * }
     */
    public static MemorySegment sensor_ent(MemorySegment struct) {
        return struct.get(sensor_ent$LAYOUT, sensor_ent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *sensor_ent
     * }
     */
    public static void sensor_ent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sensor_ent$LAYOUT, sensor_ent$OFFSET, fieldValue);
    }

    private static final AddressLayout csiphy_ent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("csiphy_ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *csiphy_ent
     * }
     */
    public static final AddressLayout csiphy_ent$layout() {
        return csiphy_ent$LAYOUT;
    }

    private static final long csiphy_ent$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *csiphy_ent
     * }
     */
    public static final long csiphy_ent$offset() {
        return csiphy_ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *csiphy_ent
     * }
     */
    public static MemorySegment csiphy_ent(MemorySegment struct) {
        return struct.get(csiphy_ent$LAYOUT, csiphy_ent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *csiphy_ent
     * }
     */
    public static void csiphy_ent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(csiphy_ent$LAYOUT, csiphy_ent$OFFSET, fieldValue);
    }

    private static final AddressLayout adap_ent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("adap_ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *adap_ent
     * }
     */
    public static final AddressLayout adap_ent$layout() {
        return adap_ent$LAYOUT;
    }

    private static final long adap_ent$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *adap_ent
     * }
     */
    public static final long adap_ent$offset() {
        return adap_ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *adap_ent
     * }
     */
    public static MemorySegment adap_ent(MemorySegment struct) {
        return struct.get(adap_ent$LAYOUT, adap_ent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *adap_ent
     * }
     */
    public static void adap_ent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(adap_ent$LAYOUT, adap_ent$OFFSET, fieldValue);
    }

    private static final AddressLayout isp_ent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("isp_ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *isp_ent
     * }
     */
    public static final AddressLayout isp_ent$layout() {
        return isp_ent$LAYOUT;
    }

    private static final long isp_ent$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *isp_ent
     * }
     */
    public static final long isp_ent$offset() {
        return isp_ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *isp_ent
     * }
     */
    public static MemorySegment isp_ent(MemorySegment struct) {
        return struct.get(isp_ent$LAYOUT, isp_ent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *isp_ent
     * }
     */
    public static void isp_ent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(isp_ent$LAYOUT, isp_ent$OFFSET, fieldValue);
    }

    private static final AddressLayout video_ent0$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_ent0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent0
     * }
     */
    public static final AddressLayout video_ent0$layout() {
        return video_ent0$LAYOUT;
    }

    private static final long video_ent0$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent0
     * }
     */
    public static final long video_ent0$offset() {
        return video_ent0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent0
     * }
     */
    public static MemorySegment video_ent0(MemorySegment struct) {
        return struct.get(video_ent0$LAYOUT, video_ent0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent0
     * }
     */
    public static void video_ent0(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_ent0$LAYOUT, video_ent0$OFFSET, fieldValue);
    }

    private static final AddressLayout video_ent1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_ent1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent1
     * }
     */
    public static final AddressLayout video_ent1$layout() {
        return video_ent1$LAYOUT;
    }

    private static final long video_ent1$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent1
     * }
     */
    public static final long video_ent1$offset() {
        return video_ent1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent1
     * }
     */
    public static MemorySegment video_ent1(MemorySegment struct) {
        return struct.get(video_ent1$LAYOUT, video_ent1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent1
     * }
     */
    public static void video_ent1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_ent1$LAYOUT, video_ent1$OFFSET, fieldValue);
    }

    private static final AddressLayout video_ent2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_ent2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent2
     * }
     */
    public static final AddressLayout video_ent2$layout() {
        return video_ent2$LAYOUT;
    }

    private static final long video_ent2$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent2
     * }
     */
    public static final long video_ent2$offset() {
        return video_ent2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent2
     * }
     */
    public static MemorySegment video_ent2(MemorySegment struct) {
        return struct.get(video_ent2$LAYOUT, video_ent2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent2
     * }
     */
    public static void video_ent2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_ent2$LAYOUT, video_ent2$OFFSET, fieldValue);
    }

    private static final AddressLayout video_ent3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_ent3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent3
     * }
     */
    public static final AddressLayout video_ent3$layout() {
        return video_ent3$LAYOUT;
    }

    private static final long video_ent3$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent3
     * }
     */
    public static final long video_ent3$offset() {
        return video_ent3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent3
     * }
     */
    public static MemorySegment video_ent3(MemorySegment struct) {
        return struct.get(video_ent3$LAYOUT, video_ent3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_ent3
     * }
     */
    public static void video_ent3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_ent3$LAYOUT, video_ent3$OFFSET, fieldValue);
    }

    private static final AddressLayout video_stats$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_stats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_stats
     * }
     */
    public static final AddressLayout video_stats$layout() {
        return video_stats$LAYOUT;
    }

    private static final long video_stats$OFFSET = 496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_stats
     * }
     */
    public static final long video_stats$offset() {
        return video_stats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_stats
     * }
     */
    public static MemorySegment video_stats(MemorySegment struct) {
        return struct.get(video_stats$LAYOUT, video_stats$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_stats
     * }
     */
    public static void video_stats(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_stats$LAYOUT, video_stats$OFFSET, fieldValue);
    }

    private static final AddressLayout video_param$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("video_param"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *video_param
     * }
     */
    public static final AddressLayout video_param$layout() {
        return video_param$LAYOUT;
    }

    private static final long video_param$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *video_param
     * }
     */
    public static final long video_param$offset() {
        return video_param$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *video_param
     * }
     */
    public static MemorySegment video_param(MemorySegment struct) {
        return struct.get(video_param$LAYOUT, video_param$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *video_param
     * }
     */
    public static void video_param(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(video_param$LAYOUT, video_param$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

