// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_timecode {
 *     __u32 type;
 *     __u32 flags;
 *     __u8 frames;
 *     __u8 seconds;
 *     __u8 minutes;
 *     __u8 hours;
 *     __u8 userbits[4];
 * }
 * }
 */
public class v4l2_timecode {

    v4l2_timecode() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("type"),
        mediaAPI.C_INT.withName("flags"),
        mediaAPI.C_CHAR.withName("frames"),
        mediaAPI.C_CHAR.withName("seconds"),
        mediaAPI.C_CHAR.withName("minutes"),
        mediaAPI.C_CHAR.withName("hours"),
        MemoryLayout.sequenceLayout(4, mediaAPI.C_CHAR).withName("userbits")
    ).withName("v4l2_timecode");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfByte frames$LAYOUT = (OfByte)$LAYOUT.select(groupElement("frames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 frames
     * }
     */
    public static final OfByte frames$layout() {
        return frames$LAYOUT;
    }

    private static final long frames$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 frames
     * }
     */
    public static final long frames$offset() {
        return frames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 frames
     * }
     */
    public static byte frames(MemorySegment struct) {
        return struct.get(frames$LAYOUT, frames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 frames
     * }
     */
    public static void frames(MemorySegment struct, byte fieldValue) {
        struct.set(frames$LAYOUT, frames$OFFSET, fieldValue);
    }

    private static final OfByte seconds$LAYOUT = (OfByte)$LAYOUT.select(groupElement("seconds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 seconds
     * }
     */
    public static final OfByte seconds$layout() {
        return seconds$LAYOUT;
    }

    private static final long seconds$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 seconds
     * }
     */
    public static final long seconds$offset() {
        return seconds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 seconds
     * }
     */
    public static byte seconds(MemorySegment struct) {
        return struct.get(seconds$LAYOUT, seconds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 seconds
     * }
     */
    public static void seconds(MemorySegment struct, byte fieldValue) {
        struct.set(seconds$LAYOUT, seconds$OFFSET, fieldValue);
    }

    private static final OfByte minutes$LAYOUT = (OfByte)$LAYOUT.select(groupElement("minutes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 minutes
     * }
     */
    public static final OfByte minutes$layout() {
        return minutes$LAYOUT;
    }

    private static final long minutes$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 minutes
     * }
     */
    public static final long minutes$offset() {
        return minutes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 minutes
     * }
     */
    public static byte minutes(MemorySegment struct) {
        return struct.get(minutes$LAYOUT, minutes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 minutes
     * }
     */
    public static void minutes(MemorySegment struct, byte fieldValue) {
        struct.set(minutes$LAYOUT, minutes$OFFSET, fieldValue);
    }

    private static final OfByte hours$LAYOUT = (OfByte)$LAYOUT.select(groupElement("hours"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 hours
     * }
     */
    public static final OfByte hours$layout() {
        return hours$LAYOUT;
    }

    private static final long hours$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 hours
     * }
     */
    public static final long hours$offset() {
        return hours$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 hours
     * }
     */
    public static byte hours(MemorySegment struct) {
        return struct.get(hours$LAYOUT, hours$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 hours
     * }
     */
    public static void hours(MemorySegment struct, byte fieldValue) {
        struct.set(hours$LAYOUT, hours$OFFSET, fieldValue);
    }

    private static final SequenceLayout userbits$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("userbits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static final SequenceLayout userbits$layout() {
        return userbits$LAYOUT;
    }

    private static final long userbits$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static final long userbits$offset() {
        return userbits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static MemorySegment userbits(MemorySegment struct) {
        return struct.asSlice(userbits$OFFSET, userbits$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static void userbits(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, userbits$OFFSET, userbits$LAYOUT.byteSize());
    }

    private static long[] userbits$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static long[] userbits$dimensions() {
        return userbits$DIMS;
    }
    private static final VarHandle userbits$ELEM_HANDLE = userbits$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static byte userbits(MemorySegment struct, long index0) {
        return (byte)userbits$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 userbits[4]
     * }
     */
    public static void userbits(MemorySegment struct, long index0, byte fieldValue) {
        userbits$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

