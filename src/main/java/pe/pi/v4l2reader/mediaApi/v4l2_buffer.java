// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_buffer {
 *     __u32 index;
 *     __u32 type;
 *     __u32 bytesused;
 *     __u32 flags;
 *     __u32 field;
 *     struct timeval timestamp;
 *     struct v4l2_timecode timecode;
 *     __u32 sequence;
 *     __u32 memory;
 *     union {
 *         __u32 offset;
 *         unsigned long userptr;
 *         struct v4l2_plane *planes;
 *         __s32 fd;
 *     } m;
 *     __u32 length;
 *     __u32 reserved2;
 *     union {
 *         __s32 request_fd;
 *         __u32 reserved;
 *     };
 * }
 * }
 */
public class v4l2_buffer {

    v4l2_buffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("index"),
        mediaAPI.C_INT.withName("type"),
        mediaAPI.C_INT.withName("bytesused"),
        mediaAPI.C_INT.withName("flags"),
        mediaAPI.C_INT.withName("field"),
        MemoryLayout.paddingLayout(4),
        timeval.layout().withName("timestamp"),
        v4l2_timecode.layout().withName("timecode"),
        mediaAPI.C_INT.withName("sequence"),
        mediaAPI.C_INT.withName("memory"),
        v4l2_buffer.m.layout().withName("m"),
        mediaAPI.C_INT.withName("length"),
        mediaAPI.C_INT.withName("reserved2"),
        MemoryLayout.unionLayout(
            mediaAPI.C_INT.withName("request_fd"),
            mediaAPI.C_INT.withName("reserved")
        ).withName("$anon$1085:2"),
        MemoryLayout.paddingLayout(4)
    ).withName("v4l2_buffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt bytesused$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bytesused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 bytesused
     * }
     */
    public static final OfInt bytesused$layout() {
        return bytesused$LAYOUT;
    }

    private static final long bytesused$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 bytesused
     * }
     */
    public static final long bytesused$offset() {
        return bytesused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 bytesused
     * }
     */
    public static int bytesused(MemorySegment struct) {
        return struct.get(bytesused$LAYOUT, bytesused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 bytesused
     * }
     */
    public static void bytesused(MemorySegment struct, int fieldValue) {
        struct.set(bytesused$LAYOUT, bytesused$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt field$LAYOUT = (OfInt)$LAYOUT.select(groupElement("field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final OfInt field$layout() {
        return field$LAYOUT;
    }

    private static final long field$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final long field$offset() {
        return field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static int field(MemorySegment struct) {
        return struct.get(field$LAYOUT, field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static void field(MemorySegment struct, int fieldValue) {
        struct.set(field$LAYOUT, field$OFFSET, fieldValue);
    }

    private static final GroupLayout timestamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct timeval timestamp
     * }
     */
    public static final GroupLayout timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct timeval timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct timeval timestamp
     * }
     */
    public static MemorySegment timestamp(MemorySegment struct) {
        return struct.asSlice(timestamp$OFFSET, timestamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct timeval timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timestamp$OFFSET, timestamp$LAYOUT.byteSize());
    }

    private static final GroupLayout timecode$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timecode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct v4l2_timecode timecode
     * }
     */
    public static final GroupLayout timecode$layout() {
        return timecode$LAYOUT;
    }

    private static final long timecode$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct v4l2_timecode timecode
     * }
     */
    public static final long timecode$offset() {
        return timecode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct v4l2_timecode timecode
     * }
     */
    public static MemorySegment timecode(MemorySegment struct) {
        return struct.asSlice(timecode$OFFSET, timecode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct v4l2_timecode timecode
     * }
     */
    public static void timecode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timecode$OFFSET, timecode$LAYOUT.byteSize());
    }

    private static final OfInt sequence$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sequence
     * }
     */
    public static final OfInt sequence$layout() {
        return sequence$LAYOUT;
    }

    private static final long sequence$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sequence
     * }
     */
    public static final long sequence$offset() {
        return sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sequence
     * }
     */
    public static int sequence(MemorySegment struct) {
        return struct.get(sequence$LAYOUT, sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sequence
     * }
     */
    public static void sequence(MemorySegment struct, int fieldValue) {
        struct.set(sequence$LAYOUT, sequence$OFFSET, fieldValue);
    }

    private static final OfInt memory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 memory
     * }
     */
    public static final OfInt memory$layout() {
        return memory$LAYOUT;
    }

    private static final long memory$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 memory
     * }
     */
    public static final long memory$offset() {
        return memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 memory
     * }
     */
    public static int memory(MemorySegment struct) {
        return struct.get(memory$LAYOUT, memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 memory
     * }
     */
    public static void memory(MemorySegment struct, int fieldValue) {
        struct.set(memory$LAYOUT, memory$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     __u32 offset;
     *     unsigned long userptr;
     *     struct v4l2_plane *planes;
     *     __s32 fd;
     * }
     * }
     */
    public static class m {

        m() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            mediaAPI.C_INT.withName("offset"),
            mediaAPI.C_LONG.withName("userptr"),
            mediaAPI.C_POINTER.withName("planes"),
            mediaAPI.C_INT.withName("fd")
        ).withName("$anon$1077:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 offset
         * }
         */
        public static final OfInt offset$layout() {
            return offset$LAYOUT;
        }

        private static final long offset$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 offset
         * }
         */
        public static final long offset$offset() {
            return offset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 offset
         * }
         */
        public static int offset(MemorySegment union) {
            return union.get(offset$LAYOUT, offset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 offset
         * }
         */
        public static void offset(MemorySegment union, int fieldValue) {
            union.set(offset$LAYOUT, offset$OFFSET, fieldValue);
        }

        private static final OfLong userptr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("userptr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned long userptr
         * }
         */
        public static final OfLong userptr$layout() {
            return userptr$LAYOUT;
        }

        private static final long userptr$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned long userptr
         * }
         */
        public static final long userptr$offset() {
            return userptr$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned long userptr
         * }
         */
        public static long userptr(MemorySegment union) {
            return union.get(userptr$LAYOUT, userptr$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned long userptr
         * }
         */
        public static void userptr(MemorySegment union, long fieldValue) {
            union.set(userptr$LAYOUT, userptr$OFFSET, fieldValue);
        }

        private static final AddressLayout planes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("planes"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct v4l2_plane *planes
         * }
         */
        public static final AddressLayout planes$layout() {
            return planes$LAYOUT;
        }

        private static final long planes$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct v4l2_plane *planes
         * }
         */
        public static final long planes$offset() {
            return planes$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct v4l2_plane *planes
         * }
         */
        public static MemorySegment planes(MemorySegment union) {
            return union.get(planes$LAYOUT, planes$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct v4l2_plane *planes
         * }
         */
        public static void planes(MemorySegment union, MemorySegment fieldValue) {
            union.set(planes$LAYOUT, planes$OFFSET, fieldValue);
        }

        private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __s32 fd
         * }
         */
        public static final OfInt fd$layout() {
            return fd$LAYOUT;
        }

        private static final long fd$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __s32 fd
         * }
         */
        public static final long fd$offset() {
            return fd$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __s32 fd
         * }
         */
        public static int fd(MemorySegment union) {
            return union.get(fd$LAYOUT, fd$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __s32 fd
         * }
         */
        public static void fd(MemorySegment union, int fieldValue) {
            union.set(fd$LAYOUT, fd$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout m$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     __u32 offset;
     *     unsigned long userptr;
     *     struct v4l2_plane *planes;
     *     __s32 fd;
     * } m
     * }
     */
    public static final GroupLayout m$layout() {
        return m$LAYOUT;
    }

    private static final long m$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     __u32 offset;
     *     unsigned long userptr;
     *     struct v4l2_plane *planes;
     *     __s32 fd;
     * } m
     * }
     */
    public static final long m$offset() {
        return m$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     __u32 offset;
     *     unsigned long userptr;
     *     struct v4l2_plane *planes;
     *     __s32 fd;
     * } m
     * }
     */
    public static MemorySegment m(MemorySegment struct) {
        return struct.asSlice(m$OFFSET, m$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     __u32 offset;
     *     unsigned long userptr;
     *     struct v4l2_plane *planes;
     *     __s32 fd;
     * } m
     * }
     */
    public static void m(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m$OFFSET, m$LAYOUT.byteSize());
    }

    private static final OfInt length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 length
     * }
     */
    public static final OfInt length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 length
     * }
     */
    public static int length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 length
     * }
     */
    public static void length(MemorySegment struct, int fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfInt reserved2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved2
     * }
     */
    public static final OfInt reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved2
     * }
     */
    public static int reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, int fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final OfInt request_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1085:2"), groupElement("request_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __s32 request_fd
     * }
     */
    public static final OfInt request_fd$layout() {
        return request_fd$LAYOUT;
    }

    private static final long request_fd$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __s32 request_fd
     * }
     */
    public static final long request_fd$offset() {
        return request_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 request_fd
     * }
     */
    public static int request_fd(MemorySegment struct) {
        return struct.get(request_fd$LAYOUT, request_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 request_fd
     * }
     */
    public static void request_fd(MemorySegment struct, int fieldValue) {
        struct.set(request_fd$LAYOUT, request_fd$OFFSET, fieldValue);
    }

    private static final OfInt reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1085:2"), groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static final OfInt reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static int reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static void reserved(MemorySegment struct, int fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

