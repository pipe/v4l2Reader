// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class mediaAPI_2 extends mediaAPI_3 {

    mediaAPI_2() {
        // Should not be called directly
    }

    private static class media_get_devnode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_devnode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *media_get_devnode(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_get_devnode$descriptor() {
        return media_get_devnode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *media_get_devnode(struct media_device *media)
     * }
     */
    public static MethodHandle media_get_devnode$handle() {
        return media_get_devnode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *media_get_devnode(struct media_device *media)
     * }
     */
    public static MemorySegment media_get_devnode$address() {
        return media_get_devnode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *media_get_devnode(struct media_device *media)
     * }
     */
    public static MemorySegment media_get_devnode(MemorySegment media) {
        var mh$ = media_get_devnode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_devnode", media);
            }
            return (MemorySegment)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_setup_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_setup_link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_setup_link(struct media_device *media, struct media_pad *source, struct media_pad *sink, __u32 flags)
     * }
     */
    public static FunctionDescriptor media_setup_link$descriptor() {
        return media_setup_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_setup_link(struct media_device *media, struct media_pad *source, struct media_pad *sink, __u32 flags)
     * }
     */
    public static MethodHandle media_setup_link$handle() {
        return media_setup_link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_setup_link(struct media_device *media, struct media_pad *source, struct media_pad *sink, __u32 flags)
     * }
     */
    public static MemorySegment media_setup_link$address() {
        return media_setup_link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_setup_link(struct media_device *media, struct media_pad *source, struct media_pad *sink, __u32 flags)
     * }
     */
    public static int media_setup_link(MemorySegment media, MemorySegment source, MemorySegment sink, int flags) {
        var mh$ = media_setup_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_setup_link", media, source, sink, flags);
            }
            return (int)mh$.invokeExact(media, source, sink, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_reset_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_reset_links");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_reset_links(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_reset_links$descriptor() {
        return media_reset_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_reset_links(struct media_device *media)
     * }
     */
    public static MethodHandle media_reset_links$handle() {
        return media_reset_links.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_reset_links(struct media_device *media)
     * }
     */
    public static MemorySegment media_reset_links$address() {
        return media_reset_links.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_reset_links(struct media_device *media)
     * }
     */
    public static int media_reset_links(MemorySegment media) {
        var mh$ = media_reset_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_reset_links", media);
            }
            return (int)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_parse_pad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_parse_pad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_pad *media_parse_pad(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static FunctionDescriptor media_parse_pad$descriptor() {
        return media_parse_pad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_pad *media_parse_pad(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MethodHandle media_parse_pad$handle() {
        return media_parse_pad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_pad *media_parse_pad(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MemorySegment media_parse_pad$address() {
        return media_parse_pad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_pad *media_parse_pad(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MemorySegment media_parse_pad(MemorySegment media, MemorySegment p, MemorySegment endp) {
        var mh$ = media_parse_pad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_parse_pad", media, p, endp);
            }
            return (MemorySegment)mh$.invokeExact(media, p, endp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_parse_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_parse_link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_link *media_parse_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static FunctionDescriptor media_parse_link$descriptor() {
        return media_parse_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_link *media_parse_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MethodHandle media_parse_link$handle() {
        return media_parse_link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_link *media_parse_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MemorySegment media_parse_link$address() {
        return media_parse_link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_link *media_parse_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MemorySegment media_parse_link(MemorySegment media, MemorySegment p, MemorySegment endp) {
        var mh$ = media_parse_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_parse_link", media, p, endp);
            }
            return (MemorySegment)mh$.invokeExact(media, p, endp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_parse_setup_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_parse_setup_link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_parse_setup_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static FunctionDescriptor media_parse_setup_link$descriptor() {
        return media_parse_setup_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_parse_setup_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MethodHandle media_parse_setup_link$handle() {
        return media_parse_setup_link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_parse_setup_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static MemorySegment media_parse_setup_link$address() {
        return media_parse_setup_link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_parse_setup_link(struct media_device *media, const char *p, char **endp)
     * }
     */
    public static int media_parse_setup_link(MemorySegment media, MemorySegment p, MemorySegment endp) {
        var mh$ = media_parse_setup_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_parse_setup_link", media, p, endp);
            }
            return (int)mh$.invokeExact(media, p, endp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_parse_setup_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_parse_setup_links");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_parse_setup_links(struct media_device *media, const char *p)
     * }
     */
    public static FunctionDescriptor media_parse_setup_links$descriptor() {
        return media_parse_setup_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_parse_setup_links(struct media_device *media, const char *p)
     * }
     */
    public static MethodHandle media_parse_setup_links$handle() {
        return media_parse_setup_links.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_parse_setup_links(struct media_device *media, const char *p)
     * }
     */
    public static MemorySegment media_parse_setup_links$address() {
        return media_parse_setup_links.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_parse_setup_links(struct media_device *media, const char *p)
     * }
     */
    public static int media_parse_setup_links(MemorySegment media, MemorySegment p) {
        var mh$ = media_parse_setup_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_parse_setup_links", media, p);
            }
            return (int)mh$.invokeExact(media, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_print_streampos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_print_streampos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void media_print_streampos(struct media_device *media, const char *p, const char *end)
     * }
     */
    public static FunctionDescriptor media_print_streampos$descriptor() {
        return media_print_streampos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void media_print_streampos(struct media_device *media, const char *p, const char *end)
     * }
     */
    public static MethodHandle media_print_streampos$handle() {
        return media_print_streampos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void media_print_streampos(struct media_device *media, const char *p, const char *end)
     * }
     */
    public static MemorySegment media_print_streampos$address() {
        return media_print_streampos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void media_print_streampos(struct media_device *media, const char *p, const char *end)
     * }
     */
    public static void media_print_streampos(MemorySegment media, MemorySegment p, MemorySegment end) {
        var mh$ = media_print_streampos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_print_streampos", media, p, end);
            }
            mh$.invokeExact(media, p, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = mediaAPI.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("pselect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MemorySegment pselect$address() {
        return pselect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gettimeofday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("gettimeofday");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static FunctionDescriptor gettimeofday$descriptor() {
        return gettimeofday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static MethodHandle gettimeofday$handle() {
        return gettimeofday.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static MemorySegment gettimeofday$address() {
        return gettimeofday.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static int gettimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = gettimeofday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gettimeofday", __tv, __tz);
            }
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class settimeofday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("settimeofday");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static FunctionDescriptor settimeofday$descriptor() {
        return settimeofday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static MethodHandle settimeofday$handle() {
        return settimeofday.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static MemorySegment settimeofday$address() {
        return settimeofday.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static int settimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = settimeofday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("settimeofday", __tv, __tz);
            }
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class adjtime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("adjtime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static FunctionDescriptor adjtime$descriptor() {
        return adjtime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static MethodHandle adjtime$handle() {
        return adjtime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static MemorySegment adjtime$address() {
        return adjtime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static int adjtime(MemorySegment __delta, MemorySegment __olddelta) {
        var mh$ = adjtime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("adjtime", __delta, __olddelta);
            }
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIMER_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_REAL = 0
     * }
     */
    public static int ITIMER_REAL() {
        return ITIMER_REAL;
    }
    private static final int ITIMER_VIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_VIRTUAL = 1
     * }
     */
    public static int ITIMER_VIRTUAL() {
        return ITIMER_VIRTUAL;
    }
    private static final int ITIMER_PROF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_PROF = 2
     * }
     */
    public static int ITIMER_PROF() {
        return ITIMER_PROF;
    }
    /**
     * {@snippet lang=c :
     * typedef int __itimer_which_t
     * }
     */
    public static final OfInt __itimer_which_t = mediaAPI.C_INT;

    private static class getitimer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getitimer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static FunctionDescriptor getitimer$descriptor() {
        return getitimer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static MethodHandle getitimer$handle() {
        return getitimer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static MemorySegment getitimer$address() {
        return getitimer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static int getitimer(int __which, MemorySegment __value) {
        var mh$ = getitimer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getitimer", __which, __value);
            }
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setitimer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setitimer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static FunctionDescriptor setitimer$descriptor() {
        return setitimer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static MethodHandle setitimer$handle() {
        return setitimer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static MemorySegment setitimer$address() {
        return setitimer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static int setitimer(int __which, MemorySegment __new, MemorySegment __old) {
        var mh$ = setitimer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setitimer", __which, __new, __old);
            }
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class utimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("utimes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor utimes$descriptor() {
        return utimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle utimes$handle() {
        return utimes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MemorySegment utimes$address() {
        return utimes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static int utimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = utimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("utimes", __file, __tvp);
            }
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lutimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("lutimes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor lutimes$descriptor() {
        return lutimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle lutimes$handle() {
        return lutimes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MemorySegment lutimes$address() {
        return lutimes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static int lutimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = lutimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lutimes", __file, __tvp);
            }
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class futimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("futimes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor futimes$descriptor() {
        return futimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle futimes$handle() {
        return futimes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static MemorySegment futimes$address() {
        return futimes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static int futimes(int __fd, MemorySegment __tvp) {
        var mh$ = futimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("futimes", __fd, __tvp);
            }
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int V4L2_CID_POWER_LINE_FREQUENCY_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_power_line_frequency.V4L2_CID_POWER_LINE_FREQUENCY_DISABLED = 0
     * }
     */
    public static int V4L2_CID_POWER_LINE_FREQUENCY_DISABLED() {
        return V4L2_CID_POWER_LINE_FREQUENCY_DISABLED;
    }
    private static final int V4L2_CID_POWER_LINE_FREQUENCY_50HZ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_power_line_frequency.V4L2_CID_POWER_LINE_FREQUENCY_50HZ = 1
     * }
     */
    public static int V4L2_CID_POWER_LINE_FREQUENCY_50HZ() {
        return V4L2_CID_POWER_LINE_FREQUENCY_50HZ;
    }
    private static final int V4L2_CID_POWER_LINE_FREQUENCY_60HZ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_power_line_frequency.V4L2_CID_POWER_LINE_FREQUENCY_60HZ = 2
     * }
     */
    public static int V4L2_CID_POWER_LINE_FREQUENCY_60HZ() {
        return V4L2_CID_POWER_LINE_FREQUENCY_60HZ;
    }
    private static final int V4L2_CID_POWER_LINE_FREQUENCY_AUTO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_power_line_frequency.V4L2_CID_POWER_LINE_FREQUENCY_AUTO = 3
     * }
     */
    public static int V4L2_CID_POWER_LINE_FREQUENCY_AUTO() {
        return V4L2_CID_POWER_LINE_FREQUENCY_AUTO;
    }
    private static final int V4L2_COLORFX_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_NONE = 0
     * }
     */
    public static int V4L2_COLORFX_NONE() {
        return V4L2_COLORFX_NONE;
    }
    private static final int V4L2_COLORFX_BW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_BW = 1
     * }
     */
    public static int V4L2_COLORFX_BW() {
        return V4L2_COLORFX_BW;
    }
    private static final int V4L2_COLORFX_SEPIA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SEPIA = 2
     * }
     */
    public static int V4L2_COLORFX_SEPIA() {
        return V4L2_COLORFX_SEPIA;
    }
    private static final int V4L2_COLORFX_NEGATIVE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_NEGATIVE = 3
     * }
     */
    public static int V4L2_COLORFX_NEGATIVE() {
        return V4L2_COLORFX_NEGATIVE;
    }
    private static final int V4L2_COLORFX_EMBOSS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_EMBOSS = 4
     * }
     */
    public static int V4L2_COLORFX_EMBOSS() {
        return V4L2_COLORFX_EMBOSS;
    }
    private static final int V4L2_COLORFX_SKETCH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SKETCH = 5
     * }
     */
    public static int V4L2_COLORFX_SKETCH() {
        return V4L2_COLORFX_SKETCH;
    }
    private static final int V4L2_COLORFX_SKY_BLUE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SKY_BLUE = 6
     * }
     */
    public static int V4L2_COLORFX_SKY_BLUE() {
        return V4L2_COLORFX_SKY_BLUE;
    }
    private static final int V4L2_COLORFX_GRASS_GREEN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_GRASS_GREEN = 7
     * }
     */
    public static int V4L2_COLORFX_GRASS_GREEN() {
        return V4L2_COLORFX_GRASS_GREEN;
    }
    private static final int V4L2_COLORFX_SKIN_WHITEN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SKIN_WHITEN = 8
     * }
     */
    public static int V4L2_COLORFX_SKIN_WHITEN() {
        return V4L2_COLORFX_SKIN_WHITEN;
    }
    private static final int V4L2_COLORFX_VIVID = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_VIVID = 9
     * }
     */
    public static int V4L2_COLORFX_VIVID() {
        return V4L2_COLORFX_VIVID;
    }
    private static final int V4L2_COLORFX_AQUA = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_AQUA = 10
     * }
     */
    public static int V4L2_COLORFX_AQUA() {
        return V4L2_COLORFX_AQUA;
    }
    private static final int V4L2_COLORFX_ART_FREEZE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_ART_FREEZE = 11
     * }
     */
    public static int V4L2_COLORFX_ART_FREEZE() {
        return V4L2_COLORFX_ART_FREEZE;
    }
    private static final int V4L2_COLORFX_SILHOUETTE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SILHOUETTE = 12
     * }
     */
    public static int V4L2_COLORFX_SILHOUETTE() {
        return V4L2_COLORFX_SILHOUETTE;
    }
    private static final int V4L2_COLORFX_SOLARIZATION = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SOLARIZATION = 13
     * }
     */
    public static int V4L2_COLORFX_SOLARIZATION() {
        return V4L2_COLORFX_SOLARIZATION;
    }
    private static final int V4L2_COLORFX_ANTIQUE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_ANTIQUE = 14
     * }
     */
    public static int V4L2_COLORFX_ANTIQUE() {
        return V4L2_COLORFX_ANTIQUE;
    }
    private static final int V4L2_COLORFX_SET_CBCR = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SET_CBCR = 15
     * }
     */
    public static int V4L2_COLORFX_SET_CBCR() {
        return V4L2_COLORFX_SET_CBCR;
    }
    private static final int V4L2_COLORFX_SET_RGB = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorfx.V4L2_COLORFX_SET_RGB = 16
     * }
     */
    public static int V4L2_COLORFX_SET_RGB() {
        return V4L2_COLORFX_SET_RGB;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG2_PS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG2_PS = 0
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG2_PS() {
        return V4L2_MPEG_STREAM_TYPE_MPEG2_PS;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG2_TS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG2_TS = 1
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG2_TS() {
        return V4L2_MPEG_STREAM_TYPE_MPEG2_TS;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG1_SS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG1_SS = 2
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG1_SS() {
        return V4L2_MPEG_STREAM_TYPE_MPEG1_SS;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = 3
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG2_DVD() {
        return V4L2_MPEG_STREAM_TYPE_MPEG2_DVD;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = 4
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG1_VCD() {
        return V4L2_MPEG_STREAM_TYPE_MPEG1_VCD;
    }
    private static final int V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_type.V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = 5
     * }
     */
    public static int V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD() {
        return V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD;
    }
    private static final int V4L2_MPEG_STREAM_VBI_FMT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_vbi_fmt.V4L2_MPEG_STREAM_VBI_FMT_NONE = 0
     * }
     */
    public static int V4L2_MPEG_STREAM_VBI_FMT_NONE() {
        return V4L2_MPEG_STREAM_VBI_FMT_NONE;
    }
    private static final int V4L2_MPEG_STREAM_VBI_FMT_IVTV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_stream_vbi_fmt.V4L2_MPEG_STREAM_VBI_FMT_IVTV = 1
     * }
     */
    public static int V4L2_MPEG_STREAM_VBI_FMT_IVTV() {
        return V4L2_MPEG_STREAM_VBI_FMT_IVTV;
    }
    private static final int V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_sampling_freq.V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100() {
        return V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100;
    }
    private static final int V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_sampling_freq.V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000() {
        return V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000;
    }
    private static final int V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_sampling_freq.V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000() {
        return V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000;
    }
    private static final int V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_encoding.V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_ENCODING_LAYER_1() {
        return V4L2_MPEG_AUDIO_ENCODING_LAYER_1;
    }
    private static final int V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_encoding.V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_ENCODING_LAYER_2() {
        return V4L2_MPEG_AUDIO_ENCODING_LAYER_2;
    }
    private static final int V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_encoding.V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_ENCODING_LAYER_3() {
        return V4L2_MPEG_AUDIO_ENCODING_LAYER_3;
    }
    private static final int V4L2_MPEG_AUDIO_ENCODING_AAC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_encoding.V4L2_MPEG_AUDIO_ENCODING_AAC = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_ENCODING_AAC() {
        return V4L2_MPEG_AUDIO_ENCODING_AAC;
    }
    private static final int V4L2_MPEG_AUDIO_ENCODING_AC3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_encoding.V4L2_MPEG_AUDIO_ENCODING_AC3 = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_ENCODING_AC3() {
        return V4L2_MPEG_AUDIO_ENCODING_AC3;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_32K = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_32K = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_32K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_32K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_64K = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_64K = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_64K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_64K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_96K = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_96K = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_96K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_96K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_128K = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_128K = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_128K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_128K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_160K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_160K = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_160K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_160K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_192K = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_192K = 5
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_192K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_192K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_224K = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_224K = 6
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_224K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_224K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_256K = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_256K = 7
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_256K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_256K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_288K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_288K = 8
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_288K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_288K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_320K = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_320K = 9
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_320K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_320K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_352K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_352K = 10
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_352K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_352K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_384K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_384K = 11
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_384K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_384K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_416K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_416K = 12
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_416K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_416K;
    }
    private static final int V4L2_MPEG_AUDIO_L1_BITRATE_448K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l1_bitrate.V4L2_MPEG_AUDIO_L1_BITRATE_448K = 13
     * }
     */
    public static int V4L2_MPEG_AUDIO_L1_BITRATE_448K() {
        return V4L2_MPEG_AUDIO_L1_BITRATE_448K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_32K = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_32K = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_32K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_32K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_48K = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_48K = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_48K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_48K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_56K = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_56K = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_56K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_56K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_64K = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_64K = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_64K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_64K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_80K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_80K = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_80K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_80K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_96K = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_96K = 5
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_96K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_96K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_112K = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_112K = 6
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_112K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_112K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_128K = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_128K = 7
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_128K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_128K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_160K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_160K = 8
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_160K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_160K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_192K = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_192K = 9
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_192K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_192K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_224K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_224K = 10
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_224K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_224K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_256K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_256K = 11
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_256K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_256K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_320K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_320K = 12
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_320K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_320K;
    }
    private static final int V4L2_MPEG_AUDIO_L2_BITRATE_384K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l2_bitrate.V4L2_MPEG_AUDIO_L2_BITRATE_384K = 13
     * }
     */
    public static int V4L2_MPEG_AUDIO_L2_BITRATE_384K() {
        return V4L2_MPEG_AUDIO_L2_BITRATE_384K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_32K = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_32K = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_32K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_32K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_40K = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_40K = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_40K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_40K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_48K = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_48K = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_48K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_48K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_56K = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_56K = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_56K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_56K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_64K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_64K = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_64K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_64K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_80K = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_80K = 5
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_80K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_80K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_96K = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_96K = 6
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_96K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_96K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_112K = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_112K = 7
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_112K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_112K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_128K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_128K = 8
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_128K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_128K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_160K = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_160K = 9
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_160K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_160K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_192K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_192K = 10
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_192K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_192K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_224K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_224K = 11
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_224K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_224K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_256K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_256K = 12
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_256K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_256K;
    }
    private static final int V4L2_MPEG_AUDIO_L3_BITRATE_320K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_l3_bitrate.V4L2_MPEG_AUDIO_L3_BITRATE_320K = 13
     * }
     */
    public static int V4L2_MPEG_AUDIO_L3_BITRATE_320K() {
        return V4L2_MPEG_AUDIO_L3_BITRATE_320K;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_STEREO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode.V4L2_MPEG_AUDIO_MODE_STEREO = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_STEREO() {
        return V4L2_MPEG_AUDIO_MODE_STEREO;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode.V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_JOINT_STEREO() {
        return V4L2_MPEG_AUDIO_MODE_JOINT_STEREO;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_DUAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode.V4L2_MPEG_AUDIO_MODE_DUAL = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_DUAL() {
        return V4L2_MPEG_AUDIO_MODE_DUAL;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_MONO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode.V4L2_MPEG_AUDIO_MODE_MONO = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_MONO() {
        return V4L2_MPEG_AUDIO_MODE_MONO;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode_extension.V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4() {
        return V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode_extension.V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8() {
        return V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode_extension.V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12() {
        return V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12;
    }
    private static final int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_mode_extension.V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16() {
        return V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16;
    }
    private static final int V4L2_MPEG_AUDIO_EMPHASIS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_emphasis.V4L2_MPEG_AUDIO_EMPHASIS_NONE = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_EMPHASIS_NONE() {
        return V4L2_MPEG_AUDIO_EMPHASIS_NONE;
    }
    private static final int V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_emphasis.V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS() {
        return V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS;
    }
    private static final int V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_emphasis.V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17() {
        return V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17;
    }
    private static final int V4L2_MPEG_AUDIO_CRC_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_crc.V4L2_MPEG_AUDIO_CRC_NONE = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_CRC_NONE() {
        return V4L2_MPEG_AUDIO_CRC_NONE;
    }
    private static final int V4L2_MPEG_AUDIO_CRC_CRC16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_crc.V4L2_MPEG_AUDIO_CRC_CRC16 = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_CRC_CRC16() {
        return V4L2_MPEG_AUDIO_CRC_CRC16;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_32K = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_32K = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_32K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_32K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_40K = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_40K = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_40K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_40K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_48K = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_48K = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_48K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_48K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_56K = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_56K = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_56K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_56K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_64K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_64K = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_64K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_64K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_80K = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_80K = 5
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_80K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_80K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_96K = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_96K = 6
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_96K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_96K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_112K = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_112K = 7
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_112K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_112K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_128K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_128K = 8
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_128K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_128K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_160K = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_160K = 9
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_160K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_160K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_192K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_192K = 10
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_192K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_192K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_224K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_224K = 11
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_224K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_224K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_256K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_256K = 12
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_256K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_256K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_320K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_320K = 13
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_320K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_320K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_384K = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_384K = 14
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_384K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_384K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_448K = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_448K = 15
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_448K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_448K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_512K = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_512K = 16
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_512K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_512K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_576K = (int)17L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_576K = 17
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_576K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_576K;
    }
    private static final int V4L2_MPEG_AUDIO_AC3_BITRATE_640K = (int)18L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_ac3_bitrate.V4L2_MPEG_AUDIO_AC3_BITRATE_640K = 18
     * }
     */
    public static int V4L2_MPEG_AUDIO_AC3_BITRATE_640K() {
        return V4L2_MPEG_AUDIO_AC3_BITRATE_640K;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO = 0
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO = 1
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT = 2
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT = 3
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO = 4
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO;
    }
    private static final int V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_audio_dec_playback.V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO = 5
     * }
     */
    public static int V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO() {
        return V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO;
    }
    private static final int V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_encoding.V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_ENCODING_MPEG_1() {
        return V4L2_MPEG_VIDEO_ENCODING_MPEG_1;
    }
    private static final int V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_encoding.V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_ENCODING_MPEG_2() {
        return V4L2_MPEG_VIDEO_ENCODING_MPEG_2;
    }
    private static final int V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_encoding.V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC() {
        return V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC;
    }
    private static final int V4L2_MPEG_VIDEO_ASPECT_1x1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_aspect.V4L2_MPEG_VIDEO_ASPECT_1x1 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_ASPECT_1x1() {
        return V4L2_MPEG_VIDEO_ASPECT_1x1;
    }
    private static final int V4L2_MPEG_VIDEO_ASPECT_4x3 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_aspect.V4L2_MPEG_VIDEO_ASPECT_4x3 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_ASPECT_4x3() {
        return V4L2_MPEG_VIDEO_ASPECT_4x3;
    }
    private static final int V4L2_MPEG_VIDEO_ASPECT_16x9 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_aspect.V4L2_MPEG_VIDEO_ASPECT_16x9 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_ASPECT_16x9() {
        return V4L2_MPEG_VIDEO_ASPECT_16x9;
    }
    private static final int V4L2_MPEG_VIDEO_ASPECT_221x100 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_aspect.V4L2_MPEG_VIDEO_ASPECT_221x100 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_ASPECT_221x100() {
        return V4L2_MPEG_VIDEO_ASPECT_221x100;
    }
    private static final int V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_bitrate_mode.V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_BITRATE_MODE_VBR() {
        return V4L2_MPEG_VIDEO_BITRATE_MODE_VBR;
    }
    private static final int V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_bitrate_mode.V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_BITRATE_MODE_CBR() {
        return V4L2_MPEG_VIDEO_BITRATE_MODE_CBR;
    }
    private static final int V4L2_MPEG_VIDEO_BITRATE_MODE_CQ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_bitrate_mode.V4L2_MPEG_VIDEO_BITRATE_MODE_CQ = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_BITRATE_MODE_CQ() {
        return V4L2_MPEG_VIDEO_BITRATE_MODE_CQ;
    }
    private static final int V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_header_mode.V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE() {
        return V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE;
    }
    private static final int V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_header_mode.V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME() {
        return V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME;
    }
    private static final int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_multi_slice_mode.V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE() {
        return V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE;
    }
    private static final int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_multi_slice_mode.V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB() {
        return V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB;
    }
    private static final int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_multi_slice_mode.V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES() {
        return V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES;
    }
    private static final int V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_multi_slice_mode.V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB() {
        return V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB;
    }
    private static final int V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_multi_slice_mode.V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES() {
        return V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES;
    }
    private static final int V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_RANDOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_intra_refresh_period_type.V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_RANDOM = 0
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_RANDOM() {
        return V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_RANDOM;
    }
    private static final int V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_CYCLIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_intra_refresh_period_type.V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_CYCLIC = 1
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_CYCLIC() {
        return V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE_CYCLIC;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_level.V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW() {
        return V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_level.V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN() {
        return V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_level.V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440() {
        return V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_level.V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH() {
        return V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg2_profile.V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW() {
        return V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW;
    }
    private static final int V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_entropy_mode.V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC() {
        return V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC;
    }
    private static final int V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_entropy_mode.V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC() {
        return V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_1_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_1_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_1_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_1_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_1B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_1B = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_1B() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_1B;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_1_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_1_1 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_1_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_1_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_1_2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_1_2 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_1_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_1_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_1_3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_1_3 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_1_3() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_1_3;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_2_0 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_2_0 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_2_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_2_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_2_1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_2_1 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_2_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_2_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_2_2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_2_2 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_2_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_2_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_3_0 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_3_0 = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_3_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_3_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_3_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_3_1 = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_3_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_3_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_3_2 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_3_2 = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_3_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_3_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_4_0 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_4_0 = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_4_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_4_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_4_1 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_4_1 = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_4_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_4_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_4_2 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_4_2 = 13
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_4_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_4_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_5_0 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_5_0 = 14
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_5_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_5_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_5_1 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_5_1 = 15
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_5_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_5_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_5_2 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_5_2 = 16
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_5_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_5_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_6_0 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_6_0 = 17
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_6_0() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_6_0;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_6_1 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_6_1 = 18
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_6_1() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_6_1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LEVEL_6_2 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_level.V4L2_MPEG_VIDEO_H264_LEVEL_6_2 = 19
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LEVEL_6_2() {
        return V4L2_MPEG_VIDEO_H264_LEVEL_6_2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_loop_filter_mode.V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED() {
        return V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_loop_filter_mode.V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED() {
        return V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED;
    }
    private static final int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_loop_filter_mode.V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY() {
        return V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_MAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_MAIN = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_MAIN() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH = 13
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA = 14
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH = 15
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH = 16
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH = (int)17L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_profile.V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH = 17
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH() {
        return V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11 = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33 = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11 = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11 = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33 = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99 = 13
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3 = 14
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2 = 15
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1 = 16
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1;
    }
    private static final int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED = (int)17L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_vui_sar_idc.V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED = 17
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED() {
        return V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM;
    }
    private static final int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_sei_fp_arrangement_type.V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL() {
        return V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_map_type.V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT() {
        return V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_change_dir.V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT() {
        return V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT;
    }
    private static final int V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_fmo_change_dir.V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT() {
        return V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT;
    }
    private static final int V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_hierarchical_coding_type.V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B() {
        return V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B;
    }
    private static final int V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_h264_hierarchical_coding_type.V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P() {
        return V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_0() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_0;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_1 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_1() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_1;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_2 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_2() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_2;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_3 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_3() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_3;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_4 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_4 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_4() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_4;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_LEVEL_5 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_level.V4L2_MPEG_VIDEO_MPEG4_LEVEL_5 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_LEVEL_5() {
        return V4L2_MPEG_VIDEO_MPEG4_LEVEL_5;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_profile.V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE() {
        return V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_profile.V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE() {
        return V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_profile.V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE() {
        return V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_profile.V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE() {
        return V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE;
    }
    private static final int V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_mpeg4_profile.V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY() {
        return V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_partitions.V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION = 0
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION() {
        return V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_partitions.V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS = 1
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS() {
        return V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_partitions.V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS = 2
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS() {
        return V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_partitions.V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS = 3
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS() {
        return V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_ref_frames.V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME = 0
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME() {
        return V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_ref_frames.V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME = 1
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME() {
        return V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_num_ref_frames.V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME = 2
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME() {
        return V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_golden_frame_sel.V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV = 0
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV() {
        return V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV;
    }
    private static final int V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_vp8_golden_frame_sel.V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD = 1
     * }
     */
    public static int V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD() {
        return V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD;
    }
    private static final int V4L2_MPEG_VIDEO_VP8_PROFILE_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp8_profile.V4L2_MPEG_VIDEO_VP8_PROFILE_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP8_PROFILE_0() {
        return V4L2_MPEG_VIDEO_VP8_PROFILE_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP8_PROFILE_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp8_profile.V4L2_MPEG_VIDEO_VP8_PROFILE_1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP8_PROFILE_1() {
        return V4L2_MPEG_VIDEO_VP8_PROFILE_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP8_PROFILE_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp8_profile.V4L2_MPEG_VIDEO_VP8_PROFILE_2 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP8_PROFILE_2() {
        return V4L2_MPEG_VIDEO_VP8_PROFILE_2;
    }
    private static final int V4L2_MPEG_VIDEO_VP8_PROFILE_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp8_profile.V4L2_MPEG_VIDEO_VP8_PROFILE_3 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP8_PROFILE_3() {
        return V4L2_MPEG_VIDEO_VP8_PROFILE_3;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_PROFILE_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_profile.V4L2_MPEG_VIDEO_VP9_PROFILE_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_PROFILE_0() {
        return V4L2_MPEG_VIDEO_VP9_PROFILE_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_PROFILE_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_profile.V4L2_MPEG_VIDEO_VP9_PROFILE_1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_PROFILE_1() {
        return V4L2_MPEG_VIDEO_VP9_PROFILE_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_PROFILE_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_profile.V4L2_MPEG_VIDEO_VP9_PROFILE_2 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_PROFILE_2() {
        return V4L2_MPEG_VIDEO_VP9_PROFILE_2;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_PROFILE_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_profile.V4L2_MPEG_VIDEO_VP9_PROFILE_3 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_PROFILE_3() {
        return V4L2_MPEG_VIDEO_VP9_PROFILE_3;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_1_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_1_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_1_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_1_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_1_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_1_1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_1_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_1_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_2_0 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_2_0 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_2_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_2_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_2_1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_2_1 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_2_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_2_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_3_0 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_3_0 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_3_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_3_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_3_1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_3_1 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_3_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_3_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_4_0 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_4_0 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_4_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_4_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_4_1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_4_1 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_4_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_4_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_5_0 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_5_0 = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_5_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_5_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_5_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_5_1 = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_5_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_5_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_5_2 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_5_2 = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_5_2() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_5_2;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_6_0 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_6_0 = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_6_0() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_6_0;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_6_1 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_6_1 = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_6_1() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_6_1;
    }
    private static final int V4L2_MPEG_VIDEO_VP9_LEVEL_6_2 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_vp9_level.V4L2_MPEG_VIDEO_VP9_LEVEL_6_2 = 13
     * }
     */
    public static int V4L2_MPEG_VIDEO_VP9_LEVEL_6_2() {
        return V4L2_MPEG_VIDEO_VP9_LEVEL_6_2;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_hier_coding_type.V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B() {
        return V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_hier_coding_type.V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P() {
        return V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_profile.V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN() {
        return V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_profile.V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE() {
        return V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_profile.V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10() {
        return V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_1 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_2 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_2() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_2;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_3 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_3() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_3;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_4 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_4 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_4() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_4;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_5 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_5 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_5() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_5;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1 = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2 = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_6 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_6 = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_6() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_6;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1 = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_level.V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2 = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2() {
        return V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_TIER_MAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_tier.V4L2_MPEG_VIDEO_HEVC_TIER_MAIN = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_TIER_MAIN() {
        return V4L2_MPEG_VIDEO_HEVC_TIER_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_TIER_HIGH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_hevc_tier.V4L2_MPEG_VIDEO_HEVC_TIER_HIGH = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_TIER_HIGH() {
        return V4L2_MPEG_VIDEO_HEVC_TIER_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_loop_filter_mode.V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED() {
        return V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_loop_filter_mode.V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED() {
        return V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_loop_filter_mode.V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY() {
        return V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_refresh_type.V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE() {
        return V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_refresh_type.V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA() {
        return V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_refresh_type.V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR() {
        return V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_SIZE_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_size_of_length_field.V4L2_MPEG_VIDEO_HEVC_SIZE_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_SIZE_0() {
        return V4L2_MPEG_VIDEO_HEVC_SIZE_0;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_SIZE_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_size_of_length_field.V4L2_MPEG_VIDEO_HEVC_SIZE_1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_SIZE_1() {
        return V4L2_MPEG_VIDEO_HEVC_SIZE_1;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_SIZE_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_size_of_length_field.V4L2_MPEG_VIDEO_HEVC_SIZE_2 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_SIZE_2() {
        return V4L2_MPEG_VIDEO_HEVC_SIZE_2;
    }
    private static final int V4L2_MPEG_VIDEO_HEVC_SIZE_4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_cid_mpeg_video_hevc_size_of_length_field.V4L2_MPEG_VIDEO_HEVC_SIZE_4 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_HEVC_SIZE_4() {
        return V4L2_MPEG_VIDEO_HEVC_SIZE_4;
    }
    private static final int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_frame_skip_mode.V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED() {
        return V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED;
    }
    private static final int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_frame_skip_mode.V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT() {
        return V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT;
    }
    private static final int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_frame_skip_mode.V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT() {
        return V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_profile.V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN() {
        return V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_PROFILE_HIGH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_profile.V4L2_MPEG_VIDEO_AV1_PROFILE_HIGH = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_PROFILE_HIGH() {
        return V4L2_MPEG_VIDEO_AV1_PROFILE_HIGH;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_PROFILE_PROFESSIONAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_profile.V4L2_MPEG_VIDEO_AV1_PROFILE_PROFESSIONAL = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_PROFILE_PROFESSIONAL() {
        return V4L2_MPEG_VIDEO_AV1_PROFILE_PROFESSIONAL;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_2_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_2_0 = 0
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_2_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_2_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_2_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_2_1 = 1
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_2_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_2_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_2_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_2_2 = 2
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_2_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_2_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_2_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_2_3 = 3
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_2_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_2_3;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_3_0 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_3_0 = 4
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_3_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_3_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_3_1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_3_1 = 5
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_3_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_3_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_3_2 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_3_2 = 6
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_3_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_3_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_3_3 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_3_3 = 7
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_3_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_3_3;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_4_0 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_4_0 = 8
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_4_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_4_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_4_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_4_1 = 9
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_4_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_4_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_4_2 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_4_2 = 10
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_4_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_4_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_4_3 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_4_3 = 11
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_4_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_4_3;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_5_0 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_5_0 = 12
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_5_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_5_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_5_1 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_5_1 = 13
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_5_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_5_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_5_2 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_5_2 = 14
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_5_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_5_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_5_3 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_5_3 = 15
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_5_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_5_3;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_6_0 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_6_0 = 16
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_6_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_6_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_6_1 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_6_1 = 17
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_6_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_6_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_6_2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_6_2 = 18
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_6_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_6_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_6_3 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_6_3 = 19
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_6_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_6_3;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_7_0 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_7_0 = 20
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_7_0() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_7_0;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_7_1 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_7_1 = 21
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_7_1() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_7_1;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_7_2 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_7_2 = 22
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_7_2() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_7_2;
    }
    private static final int V4L2_MPEG_VIDEO_AV1_LEVEL_7_3 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_video_av1_level.V4L2_MPEG_VIDEO_AV1_LEVEL_7_3 = 23
     * }
     */
    public static int V4L2_MPEG_VIDEO_AV1_LEVEL_7_3() {
        return V4L2_MPEG_VIDEO_AV1_LEVEL_7_3;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_spatial_filter_mode.V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = 0
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL() {
        return V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_spatial_filter_mode.V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = 1
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO() {
        return V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = 0
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF() {
        return V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = 1
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR() {
        return V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = 2
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT() {
        return V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = 3
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE() {
        return V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = 4
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE() {
        return V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = 0
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF() {
        return V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type.V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = 1
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR() {
        return V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_temporal_filter_mode.V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL() {
        return V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_temporal_filter_mode.V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = 1
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO() {
        return V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_median_filter_type.V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = 0
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF() {
        return V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_median_filter_type.V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = 1
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR() {
        return V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_median_filter_type.V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = 2
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT() {
        return V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_median_filter_type.V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 3
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT() {
        return V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT;
    }
    private static final int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_cx2341x_video_median_filter_type.V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = 4
     * }
     */
    public static int V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG() {
        return V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_frame_skip_mode.V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED = 0
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED() {
        return V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_frame_skip_mode.V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 1
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT() {
        return V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_frame_skip_mode.V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 2
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT() {
        return V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_force_frame_type.V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED = 0
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED() {
        return V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_force_frame_type.V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME = 1
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME() {
        return V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME;
    }
    private static final int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mpeg_mfc51_video_force_frame_type.V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED = 2
     * }
     */
    public static int V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED() {
        return V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED;
    }
    private static final int V4L2_EXPOSURE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_auto_type.V4L2_EXPOSURE_AUTO = 0
     * }
     */
    public static int V4L2_EXPOSURE_AUTO() {
        return V4L2_EXPOSURE_AUTO;
    }
    private static final int V4L2_EXPOSURE_MANUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_auto_type.V4L2_EXPOSURE_MANUAL = 1
     * }
     */
    public static int V4L2_EXPOSURE_MANUAL() {
        return V4L2_EXPOSURE_MANUAL;
    }
    private static final int V4L2_EXPOSURE_SHUTTER_PRIORITY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_auto_type.V4L2_EXPOSURE_SHUTTER_PRIORITY = 2
     * }
     */
    public static int V4L2_EXPOSURE_SHUTTER_PRIORITY() {
        return V4L2_EXPOSURE_SHUTTER_PRIORITY;
    }
    private static final int V4L2_EXPOSURE_APERTURE_PRIORITY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_auto_type.V4L2_EXPOSURE_APERTURE_PRIORITY = 3
     * }
     */
    public static int V4L2_EXPOSURE_APERTURE_PRIORITY() {
        return V4L2_EXPOSURE_APERTURE_PRIORITY;
    }
    private static final int V4L2_WHITE_BALANCE_MANUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_MANUAL = 0
     * }
     */
    public static int V4L2_WHITE_BALANCE_MANUAL() {
        return V4L2_WHITE_BALANCE_MANUAL;
    }
    private static final int V4L2_WHITE_BALANCE_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_AUTO = 1
     * }
     */
    public static int V4L2_WHITE_BALANCE_AUTO() {
        return V4L2_WHITE_BALANCE_AUTO;
    }
    private static final int V4L2_WHITE_BALANCE_INCANDESCENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_INCANDESCENT = 2
     * }
     */
    public static int V4L2_WHITE_BALANCE_INCANDESCENT() {
        return V4L2_WHITE_BALANCE_INCANDESCENT;
    }
    private static final int V4L2_WHITE_BALANCE_FLUORESCENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_FLUORESCENT = 3
     * }
     */
    public static int V4L2_WHITE_BALANCE_FLUORESCENT() {
        return V4L2_WHITE_BALANCE_FLUORESCENT;
    }
    private static final int V4L2_WHITE_BALANCE_FLUORESCENT_H = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_FLUORESCENT_H = 4
     * }
     */
    public static int V4L2_WHITE_BALANCE_FLUORESCENT_H() {
        return V4L2_WHITE_BALANCE_FLUORESCENT_H;
    }
    private static final int V4L2_WHITE_BALANCE_HORIZON = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_HORIZON = 5
     * }
     */
    public static int V4L2_WHITE_BALANCE_HORIZON() {
        return V4L2_WHITE_BALANCE_HORIZON;
    }
    private static final int V4L2_WHITE_BALANCE_DAYLIGHT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_DAYLIGHT = 6
     * }
     */
    public static int V4L2_WHITE_BALANCE_DAYLIGHT() {
        return V4L2_WHITE_BALANCE_DAYLIGHT;
    }
    private static final int V4L2_WHITE_BALANCE_FLASH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_FLASH = 7
     * }
     */
    public static int V4L2_WHITE_BALANCE_FLASH() {
        return V4L2_WHITE_BALANCE_FLASH;
    }
    private static final int V4L2_WHITE_BALANCE_CLOUDY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_CLOUDY = 8
     * }
     */
    public static int V4L2_WHITE_BALANCE_CLOUDY() {
        return V4L2_WHITE_BALANCE_CLOUDY;
    }
    private static final int V4L2_WHITE_BALANCE_SHADE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_n_preset_white_balance.V4L2_WHITE_BALANCE_SHADE = 9
     * }
     */
    public static int V4L2_WHITE_BALANCE_SHADE() {
        return V4L2_WHITE_BALANCE_SHADE;
    }
    private static final int V4L2_ISO_SENSITIVITY_MANUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_iso_sensitivity_auto_type.V4L2_ISO_SENSITIVITY_MANUAL = 0
     * }
     */
    public static int V4L2_ISO_SENSITIVITY_MANUAL() {
        return V4L2_ISO_SENSITIVITY_MANUAL;
    }
    private static final int V4L2_ISO_SENSITIVITY_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_iso_sensitivity_auto_type.V4L2_ISO_SENSITIVITY_AUTO = 1
     * }
     */
    public static int V4L2_ISO_SENSITIVITY_AUTO() {
        return V4L2_ISO_SENSITIVITY_AUTO;
    }
    private static final int V4L2_EXPOSURE_METERING_AVERAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_metering.V4L2_EXPOSURE_METERING_AVERAGE = 0
     * }
     */
    public static int V4L2_EXPOSURE_METERING_AVERAGE() {
        return V4L2_EXPOSURE_METERING_AVERAGE;
    }
    private static final int V4L2_EXPOSURE_METERING_CENTER_WEIGHTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_metering.V4L2_EXPOSURE_METERING_CENTER_WEIGHTED = 1
     * }
     */
    public static int V4L2_EXPOSURE_METERING_CENTER_WEIGHTED() {
        return V4L2_EXPOSURE_METERING_CENTER_WEIGHTED;
    }
    private static final int V4L2_EXPOSURE_METERING_SPOT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_metering.V4L2_EXPOSURE_METERING_SPOT = 2
     * }
     */
    public static int V4L2_EXPOSURE_METERING_SPOT() {
        return V4L2_EXPOSURE_METERING_SPOT;
    }
    private static final int V4L2_EXPOSURE_METERING_MATRIX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_exposure_metering.V4L2_EXPOSURE_METERING_MATRIX = 3
     * }
     */
    public static int V4L2_EXPOSURE_METERING_MATRIX() {
        return V4L2_EXPOSURE_METERING_MATRIX;
    }
    private static final int V4L2_SCENE_MODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_NONE = 0
     * }
     */
    public static int V4L2_SCENE_MODE_NONE() {
        return V4L2_SCENE_MODE_NONE;
    }
    private static final int V4L2_SCENE_MODE_BACKLIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_BACKLIGHT = 1
     * }
     */
    public static int V4L2_SCENE_MODE_BACKLIGHT() {
        return V4L2_SCENE_MODE_BACKLIGHT;
    }
    private static final int V4L2_SCENE_MODE_BEACH_SNOW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_BEACH_SNOW = 2
     * }
     */
    public static int V4L2_SCENE_MODE_BEACH_SNOW() {
        return V4L2_SCENE_MODE_BEACH_SNOW;
    }
    private static final int V4L2_SCENE_MODE_CANDLE_LIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_CANDLE_LIGHT = 3
     * }
     */
    public static int V4L2_SCENE_MODE_CANDLE_LIGHT() {
        return V4L2_SCENE_MODE_CANDLE_LIGHT;
    }
    private static final int V4L2_SCENE_MODE_DAWN_DUSK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_DAWN_DUSK = 4
     * }
     */
    public static int V4L2_SCENE_MODE_DAWN_DUSK() {
        return V4L2_SCENE_MODE_DAWN_DUSK;
    }
    private static final int V4L2_SCENE_MODE_FALL_COLORS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_FALL_COLORS = 5
     * }
     */
    public static int V4L2_SCENE_MODE_FALL_COLORS() {
        return V4L2_SCENE_MODE_FALL_COLORS;
    }
    private static final int V4L2_SCENE_MODE_FIREWORKS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_FIREWORKS = 6
     * }
     */
    public static int V4L2_SCENE_MODE_FIREWORKS() {
        return V4L2_SCENE_MODE_FIREWORKS;
    }
    private static final int V4L2_SCENE_MODE_LANDSCAPE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_LANDSCAPE = 7
     * }
     */
    public static int V4L2_SCENE_MODE_LANDSCAPE() {
        return V4L2_SCENE_MODE_LANDSCAPE;
    }
    private static final int V4L2_SCENE_MODE_NIGHT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_NIGHT = 8
     * }
     */
    public static int V4L2_SCENE_MODE_NIGHT() {
        return V4L2_SCENE_MODE_NIGHT;
    }
    private static final int V4L2_SCENE_MODE_PARTY_INDOOR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_PARTY_INDOOR = 9
     * }
     */
    public static int V4L2_SCENE_MODE_PARTY_INDOOR() {
        return V4L2_SCENE_MODE_PARTY_INDOOR;
    }
    private static final int V4L2_SCENE_MODE_PORTRAIT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_PORTRAIT = 10
     * }
     */
    public static int V4L2_SCENE_MODE_PORTRAIT() {
        return V4L2_SCENE_MODE_PORTRAIT;
    }
    private static final int V4L2_SCENE_MODE_SPORTS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_SPORTS = 11
     * }
     */
    public static int V4L2_SCENE_MODE_SPORTS() {
        return V4L2_SCENE_MODE_SPORTS;
    }
    private static final int V4L2_SCENE_MODE_SUNSET = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_SUNSET = 12
     * }
     */
    public static int V4L2_SCENE_MODE_SUNSET() {
        return V4L2_SCENE_MODE_SUNSET;
    }
    private static final int V4L2_SCENE_MODE_TEXT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_scene_mode.V4L2_SCENE_MODE_TEXT = 13
     * }
     */
    public static int V4L2_SCENE_MODE_TEXT() {
        return V4L2_SCENE_MODE_TEXT;
    }
    private static final int V4L2_AUTO_FOCUS_RANGE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_focus_range.V4L2_AUTO_FOCUS_RANGE_AUTO = 0
     * }
     */
    public static int V4L2_AUTO_FOCUS_RANGE_AUTO() {
        return V4L2_AUTO_FOCUS_RANGE_AUTO;
    }
    private static final int V4L2_AUTO_FOCUS_RANGE_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_focus_range.V4L2_AUTO_FOCUS_RANGE_NORMAL = 1
     * }
     */
    public static int V4L2_AUTO_FOCUS_RANGE_NORMAL() {
        return V4L2_AUTO_FOCUS_RANGE_NORMAL;
    }
    private static final int V4L2_AUTO_FOCUS_RANGE_MACRO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_focus_range.V4L2_AUTO_FOCUS_RANGE_MACRO = 2
     * }
     */
    public static int V4L2_AUTO_FOCUS_RANGE_MACRO() {
        return V4L2_AUTO_FOCUS_RANGE_MACRO;
    }
    private static final int V4L2_AUTO_FOCUS_RANGE_INFINITY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_auto_focus_range.V4L2_AUTO_FOCUS_RANGE_INFINITY = 3
     * }
     */
    public static int V4L2_AUTO_FOCUS_RANGE_INFINITY() {
        return V4L2_AUTO_FOCUS_RANGE_INFINITY;
    }
    private static final int V4L2_PREEMPHASIS_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_preemphasis.V4L2_PREEMPHASIS_DISABLED = 0
     * }
     */
    public static int V4L2_PREEMPHASIS_DISABLED() {
        return V4L2_PREEMPHASIS_DISABLED;
    }
    private static final int V4L2_PREEMPHASIS_50_uS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_preemphasis.V4L2_PREEMPHASIS_50_uS = 1
     * }
     */
    public static int V4L2_PREEMPHASIS_50_uS() {
        return V4L2_PREEMPHASIS_50_uS;
    }
    private static final int V4L2_PREEMPHASIS_75_uS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_preemphasis.V4L2_PREEMPHASIS_75_uS = 2
     * }
     */
    public static int V4L2_PREEMPHASIS_75_uS() {
        return V4L2_PREEMPHASIS_75_uS;
    }
    private static final int V4L2_FLASH_LED_MODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_flash_led_mode.V4L2_FLASH_LED_MODE_NONE = 0
     * }
     */
    public static int V4L2_FLASH_LED_MODE_NONE() {
        return V4L2_FLASH_LED_MODE_NONE;
    }
    private static final int V4L2_FLASH_LED_MODE_FLASH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_flash_led_mode.V4L2_FLASH_LED_MODE_FLASH = 1
     * }
     */
    public static int V4L2_FLASH_LED_MODE_FLASH() {
        return V4L2_FLASH_LED_MODE_FLASH;
    }
    private static final int V4L2_FLASH_LED_MODE_TORCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_flash_led_mode.V4L2_FLASH_LED_MODE_TORCH = 2
     * }
     */
    public static int V4L2_FLASH_LED_MODE_TORCH() {
        return V4L2_FLASH_LED_MODE_TORCH;
    }
    private static final int V4L2_FLASH_STROBE_SOURCE_SOFTWARE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_flash_strobe_source.V4L2_FLASH_STROBE_SOURCE_SOFTWARE = 0
     * }
     */
    public static int V4L2_FLASH_STROBE_SOURCE_SOFTWARE() {
        return V4L2_FLASH_STROBE_SOURCE_SOFTWARE;
    }
    private static final int V4L2_FLASH_STROBE_SOURCE_EXTERNAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_flash_strobe_source.V4L2_FLASH_STROBE_SOURCE_EXTERNAL = 1
     * }
     */
    public static int V4L2_FLASH_STROBE_SOURCE_EXTERNAL() {
        return V4L2_FLASH_STROBE_SOURCE_EXTERNAL;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_444 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_444 = 0
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_444() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_444;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_422 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_422 = 1
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_422() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_422;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_420 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_420 = 2
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_420() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_420;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_411 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_411 = 3
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_411() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_411;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_410 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_410 = 4
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_410() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_410;
    }
    private static final int V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_jpeg_chroma_subsampling.V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY = 5
     * }
     */
    public static int V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY() {
        return V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY;
    }
    private static final int V4L2_DV_TX_MODE_DVI_D = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_tx_mode.V4L2_DV_TX_MODE_DVI_D = 0
     * }
     */
    public static int V4L2_DV_TX_MODE_DVI_D() {
        return V4L2_DV_TX_MODE_DVI_D;
    }
    private static final int V4L2_DV_TX_MODE_HDMI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_tx_mode.V4L2_DV_TX_MODE_HDMI = 1
     * }
     */
    public static int V4L2_DV_TX_MODE_HDMI() {
        return V4L2_DV_TX_MODE_HDMI;
    }
    private static final int V4L2_DV_RGB_RANGE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_rgb_range.V4L2_DV_RGB_RANGE_AUTO = 0
     * }
     */
    public static int V4L2_DV_RGB_RANGE_AUTO() {
        return V4L2_DV_RGB_RANGE_AUTO;
    }
    private static final int V4L2_DV_RGB_RANGE_LIMITED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_rgb_range.V4L2_DV_RGB_RANGE_LIMITED = 1
     * }
     */
    public static int V4L2_DV_RGB_RANGE_LIMITED() {
        return V4L2_DV_RGB_RANGE_LIMITED;
    }
    private static final int V4L2_DV_RGB_RANGE_FULL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_rgb_range.V4L2_DV_RGB_RANGE_FULL = 2
     * }
     */
    public static int V4L2_DV_RGB_RANGE_FULL() {
        return V4L2_DV_RGB_RANGE_FULL;
    }
    private static final int V4L2_DV_IT_CONTENT_TYPE_GRAPHICS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_it_content_type.V4L2_DV_IT_CONTENT_TYPE_GRAPHICS = 0
     * }
     */
    public static int V4L2_DV_IT_CONTENT_TYPE_GRAPHICS() {
        return V4L2_DV_IT_CONTENT_TYPE_GRAPHICS;
    }
    private static final int V4L2_DV_IT_CONTENT_TYPE_PHOTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_it_content_type.V4L2_DV_IT_CONTENT_TYPE_PHOTO = 1
     * }
     */
    public static int V4L2_DV_IT_CONTENT_TYPE_PHOTO() {
        return V4L2_DV_IT_CONTENT_TYPE_PHOTO;
    }
    private static final int V4L2_DV_IT_CONTENT_TYPE_CINEMA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_it_content_type.V4L2_DV_IT_CONTENT_TYPE_CINEMA = 2
     * }
     */
    public static int V4L2_DV_IT_CONTENT_TYPE_CINEMA() {
        return V4L2_DV_IT_CONTENT_TYPE_CINEMA;
    }
    private static final int V4L2_DV_IT_CONTENT_TYPE_GAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_it_content_type.V4L2_DV_IT_CONTENT_TYPE_GAME = 3
     * }
     */
    public static int V4L2_DV_IT_CONTENT_TYPE_GAME() {
        return V4L2_DV_IT_CONTENT_TYPE_GAME;
    }
    private static final int V4L2_DV_IT_CONTENT_TYPE_NO_ITC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_dv_it_content_type.V4L2_DV_IT_CONTENT_TYPE_NO_ITC = 4
     * }
     */
    public static int V4L2_DV_IT_CONTENT_TYPE_NO_ITC() {
        return V4L2_DV_IT_CONTENT_TYPE_NO_ITC;
    }
    private static final int V4L2_DEEMPHASIS_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_deemphasis.V4L2_DEEMPHASIS_DISABLED = 0
     * }
     */
    public static int V4L2_DEEMPHASIS_DISABLED() {
        return V4L2_DEEMPHASIS_DISABLED;
    }
    private static final int V4L2_DEEMPHASIS_50_uS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_deemphasis.V4L2_DEEMPHASIS_50_uS = 1
     * }
     */
    public static int V4L2_DEEMPHASIS_50_uS() {
        return V4L2_DEEMPHASIS_50_uS;
    }
    private static final int V4L2_DEEMPHASIS_75_uS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_deemphasis.V4L2_DEEMPHASIS_75_uS = 2
     * }
     */
    public static int V4L2_DEEMPHASIS_75_uS() {
        return V4L2_DEEMPHASIS_75_uS;
    }
    private static final int V4L2_DETECT_MD_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_detect_md_mode.V4L2_DETECT_MD_MODE_DISABLED = 0
     * }
     */
    public static int V4L2_DETECT_MD_MODE_DISABLED() {
        return V4L2_DETECT_MD_MODE_DISABLED;
    }
    private static final int V4L2_DETECT_MD_MODE_GLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_detect_md_mode.V4L2_DETECT_MD_MODE_GLOBAL = 1
     * }
     */
    public static int V4L2_DETECT_MD_MODE_GLOBAL() {
        return V4L2_DETECT_MD_MODE_GLOBAL;
    }
    private static final int V4L2_DETECT_MD_MODE_THRESHOLD_GRID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_detect_md_mode.V4L2_DETECT_MD_MODE_THRESHOLD_GRID = 2
     * }
     */
    public static int V4L2_DETECT_MD_MODE_THRESHOLD_GRID() {
        return V4L2_DETECT_MD_MODE_THRESHOLD_GRID;
    }
    private static final int V4L2_DETECT_MD_MODE_REGION_GRID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_detect_md_mode.V4L2_DETECT_MD_MODE_REGION_GRID = 3
     * }
     */
    public static int V4L2_DETECT_MD_MODE_REGION_GRID() {
        return V4L2_DETECT_MD_MODE_REGION_GRID;
    }
    private static final int V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_h264_decode_mode.V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED = 0
     * }
     */
    public static int V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED() {
        return V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED;
    }
    private static final int V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_h264_decode_mode.V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED = 1
     * }
     */
    public static int V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED() {
        return V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED;
    }
    private static final int V4L2_STATELESS_H264_START_CODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_h264_start_code.V4L2_STATELESS_H264_START_CODE_NONE = 0
     * }
     */
    public static int V4L2_STATELESS_H264_START_CODE_NONE() {
        return V4L2_STATELESS_H264_START_CODE_NONE;
    }
    private static final int V4L2_STATELESS_H264_START_CODE_ANNEX_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_h264_start_code.V4L2_STATELESS_H264_START_CODE_ANNEX_B = 1
     * }
     */
    public static int V4L2_STATELESS_H264_START_CODE_ANNEX_B() {
        return V4L2_STATELESS_H264_START_CODE_ANNEX_B;
    }
    private static final int V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_hevc_decode_mode.V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED = 0
     * }
     */
    public static int V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED() {
        return V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED;
    }
    private static final int V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_hevc_decode_mode.V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED = 1
     * }
     */
    public static int V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED() {
        return V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED;
    }
    private static final int V4L2_STATELESS_HEVC_START_CODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_hevc_start_code.V4L2_STATELESS_HEVC_START_CODE_NONE = 0
     * }
     */
    public static int V4L2_STATELESS_HEVC_START_CODE_NONE() {
        return V4L2_STATELESS_HEVC_START_CODE_NONE;
    }
    private static final int V4L2_STATELESS_HEVC_START_CODE_ANNEX_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_stateless_hevc_start_code.V4L2_STATELESS_HEVC_START_CODE_ANNEX_B = 1
     * }
     */
    public static int V4L2_STATELESS_HEVC_START_CODE_ANNEX_B() {
        return V4L2_STATELESS_HEVC_START_CODE_ANNEX_B;
    }
    private static final int V4L2_AV1_WARP_MODEL_IDENTITY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_warp_model.V4L2_AV1_WARP_MODEL_IDENTITY = 0
     * }
     */
    public static int V4L2_AV1_WARP_MODEL_IDENTITY() {
        return V4L2_AV1_WARP_MODEL_IDENTITY;
    }
    private static final int V4L2_AV1_WARP_MODEL_TRANSLATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_warp_model.V4L2_AV1_WARP_MODEL_TRANSLATION = 1
     * }
     */
    public static int V4L2_AV1_WARP_MODEL_TRANSLATION() {
        return V4L2_AV1_WARP_MODEL_TRANSLATION;
    }
    private static final int V4L2_AV1_WARP_MODEL_ROTZOOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_warp_model.V4L2_AV1_WARP_MODEL_ROTZOOM = 2
     * }
     */
    public static int V4L2_AV1_WARP_MODEL_ROTZOOM() {
        return V4L2_AV1_WARP_MODEL_ROTZOOM;
    }
    private static final int V4L2_AV1_WARP_MODEL_AFFINE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_warp_model.V4L2_AV1_WARP_MODEL_AFFINE = 3
     * }
     */
    public static int V4L2_AV1_WARP_MODEL_AFFINE() {
        return V4L2_AV1_WARP_MODEL_AFFINE;
    }
    private static final int V4L2_AV1_REF_INTRA_FRAME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_INTRA_FRAME = 0
     * }
     */
    public static int V4L2_AV1_REF_INTRA_FRAME() {
        return V4L2_AV1_REF_INTRA_FRAME;
    }
    private static final int V4L2_AV1_REF_LAST_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_LAST_FRAME = 1
     * }
     */
    public static int V4L2_AV1_REF_LAST_FRAME() {
        return V4L2_AV1_REF_LAST_FRAME;
    }
    private static final int V4L2_AV1_REF_LAST2_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_LAST2_FRAME = 2
     * }
     */
    public static int V4L2_AV1_REF_LAST2_FRAME() {
        return V4L2_AV1_REF_LAST2_FRAME;
    }
    private static final int V4L2_AV1_REF_LAST3_FRAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_LAST3_FRAME = 3
     * }
     */
    public static int V4L2_AV1_REF_LAST3_FRAME() {
        return V4L2_AV1_REF_LAST3_FRAME;
    }
    private static final int V4L2_AV1_REF_GOLDEN_FRAME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_GOLDEN_FRAME = 4
     * }
     */
    public static int V4L2_AV1_REF_GOLDEN_FRAME() {
        return V4L2_AV1_REF_GOLDEN_FRAME;
    }
    private static final int V4L2_AV1_REF_BWDREF_FRAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_BWDREF_FRAME = 5
     * }
     */
    public static int V4L2_AV1_REF_BWDREF_FRAME() {
        return V4L2_AV1_REF_BWDREF_FRAME;
    }
    private static final int V4L2_AV1_REF_ALTREF2_FRAME = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_ALTREF2_FRAME = 6
     * }
     */
    public static int V4L2_AV1_REF_ALTREF2_FRAME() {
        return V4L2_AV1_REF_ALTREF2_FRAME;
    }
    private static final int V4L2_AV1_REF_ALTREF_FRAME = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_reference_frame.V4L2_AV1_REF_ALTREF_FRAME = 7
     * }
     */
    public static int V4L2_AV1_REF_ALTREF_FRAME() {
        return V4L2_AV1_REF_ALTREF_FRAME;
    }
    private static final int V4L2_AV1_FRAME_RESTORE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_restoration_type.V4L2_AV1_FRAME_RESTORE_NONE = 0
     * }
     */
    public static int V4L2_AV1_FRAME_RESTORE_NONE() {
        return V4L2_AV1_FRAME_RESTORE_NONE;
    }
    private static final int V4L2_AV1_FRAME_RESTORE_WIENER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_restoration_type.V4L2_AV1_FRAME_RESTORE_WIENER = 1
     * }
     */
    public static int V4L2_AV1_FRAME_RESTORE_WIENER() {
        return V4L2_AV1_FRAME_RESTORE_WIENER;
    }
    private static final int V4L2_AV1_FRAME_RESTORE_SGRPROJ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_restoration_type.V4L2_AV1_FRAME_RESTORE_SGRPROJ = 2
     * }
     */
    public static int V4L2_AV1_FRAME_RESTORE_SGRPROJ() {
        return V4L2_AV1_FRAME_RESTORE_SGRPROJ;
    }
    private static final int V4L2_AV1_FRAME_RESTORE_SWITCHABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_restoration_type.V4L2_AV1_FRAME_RESTORE_SWITCHABLE = 3
     * }
     */
    public static int V4L2_AV1_FRAME_RESTORE_SWITCHABLE() {
        return V4L2_AV1_FRAME_RESTORE_SWITCHABLE;
    }
    private static final int V4L2_AV1_SEG_LVL_ALT_Q = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_ALT_Q = 0
     * }
     */
    public static int V4L2_AV1_SEG_LVL_ALT_Q() {
        return V4L2_AV1_SEG_LVL_ALT_Q;
    }
    private static final int V4L2_AV1_SEG_LVL_ALT_LF_Y_V = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_ALT_LF_Y_V = 1
     * }
     */
    public static int V4L2_AV1_SEG_LVL_ALT_LF_Y_V() {
        return V4L2_AV1_SEG_LVL_ALT_LF_Y_V;
    }
    private static final int V4L2_AV1_SEG_LVL_REF_FRAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_REF_FRAME = 5
     * }
     */
    public static int V4L2_AV1_SEG_LVL_REF_FRAME() {
        return V4L2_AV1_SEG_LVL_REF_FRAME;
    }
    private static final int V4L2_AV1_SEG_LVL_REF_SKIP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_REF_SKIP = 6
     * }
     */
    public static int V4L2_AV1_SEG_LVL_REF_SKIP() {
        return V4L2_AV1_SEG_LVL_REF_SKIP;
    }
    private static final int V4L2_AV1_SEG_LVL_REF_GLOBALMV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_REF_GLOBALMV = 7
     * }
     */
    public static int V4L2_AV1_SEG_LVL_REF_GLOBALMV() {
        return V4L2_AV1_SEG_LVL_REF_GLOBALMV;
    }
    private static final int V4L2_AV1_SEG_LVL_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_segment_feature.V4L2_AV1_SEG_LVL_MAX = 8
     * }
     */
    public static int V4L2_AV1_SEG_LVL_MAX() {
        return V4L2_AV1_SEG_LVL_MAX;
    }
    private static final int V4L2_AV1_KEY_FRAME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_type.V4L2_AV1_KEY_FRAME = 0
     * }
     */
    public static int V4L2_AV1_KEY_FRAME() {
        return V4L2_AV1_KEY_FRAME;
    }
    private static final int V4L2_AV1_INTER_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_type.V4L2_AV1_INTER_FRAME = 1
     * }
     */
    public static int V4L2_AV1_INTER_FRAME() {
        return V4L2_AV1_INTER_FRAME;
    }
    private static final int V4L2_AV1_INTRA_ONLY_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_type.V4L2_AV1_INTRA_ONLY_FRAME = 2
     * }
     */
    public static int V4L2_AV1_INTRA_ONLY_FRAME() {
        return V4L2_AV1_INTRA_ONLY_FRAME;
    }
    private static final int V4L2_AV1_SWITCH_FRAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_frame_type.V4L2_AV1_SWITCH_FRAME = 3
     * }
     */
    public static int V4L2_AV1_SWITCH_FRAME() {
        return V4L2_AV1_SWITCH_FRAME;
    }
    private static final int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_interpolation_filter.V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP = 0
     * }
     */
    public static int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP() {
        return V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP;
    }
    private static final int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_interpolation_filter.V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH = 1
     * }
     */
    public static int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH() {
        return V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH;
    }
    private static final int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_interpolation_filter.V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP = 2
     * }
     */
    public static int V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP() {
        return V4L2_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP;
    }
    private static final int V4L2_AV1_INTERPOLATION_FILTER_BILINEAR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_interpolation_filter.V4L2_AV1_INTERPOLATION_FILTER_BILINEAR = 3
     * }
     */
    public static int V4L2_AV1_INTERPOLATION_FILTER_BILINEAR() {
        return V4L2_AV1_INTERPOLATION_FILTER_BILINEAR;
    }
    private static final int V4L2_AV1_INTERPOLATION_FILTER_SWITCHABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_interpolation_filter.V4L2_AV1_INTERPOLATION_FILTER_SWITCHABLE = 4
     * }
     */
    public static int V4L2_AV1_INTERPOLATION_FILTER_SWITCHABLE() {
        return V4L2_AV1_INTERPOLATION_FILTER_SWITCHABLE;
    }
    private static final int V4L2_AV1_TX_MODE_ONLY_4X4 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_tx_mode.V4L2_AV1_TX_MODE_ONLY_4X4 = 0
     * }
     */
    public static int V4L2_AV1_TX_MODE_ONLY_4X4() {
        return V4L2_AV1_TX_MODE_ONLY_4X4;
    }
    private static final int V4L2_AV1_TX_MODE_LARGEST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_tx_mode.V4L2_AV1_TX_MODE_LARGEST = 1
     * }
     */
    public static int V4L2_AV1_TX_MODE_LARGEST() {
        return V4L2_AV1_TX_MODE_LARGEST;
    }
    private static final int V4L2_AV1_TX_MODE_SELECT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_av1_tx_mode.V4L2_AV1_TX_MODE_SELECT = 2
     * }
     */
    public static int V4L2_AV1_TX_MODE_SELECT() {
        return V4L2_AV1_TX_MODE_SELECT;
    }
    private static final int V4L2_FIELD_ANY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_ANY = 0
     * }
     */
    public static int V4L2_FIELD_ANY() {
        return V4L2_FIELD_ANY;
    }
    private static final int V4L2_FIELD_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_NONE = 1
     * }
     */
    public static int V4L2_FIELD_NONE() {
        return V4L2_FIELD_NONE;
    }
    private static final int V4L2_FIELD_TOP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_TOP = 2
     * }
     */
    public static int V4L2_FIELD_TOP() {
        return V4L2_FIELD_TOP;
    }
    private static final int V4L2_FIELD_BOTTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_BOTTOM = 3
     * }
     */
    public static int V4L2_FIELD_BOTTOM() {
        return V4L2_FIELD_BOTTOM;
    }
    private static final int V4L2_FIELD_INTERLACED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_INTERLACED = 4
     * }
     */
    public static int V4L2_FIELD_INTERLACED() {
        return V4L2_FIELD_INTERLACED;
    }
    private static final int V4L2_FIELD_SEQ_TB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_SEQ_TB = 5
     * }
     */
    public static int V4L2_FIELD_SEQ_TB() {
        return V4L2_FIELD_SEQ_TB;
    }
    private static final int V4L2_FIELD_SEQ_BT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_SEQ_BT = 6
     * }
     */
    public static int V4L2_FIELD_SEQ_BT() {
        return V4L2_FIELD_SEQ_BT;
    }
    private static final int V4L2_FIELD_ALTERNATE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_ALTERNATE = 7
     * }
     */
    public static int V4L2_FIELD_ALTERNATE() {
        return V4L2_FIELD_ALTERNATE;
    }
    private static final int V4L2_FIELD_INTERLACED_TB = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_INTERLACED_TB = 8
     * }
     */
    public static int V4L2_FIELD_INTERLACED_TB() {
        return V4L2_FIELD_INTERLACED_TB;
    }
    private static final int V4L2_FIELD_INTERLACED_BT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_field.V4L2_FIELD_INTERLACED_BT = 9
     * }
     */
    public static int V4L2_FIELD_INTERLACED_BT() {
        return V4L2_FIELD_INTERLACED_BT;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_CAPTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_CAPTURE = 1
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_CAPTURE() {
        return V4L2_BUF_TYPE_VIDEO_CAPTURE;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_OUTPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_OUTPUT = 2
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_OUTPUT() {
        return V4L2_BUF_TYPE_VIDEO_OUTPUT;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_OVERLAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_OVERLAY = 3
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_OVERLAY() {
        return V4L2_BUF_TYPE_VIDEO_OVERLAY;
    }
    private static final int V4L2_BUF_TYPE_VBI_CAPTURE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VBI_CAPTURE = 4
     * }
     */
    public static int V4L2_BUF_TYPE_VBI_CAPTURE() {
        return V4L2_BUF_TYPE_VBI_CAPTURE;
    }
    private static final int V4L2_BUF_TYPE_VBI_OUTPUT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VBI_OUTPUT = 5
     * }
     */
    public static int V4L2_BUF_TYPE_VBI_OUTPUT() {
        return V4L2_BUF_TYPE_VBI_OUTPUT;
    }
    private static final int V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = 6
     * }
     */
    public static int V4L2_BUF_TYPE_SLICED_VBI_CAPTURE() {
        return V4L2_BUF_TYPE_SLICED_VBI_CAPTURE;
    }
    private static final int V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = 7
     * }
     */
    public static int V4L2_BUF_TYPE_SLICED_VBI_OUTPUT() {
        return V4L2_BUF_TYPE_SLICED_VBI_OUTPUT;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 8
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY() {
        return V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE = 9
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE() {
        return V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
    }
    private static final int V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE = 10
     * }
     */
    public static int V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE() {
        return V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;
    }
    private static final int V4L2_BUF_TYPE_SDR_CAPTURE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_SDR_CAPTURE = 11
     * }
     */
    public static int V4L2_BUF_TYPE_SDR_CAPTURE() {
        return V4L2_BUF_TYPE_SDR_CAPTURE;
    }
    private static final int V4L2_BUF_TYPE_SDR_OUTPUT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_SDR_OUTPUT = 12
     * }
     */
    public static int V4L2_BUF_TYPE_SDR_OUTPUT() {
        return V4L2_BUF_TYPE_SDR_OUTPUT;
    }
    private static final int V4L2_BUF_TYPE_META_CAPTURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_META_CAPTURE = 13
     * }
     */
    public static int V4L2_BUF_TYPE_META_CAPTURE() {
        return V4L2_BUF_TYPE_META_CAPTURE;
    }
    private static final int V4L2_BUF_TYPE_META_OUTPUT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_META_OUTPUT = 14
     * }
     */
    public static int V4L2_BUF_TYPE_META_OUTPUT() {
        return V4L2_BUF_TYPE_META_OUTPUT;
    }
    private static final int V4L2_BUF_TYPE_PRIVATE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum v4l2_buf_type.V4L2_BUF_TYPE_PRIVATE = 128
     * }
     */
    public static int V4L2_BUF_TYPE_PRIVATE() {
        return V4L2_BUF_TYPE_PRIVATE;
    }
    private static final int V4L2_TUNER_RADIO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_tuner_type.V4L2_TUNER_RADIO = 1
     * }
     */
    public static int V4L2_TUNER_RADIO() {
        return V4L2_TUNER_RADIO;
    }
    private static final int V4L2_TUNER_ANALOG_TV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_tuner_type.V4L2_TUNER_ANALOG_TV = 2
     * }
     */
    public static int V4L2_TUNER_ANALOG_TV() {
        return V4L2_TUNER_ANALOG_TV;
    }
    private static final int V4L2_TUNER_DIGITAL_TV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_tuner_type.V4L2_TUNER_DIGITAL_TV = 3
     * }
     */
    public static int V4L2_TUNER_DIGITAL_TV() {
        return V4L2_TUNER_DIGITAL_TV;
    }
    private static final int V4L2_TUNER_SDR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_tuner_type.V4L2_TUNER_SDR = 4
     * }
     */
    public static int V4L2_TUNER_SDR() {
        return V4L2_TUNER_SDR;
    }
    private static final int V4L2_TUNER_RF = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_tuner_type.V4L2_TUNER_RF = 5
     * }
     */
    public static int V4L2_TUNER_RF() {
        return V4L2_TUNER_RF;
    }
    private static final int V4L2_MEMORY_MMAP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_memory.V4L2_MEMORY_MMAP = 1
     * }
     */
    public static int V4L2_MEMORY_MMAP() {
        return V4L2_MEMORY_MMAP;
    }
    private static final int V4L2_MEMORY_USERPTR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_memory.V4L2_MEMORY_USERPTR = 2
     * }
     */
    public static int V4L2_MEMORY_USERPTR() {
        return V4L2_MEMORY_USERPTR;
    }
    private static final int V4L2_MEMORY_OVERLAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_memory.V4L2_MEMORY_OVERLAY = 3
     * }
     */
    public static int V4L2_MEMORY_OVERLAY() {
        return V4L2_MEMORY_OVERLAY;
    }
    private static final int V4L2_MEMORY_DMABUF = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_memory.V4L2_MEMORY_DMABUF = 4
     * }
     */
    public static int V4L2_MEMORY_DMABUF() {
        return V4L2_MEMORY_DMABUF;
    }
    private static final int V4L2_COLORSPACE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_DEFAULT = 0
     * }
     */
    public static int V4L2_COLORSPACE_DEFAULT() {
        return V4L2_COLORSPACE_DEFAULT;
    }
    private static final int V4L2_COLORSPACE_SMPTE170M = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_SMPTE170M = 1
     * }
     */
    public static int V4L2_COLORSPACE_SMPTE170M() {
        return V4L2_COLORSPACE_SMPTE170M;
    }
    private static final int V4L2_COLORSPACE_SMPTE240M = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_SMPTE240M = 2
     * }
     */
    public static int V4L2_COLORSPACE_SMPTE240M() {
        return V4L2_COLORSPACE_SMPTE240M;
    }
    private static final int V4L2_COLORSPACE_REC709 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_REC709 = 3
     * }
     */
    public static int V4L2_COLORSPACE_REC709() {
        return V4L2_COLORSPACE_REC709;
    }
    private static final int V4L2_COLORSPACE_BT878 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_BT878 = 4
     * }
     */
    public static int V4L2_COLORSPACE_BT878() {
        return V4L2_COLORSPACE_BT878;
    }
    private static final int V4L2_COLORSPACE_470_SYSTEM_M = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_470_SYSTEM_M = 5
     * }
     */
    public static int V4L2_COLORSPACE_470_SYSTEM_M() {
        return V4L2_COLORSPACE_470_SYSTEM_M;
    }
    private static final int V4L2_COLORSPACE_470_SYSTEM_BG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_470_SYSTEM_BG = 6
     * }
     */
    public static int V4L2_COLORSPACE_470_SYSTEM_BG() {
        return V4L2_COLORSPACE_470_SYSTEM_BG;
    }
    private static final int V4L2_COLORSPACE_JPEG = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_JPEG = 7
     * }
     */
    public static int V4L2_COLORSPACE_JPEG() {
        return V4L2_COLORSPACE_JPEG;
    }
    private static final int V4L2_COLORSPACE_SRGB = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_SRGB = 8
     * }
     */
    public static int V4L2_COLORSPACE_SRGB() {
        return V4L2_COLORSPACE_SRGB;
    }
    private static final int V4L2_COLORSPACE_OPRGB = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_OPRGB = 9
     * }
     */
    public static int V4L2_COLORSPACE_OPRGB() {
        return V4L2_COLORSPACE_OPRGB;
    }
    private static final int V4L2_COLORSPACE_BT2020 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_BT2020 = 10
     * }
     */
    public static int V4L2_COLORSPACE_BT2020() {
        return V4L2_COLORSPACE_BT2020;
    }
    private static final int V4L2_COLORSPACE_RAW = (int)11L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_RAW = 11
     * }
     */
    public static int V4L2_COLORSPACE_RAW() {
        return V4L2_COLORSPACE_RAW;
    }
    private static final int V4L2_COLORSPACE_DCI_P3 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum v4l2_colorspace.V4L2_COLORSPACE_DCI_P3 = 12
     * }
     */
    public static int V4L2_COLORSPACE_DCI_P3() {
        return V4L2_COLORSPACE_DCI_P3;
    }
    private static final int V4L2_XFER_FUNC_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_DEFAULT = 0
     * }
     */
    public static int V4L2_XFER_FUNC_DEFAULT() {
        return V4L2_XFER_FUNC_DEFAULT;
    }
    private static final int V4L2_XFER_FUNC_709 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_709 = 1
     * }
     */
    public static int V4L2_XFER_FUNC_709() {
        return V4L2_XFER_FUNC_709;
    }
    private static final int V4L2_XFER_FUNC_SRGB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_SRGB = 2
     * }
     */
    public static int V4L2_XFER_FUNC_SRGB() {
        return V4L2_XFER_FUNC_SRGB;
    }
    private static final int V4L2_XFER_FUNC_OPRGB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_OPRGB = 3
     * }
     */
    public static int V4L2_XFER_FUNC_OPRGB() {
        return V4L2_XFER_FUNC_OPRGB;
    }
    private static final int V4L2_XFER_FUNC_SMPTE240M = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_SMPTE240M = 4
     * }
     */
    public static int V4L2_XFER_FUNC_SMPTE240M() {
        return V4L2_XFER_FUNC_SMPTE240M;
    }
    private static final int V4L2_XFER_FUNC_NONE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_NONE = 5
     * }
     */
    public static int V4L2_XFER_FUNC_NONE() {
        return V4L2_XFER_FUNC_NONE;
    }
    private static final int V4L2_XFER_FUNC_DCI_P3 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_DCI_P3 = 6
     * }
     */
    public static int V4L2_XFER_FUNC_DCI_P3() {
        return V4L2_XFER_FUNC_DCI_P3;
    }
    private static final int V4L2_XFER_FUNC_SMPTE2084 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_xfer_func.V4L2_XFER_FUNC_SMPTE2084 = 7
     * }
     */
    public static int V4L2_XFER_FUNC_SMPTE2084() {
        return V4L2_XFER_FUNC_SMPTE2084;
    }
    private static final int V4L2_YCBCR_ENC_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_DEFAULT = 0
     * }
     */
    public static int V4L2_YCBCR_ENC_DEFAULT() {
        return V4L2_YCBCR_ENC_DEFAULT;
    }
    private static final int V4L2_YCBCR_ENC_601 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_601 = 1
     * }
     */
    public static int V4L2_YCBCR_ENC_601() {
        return V4L2_YCBCR_ENC_601;
    }
    private static final int V4L2_YCBCR_ENC_709 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_709 = 2
     * }
     */
    public static int V4L2_YCBCR_ENC_709() {
        return V4L2_YCBCR_ENC_709;
    }
    private static final int V4L2_YCBCR_ENC_XV601 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_XV601 = 3
     * }
     */
    public static int V4L2_YCBCR_ENC_XV601() {
        return V4L2_YCBCR_ENC_XV601;
    }
    private static final int V4L2_YCBCR_ENC_XV709 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_XV709 = 4
     * }
     */
    public static int V4L2_YCBCR_ENC_XV709() {
        return V4L2_YCBCR_ENC_XV709;
    }
    private static final int V4L2_YCBCR_ENC_SYCC = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_SYCC = 5
     * }
     */
    public static int V4L2_YCBCR_ENC_SYCC() {
        return V4L2_YCBCR_ENC_SYCC;
    }
    private static final int V4L2_YCBCR_ENC_BT2020 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_BT2020 = 6
     * }
     */
    public static int V4L2_YCBCR_ENC_BT2020() {
        return V4L2_YCBCR_ENC_BT2020;
    }
    private static final int V4L2_YCBCR_ENC_BT2020_CONST_LUM = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_BT2020_CONST_LUM = 7
     * }
     */
    public static int V4L2_YCBCR_ENC_BT2020_CONST_LUM() {
        return V4L2_YCBCR_ENC_BT2020_CONST_LUM;
    }
    private static final int V4L2_YCBCR_ENC_SMPTE240M = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ycbcr_encoding.V4L2_YCBCR_ENC_SMPTE240M = 8
     * }
     */
    public static int V4L2_YCBCR_ENC_SMPTE240M() {
        return V4L2_YCBCR_ENC_SMPTE240M;
    }
    private static final int V4L2_HSV_ENC_180 = (int)128L;
    /**
     * {@snippet lang=c :
     * enum v4l2_hsv_encoding.V4L2_HSV_ENC_180 = 128
     * }
     */
    public static int V4L2_HSV_ENC_180() {
        return V4L2_HSV_ENC_180;
    }
    private static final int V4L2_HSV_ENC_256 = (int)129L;
    /**
     * {@snippet lang=c :
     * enum v4l2_hsv_encoding.V4L2_HSV_ENC_256 = 129
     * }
     */
    public static int V4L2_HSV_ENC_256() {
        return V4L2_HSV_ENC_256;
    }
    private static final int V4L2_QUANTIZATION_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_quantization.V4L2_QUANTIZATION_DEFAULT = 0
     * }
     */
    public static int V4L2_QUANTIZATION_DEFAULT() {
        return V4L2_QUANTIZATION_DEFAULT;
    }
    private static final int V4L2_QUANTIZATION_FULL_RANGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_quantization.V4L2_QUANTIZATION_FULL_RANGE = 1
     * }
     */
    public static int V4L2_QUANTIZATION_FULL_RANGE() {
        return V4L2_QUANTIZATION_FULL_RANGE;
    }
    private static final int V4L2_QUANTIZATION_LIM_RANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_quantization.V4L2_QUANTIZATION_LIM_RANGE = 2
     * }
     */
    public static int V4L2_QUANTIZATION_LIM_RANGE() {
        return V4L2_QUANTIZATION_LIM_RANGE;
    }
    private static final int V4L2_PRIORITY_UNSET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_priority.V4L2_PRIORITY_UNSET = 0
     * }
     */
    public static int V4L2_PRIORITY_UNSET() {
        return V4L2_PRIORITY_UNSET;
    }
    private static final int V4L2_PRIORITY_BACKGROUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_priority.V4L2_PRIORITY_BACKGROUND = 1
     * }
     */
    public static int V4L2_PRIORITY_BACKGROUND() {
        return V4L2_PRIORITY_BACKGROUND;
    }
    private static final int V4L2_PRIORITY_INTERACTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_priority.V4L2_PRIORITY_INTERACTIVE = 2
     * }
     */
    public static int V4L2_PRIORITY_INTERACTIVE() {
        return V4L2_PRIORITY_INTERACTIVE;
    }
    private static final int V4L2_PRIORITY_RECORD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_priority.V4L2_PRIORITY_RECORD = 3
     * }
     */
    public static int V4L2_PRIORITY_RECORD() {
        return V4L2_PRIORITY_RECORD;
    }
    private static final int V4L2_PRIORITY_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_priority.V4L2_PRIORITY_DEFAULT = 2
     * }
     */
    public static int V4L2_PRIORITY_DEFAULT() {
        return V4L2_PRIORITY_DEFAULT;
    }
    private static final int V4L2_FRMSIZE_TYPE_DISCRETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmsizetypes.V4L2_FRMSIZE_TYPE_DISCRETE = 1
     * }
     */
    public static int V4L2_FRMSIZE_TYPE_DISCRETE() {
        return V4L2_FRMSIZE_TYPE_DISCRETE;
    }
    private static final int V4L2_FRMSIZE_TYPE_CONTINUOUS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmsizetypes.V4L2_FRMSIZE_TYPE_CONTINUOUS = 2
     * }
     */
    public static int V4L2_FRMSIZE_TYPE_CONTINUOUS() {
        return V4L2_FRMSIZE_TYPE_CONTINUOUS;
    }
    private static final int V4L2_FRMSIZE_TYPE_STEPWISE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmsizetypes.V4L2_FRMSIZE_TYPE_STEPWISE = 3
     * }
     */
    public static int V4L2_FRMSIZE_TYPE_STEPWISE() {
        return V4L2_FRMSIZE_TYPE_STEPWISE;
    }
    private static final int V4L2_FRMIVAL_TYPE_DISCRETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmivaltypes.V4L2_FRMIVAL_TYPE_DISCRETE = 1
     * }
     */
    public static int V4L2_FRMIVAL_TYPE_DISCRETE() {
        return V4L2_FRMIVAL_TYPE_DISCRETE;
    }
    private static final int V4L2_FRMIVAL_TYPE_CONTINUOUS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmivaltypes.V4L2_FRMIVAL_TYPE_CONTINUOUS = 2
     * }
     */
    public static int V4L2_FRMIVAL_TYPE_CONTINUOUS() {
        return V4L2_FRMIVAL_TYPE_CONTINUOUS;
    }
    private static final int V4L2_FRMIVAL_TYPE_STEPWISE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_frmivaltypes.V4L2_FRMIVAL_TYPE_STEPWISE = 3
     * }
     */
    public static int V4L2_FRMIVAL_TYPE_STEPWISE() {
        return V4L2_FRMIVAL_TYPE_STEPWISE;
    }
    /**
     * {@snippet lang=c :
     * typedef __u64 v4l2_std_id
     * }
     */
    public static final OfLong v4l2_std_id = mediaAPI.C_LONG_LONG;
    private static final int V4L2_CTRL_TYPE_INTEGER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_INTEGER = 1
     * }
     */
    public static int V4L2_CTRL_TYPE_INTEGER() {
        return V4L2_CTRL_TYPE_INTEGER;
    }
    private static final int V4L2_CTRL_TYPE_BOOLEAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_BOOLEAN = 2
     * }
     */
    public static int V4L2_CTRL_TYPE_BOOLEAN() {
        return V4L2_CTRL_TYPE_BOOLEAN;
    }
    private static final int V4L2_CTRL_TYPE_MENU = (int)3L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_MENU = 3
     * }
     */
    public static int V4L2_CTRL_TYPE_MENU() {
        return V4L2_CTRL_TYPE_MENU;
    }
    private static final int V4L2_CTRL_TYPE_BUTTON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_BUTTON = 4
     * }
     */
    public static int V4L2_CTRL_TYPE_BUTTON() {
        return V4L2_CTRL_TYPE_BUTTON;
    }
    private static final int V4L2_CTRL_TYPE_INTEGER64 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_INTEGER64 = 5
     * }
     */
    public static int V4L2_CTRL_TYPE_INTEGER64() {
        return V4L2_CTRL_TYPE_INTEGER64;
    }
    private static final int V4L2_CTRL_TYPE_CTRL_CLASS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_CTRL_CLASS = 6
     * }
     */
    public static int V4L2_CTRL_TYPE_CTRL_CLASS() {
        return V4L2_CTRL_TYPE_CTRL_CLASS;
    }
    private static final int V4L2_CTRL_TYPE_STRING = (int)7L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_STRING = 7
     * }
     */
    public static int V4L2_CTRL_TYPE_STRING() {
        return V4L2_CTRL_TYPE_STRING;
    }
    private static final int V4L2_CTRL_TYPE_BITMASK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_BITMASK = 8
     * }
     */
    public static int V4L2_CTRL_TYPE_BITMASK() {
        return V4L2_CTRL_TYPE_BITMASK;
    }
    private static final int V4L2_CTRL_TYPE_INTEGER_MENU = (int)9L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_INTEGER_MENU = 9
     * }
     */
    public static int V4L2_CTRL_TYPE_INTEGER_MENU() {
        return V4L2_CTRL_TYPE_INTEGER_MENU;
    }
    private static final int V4L2_CTRL_COMPOUND_TYPES = (int)256L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_COMPOUND_TYPES = 256
     * }
     */
    public static int V4L2_CTRL_COMPOUND_TYPES() {
        return V4L2_CTRL_COMPOUND_TYPES;
    }
    private static final int V4L2_CTRL_TYPE_U8 = (int)256L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_U8 = 256
     * }
     */
    public static int V4L2_CTRL_TYPE_U8() {
        return V4L2_CTRL_TYPE_U8;
    }
    private static final int V4L2_CTRL_TYPE_U16 = (int)257L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_U16 = 257
     * }
     */
    public static int V4L2_CTRL_TYPE_U16() {
        return V4L2_CTRL_TYPE_U16;
    }
    private static final int V4L2_CTRL_TYPE_U32 = (int)258L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_U32 = 258
     * }
     */
    public static int V4L2_CTRL_TYPE_U32() {
        return V4L2_CTRL_TYPE_U32;
    }
    private static final int V4L2_CTRL_TYPE_AREA = (int)262L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_AREA = 262
     * }
     */
    public static int V4L2_CTRL_TYPE_AREA() {
        return V4L2_CTRL_TYPE_AREA;
    }
    private static final int V4L2_CTRL_TYPE_HDR10_CLL_INFO = (int)272L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HDR10_CLL_INFO = 272
     * }
     */
    public static int V4L2_CTRL_TYPE_HDR10_CLL_INFO() {
        return V4L2_CTRL_TYPE_HDR10_CLL_INFO;
    }
    private static final int V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY = (int)273L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY = 273
     * }
     */
    public static int V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY() {
        return V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY;
    }
    private static final int V4L2_CTRL_TYPE_H264_SPS = (int)512L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_SPS = 512
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_SPS() {
        return V4L2_CTRL_TYPE_H264_SPS;
    }
    private static final int V4L2_CTRL_TYPE_H264_PPS = (int)513L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_PPS = 513
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_PPS() {
        return V4L2_CTRL_TYPE_H264_PPS;
    }
    private static final int V4L2_CTRL_TYPE_H264_SCALING_MATRIX = (int)514L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_SCALING_MATRIX = 514
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_SCALING_MATRIX() {
        return V4L2_CTRL_TYPE_H264_SCALING_MATRIX;
    }
    private static final int V4L2_CTRL_TYPE_H264_SLICE_PARAMS = (int)515L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_SLICE_PARAMS = 515
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_SLICE_PARAMS() {
        return V4L2_CTRL_TYPE_H264_SLICE_PARAMS;
    }
    private static final int V4L2_CTRL_TYPE_H264_DECODE_PARAMS = (int)516L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_DECODE_PARAMS = 516
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_DECODE_PARAMS() {
        return V4L2_CTRL_TYPE_H264_DECODE_PARAMS;
    }
    private static final int V4L2_CTRL_TYPE_H264_PRED_WEIGHTS = (int)517L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_H264_PRED_WEIGHTS = 517
     * }
     */
    public static int V4L2_CTRL_TYPE_H264_PRED_WEIGHTS() {
        return V4L2_CTRL_TYPE_H264_PRED_WEIGHTS;
    }
    private static final int V4L2_CTRL_TYPE_FWHT_PARAMS = (int)544L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_FWHT_PARAMS = 544
     * }
     */
    public static int V4L2_CTRL_TYPE_FWHT_PARAMS() {
        return V4L2_CTRL_TYPE_FWHT_PARAMS;
    }
    private static final int V4L2_CTRL_TYPE_VP8_FRAME = (int)576L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_VP8_FRAME = 576
     * }
     */
    public static int V4L2_CTRL_TYPE_VP8_FRAME() {
        return V4L2_CTRL_TYPE_VP8_FRAME;
    }
    private static final int V4L2_CTRL_TYPE_MPEG2_QUANTISATION = (int)592L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_MPEG2_QUANTISATION = 592
     * }
     */
    public static int V4L2_CTRL_TYPE_MPEG2_QUANTISATION() {
        return V4L2_CTRL_TYPE_MPEG2_QUANTISATION;
    }
    private static final int V4L2_CTRL_TYPE_MPEG2_SEQUENCE = (int)593L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_MPEG2_SEQUENCE = 593
     * }
     */
    public static int V4L2_CTRL_TYPE_MPEG2_SEQUENCE() {
        return V4L2_CTRL_TYPE_MPEG2_SEQUENCE;
    }
    private static final int V4L2_CTRL_TYPE_MPEG2_PICTURE = (int)594L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_MPEG2_PICTURE = 594
     * }
     */
    public static int V4L2_CTRL_TYPE_MPEG2_PICTURE() {
        return V4L2_CTRL_TYPE_MPEG2_PICTURE;
    }
    private static final int V4L2_CTRL_TYPE_VP9_COMPRESSED_HDR = (int)608L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_VP9_COMPRESSED_HDR = 608
     * }
     */
    public static int V4L2_CTRL_TYPE_VP9_COMPRESSED_HDR() {
        return V4L2_CTRL_TYPE_VP9_COMPRESSED_HDR;
    }
    private static final int V4L2_CTRL_TYPE_VP9_FRAME = (int)609L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_VP9_FRAME = 609
     * }
     */
    public static int V4L2_CTRL_TYPE_VP9_FRAME() {
        return V4L2_CTRL_TYPE_VP9_FRAME;
    }
    private static final int V4L2_CTRL_TYPE_HEVC_SPS = (int)624L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HEVC_SPS = 624
     * }
     */
    public static int V4L2_CTRL_TYPE_HEVC_SPS() {
        return V4L2_CTRL_TYPE_HEVC_SPS;
    }
    private static final int V4L2_CTRL_TYPE_HEVC_PPS = (int)625L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HEVC_PPS = 625
     * }
     */
    public static int V4L2_CTRL_TYPE_HEVC_PPS() {
        return V4L2_CTRL_TYPE_HEVC_PPS;
    }
    private static final int V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS = (int)626L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS = 626
     * }
     */
    public static int V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS() {
        return V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS;
    }
    private static final int V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX = (int)627L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX = 627
     * }
     */
    public static int V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX() {
        return V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX;
    }
    private static final int V4L2_CTRL_TYPE_HEVC_DECODE_PARAMS = (int)628L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_HEVC_DECODE_PARAMS = 628
     * }
     */
    public static int V4L2_CTRL_TYPE_HEVC_DECODE_PARAMS() {
        return V4L2_CTRL_TYPE_HEVC_DECODE_PARAMS;
    }
    private static final int V4L2_CTRL_TYPE_AV1_SEQUENCE = (int)640L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_AV1_SEQUENCE = 640
     * }
     */
    public static int V4L2_CTRL_TYPE_AV1_SEQUENCE() {
        return V4L2_CTRL_TYPE_AV1_SEQUENCE;
    }
    private static final int V4L2_CTRL_TYPE_AV1_TILE_GROUP_ENTRY = (int)641L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_AV1_TILE_GROUP_ENTRY = 641
     * }
     */
    public static int V4L2_CTRL_TYPE_AV1_TILE_GROUP_ENTRY() {
        return V4L2_CTRL_TYPE_AV1_TILE_GROUP_ENTRY;
    }
    private static final int V4L2_CTRL_TYPE_AV1_FRAME = (int)642L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_AV1_FRAME = 642
     * }
     */
    public static int V4L2_CTRL_TYPE_AV1_FRAME() {
        return V4L2_CTRL_TYPE_AV1_FRAME;
    }
    private static final int V4L2_CTRL_TYPE_AV1_FILM_GRAIN = (int)643L;
    /**
     * {@snippet lang=c :
     * enum v4l2_ctrl_type.V4L2_CTRL_TYPE_AV1_FILM_GRAIN = 643
     * }
     */
    public static int V4L2_CTRL_TYPE_AV1_FILM_GRAIN() {
        return V4L2_CTRL_TYPE_AV1_FILM_GRAIN;
    }
    private static final int V4L2_MBUS_FMT_FIXED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_FIXED = 1
     * }
     */
    public static int V4L2_MBUS_FMT_FIXED() {
        return V4L2_MBUS_FMT_FIXED;
    }
    private static final int V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE = (int)4097L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE = 4097
     * }
     */
    public static int V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE() {
        return V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE;
    }
    private static final int V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE = (int)4098L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE = 4098
     * }
     */
    public static int V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE() {
        return V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE;
    }
    private static final int V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE = (int)4099L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE = 4099
     * }
     */
    public static int V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE() {
        return V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE;
    }
    private static final int V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE = (int)4100L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE = 4100
     * }
     */
    public static int V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE() {
        return V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE;
    }
    private static final int V4L2_MBUS_FMT_BGR565_2X8_BE = (int)4101L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_BGR565_2X8_BE = 4101
     * }
     */
    public static int V4L2_MBUS_FMT_BGR565_2X8_BE() {
        return V4L2_MBUS_FMT_BGR565_2X8_BE;
    }
    private static final int V4L2_MBUS_FMT_BGR565_2X8_LE = (int)4102L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_BGR565_2X8_LE = 4102
     * }
     */
    public static int V4L2_MBUS_FMT_BGR565_2X8_LE() {
        return V4L2_MBUS_FMT_BGR565_2X8_LE;
    }
    private static final int V4L2_MBUS_FMT_RGB565_2X8_BE = (int)4103L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB565_2X8_BE = 4103
     * }
     */
    public static int V4L2_MBUS_FMT_RGB565_2X8_BE() {
        return V4L2_MBUS_FMT_RGB565_2X8_BE;
    }
    private static final int V4L2_MBUS_FMT_RGB565_2X8_LE = (int)4104L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB565_2X8_LE = 4104
     * }
     */
    public static int V4L2_MBUS_FMT_RGB565_2X8_LE() {
        return V4L2_MBUS_FMT_RGB565_2X8_LE;
    }
    private static final int V4L2_MBUS_FMT_RGB666_1X18 = (int)4105L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB666_1X18 = 4105
     * }
     */
    public static int V4L2_MBUS_FMT_RGB666_1X18() {
        return V4L2_MBUS_FMT_RGB666_1X18;
    }
    private static final int V4L2_MBUS_FMT_RGB888_1X24 = (int)4106L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB888_1X24 = 4106
     * }
     */
    public static int V4L2_MBUS_FMT_RGB888_1X24() {
        return V4L2_MBUS_FMT_RGB888_1X24;
    }
    private static final int V4L2_MBUS_FMT_RGB888_2X12_BE = (int)4107L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB888_2X12_BE = 4107
     * }
     */
    public static int V4L2_MBUS_FMT_RGB888_2X12_BE() {
        return V4L2_MBUS_FMT_RGB888_2X12_BE;
    }
    private static final int V4L2_MBUS_FMT_RGB888_2X12_LE = (int)4108L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_RGB888_2X12_LE = 4108
     * }
     */
    public static int V4L2_MBUS_FMT_RGB888_2X12_LE() {
        return V4L2_MBUS_FMT_RGB888_2X12_LE;
    }
    private static final int V4L2_MBUS_FMT_ARGB8888_1X32 = (int)4109L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_ARGB8888_1X32 = 4109
     * }
     */
    public static int V4L2_MBUS_FMT_ARGB8888_1X32() {
        return V4L2_MBUS_FMT_ARGB8888_1X32;
    }
    private static final int V4L2_MBUS_FMT_Y8_1X8 = (int)8193L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_Y8_1X8 = 8193
     * }
     */
    public static int V4L2_MBUS_FMT_Y8_1X8() {
        return V4L2_MBUS_FMT_Y8_1X8;
    }
    private static final int V4L2_MBUS_FMT_UV8_1X8 = (int)8213L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UV8_1X8 = 8213
     * }
     */
    public static int V4L2_MBUS_FMT_UV8_1X8() {
        return V4L2_MBUS_FMT_UV8_1X8;
    }
    private static final int V4L2_MBUS_FMT_UYVY8_1_5X8 = (int)8194L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY8_1_5X8 = 8194
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY8_1_5X8() {
        return V4L2_MBUS_FMT_UYVY8_1_5X8;
    }
    private static final int V4L2_MBUS_FMT_VYUY8_1_5X8 = (int)8195L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY8_1_5X8 = 8195
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY8_1_5X8() {
        return V4L2_MBUS_FMT_VYUY8_1_5X8;
    }
    private static final int V4L2_MBUS_FMT_YUYV8_1_5X8 = (int)8196L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV8_1_5X8 = 8196
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV8_1_5X8() {
        return V4L2_MBUS_FMT_YUYV8_1_5X8;
    }
    private static final int V4L2_MBUS_FMT_YVYU8_1_5X8 = (int)8197L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU8_1_5X8 = 8197
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU8_1_5X8() {
        return V4L2_MBUS_FMT_YVYU8_1_5X8;
    }
    private static final int V4L2_MBUS_FMT_UYVY8_2X8 = (int)8198L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY8_2X8 = 8198
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY8_2X8() {
        return V4L2_MBUS_FMT_UYVY8_2X8;
    }
    private static final int V4L2_MBUS_FMT_VYUY8_2X8 = (int)8199L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY8_2X8 = 8199
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY8_2X8() {
        return V4L2_MBUS_FMT_VYUY8_2X8;
    }
    private static final int V4L2_MBUS_FMT_YUYV8_2X8 = (int)8200L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV8_2X8 = 8200
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV8_2X8() {
        return V4L2_MBUS_FMT_YUYV8_2X8;
    }
    private static final int V4L2_MBUS_FMT_YVYU8_2X8 = (int)8201L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU8_2X8 = 8201
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU8_2X8() {
        return V4L2_MBUS_FMT_YVYU8_2X8;
    }
    private static final int V4L2_MBUS_FMT_Y10_1X10 = (int)8202L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_Y10_1X10 = 8202
     * }
     */
    public static int V4L2_MBUS_FMT_Y10_1X10() {
        return V4L2_MBUS_FMT_Y10_1X10;
    }
    private static final int V4L2_MBUS_FMT_UYVY10_2X10 = (int)8216L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY10_2X10 = 8216
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY10_2X10() {
        return V4L2_MBUS_FMT_UYVY10_2X10;
    }
    private static final int V4L2_MBUS_FMT_VYUY10_2X10 = (int)8217L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY10_2X10 = 8217
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY10_2X10() {
        return V4L2_MBUS_FMT_VYUY10_2X10;
    }
    private static final int V4L2_MBUS_FMT_YUYV10_2X10 = (int)8203L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV10_2X10 = 8203
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV10_2X10() {
        return V4L2_MBUS_FMT_YUYV10_2X10;
    }
    private static final int V4L2_MBUS_FMT_YVYU10_2X10 = (int)8204L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU10_2X10 = 8204
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU10_2X10() {
        return V4L2_MBUS_FMT_YVYU10_2X10;
    }
    private static final int V4L2_MBUS_FMT_Y12_1X12 = (int)8211L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_Y12_1X12 = 8211
     * }
     */
    public static int V4L2_MBUS_FMT_Y12_1X12() {
        return V4L2_MBUS_FMT_Y12_1X12;
    }
    private static final int V4L2_MBUS_FMT_UYVY8_1X16 = (int)8207L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY8_1X16 = 8207
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY8_1X16() {
        return V4L2_MBUS_FMT_UYVY8_1X16;
    }
    private static final int V4L2_MBUS_FMT_VYUY8_1X16 = (int)8208L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY8_1X16 = 8208
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY8_1X16() {
        return V4L2_MBUS_FMT_VYUY8_1X16;
    }
    private static final int V4L2_MBUS_FMT_YUYV8_1X16 = (int)8209L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV8_1X16 = 8209
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV8_1X16() {
        return V4L2_MBUS_FMT_YUYV8_1X16;
    }
    private static final int V4L2_MBUS_FMT_YVYU8_1X16 = (int)8210L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU8_1X16 = 8210
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU8_1X16() {
        return V4L2_MBUS_FMT_YVYU8_1X16;
    }
    private static final int V4L2_MBUS_FMT_YDYUYDYV8_1X16 = (int)8212L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YDYUYDYV8_1X16 = 8212
     * }
     */
    public static int V4L2_MBUS_FMT_YDYUYDYV8_1X16() {
        return V4L2_MBUS_FMT_YDYUYDYV8_1X16;
    }
    private static final int V4L2_MBUS_FMT_UYVY10_1X20 = (int)8218L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY10_1X20 = 8218
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY10_1X20() {
        return V4L2_MBUS_FMT_UYVY10_1X20;
    }
    private static final int V4L2_MBUS_FMT_VYUY10_1X20 = (int)8219L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY10_1X20 = 8219
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY10_1X20() {
        return V4L2_MBUS_FMT_VYUY10_1X20;
    }
    private static final int V4L2_MBUS_FMT_YUYV10_1X20 = (int)8205L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV10_1X20 = 8205
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV10_1X20() {
        return V4L2_MBUS_FMT_YUYV10_1X20;
    }
    private static final int V4L2_MBUS_FMT_YVYU10_1X20 = (int)8206L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU10_1X20 = 8206
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU10_1X20() {
        return V4L2_MBUS_FMT_YVYU10_1X20;
    }
    private static final int V4L2_MBUS_FMT_YUV10_1X30 = (int)8214L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUV10_1X30 = 8214
     * }
     */
    public static int V4L2_MBUS_FMT_YUV10_1X30() {
        return V4L2_MBUS_FMT_YUV10_1X30;
    }
    private static final int V4L2_MBUS_FMT_AYUV8_1X32 = (int)8215L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_AYUV8_1X32 = 8215
     * }
     */
    public static int V4L2_MBUS_FMT_AYUV8_1X32() {
        return V4L2_MBUS_FMT_AYUV8_1X32;
    }
    private static final int V4L2_MBUS_FMT_UYVY12_2X12 = (int)8220L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY12_2X12 = 8220
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY12_2X12() {
        return V4L2_MBUS_FMT_UYVY12_2X12;
    }
    private static final int V4L2_MBUS_FMT_VYUY12_2X12 = (int)8221L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY12_2X12 = 8221
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY12_2X12() {
        return V4L2_MBUS_FMT_VYUY12_2X12;
    }
    private static final int V4L2_MBUS_FMT_YUYV12_2X12 = (int)8222L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV12_2X12 = 8222
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV12_2X12() {
        return V4L2_MBUS_FMT_YUYV12_2X12;
    }
    private static final int V4L2_MBUS_FMT_YVYU12_2X12 = (int)8223L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU12_2X12 = 8223
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU12_2X12() {
        return V4L2_MBUS_FMT_YVYU12_2X12;
    }
    private static final int V4L2_MBUS_FMT_UYVY12_1X24 = (int)8224L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_UYVY12_1X24 = 8224
     * }
     */
    public static int V4L2_MBUS_FMT_UYVY12_1X24() {
        return V4L2_MBUS_FMT_UYVY12_1X24;
    }
    private static final int V4L2_MBUS_FMT_VYUY12_1X24 = (int)8225L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_VYUY12_1X24 = 8225
     * }
     */
    public static int V4L2_MBUS_FMT_VYUY12_1X24() {
        return V4L2_MBUS_FMT_VYUY12_1X24;
    }
    private static final int V4L2_MBUS_FMT_YUYV12_1X24 = (int)8226L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YUYV12_1X24 = 8226
     * }
     */
    public static int V4L2_MBUS_FMT_YUYV12_1X24() {
        return V4L2_MBUS_FMT_YUYV12_1X24;
    }
    private static final int V4L2_MBUS_FMT_YVYU12_1X24 = (int)8227L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_YVYU12_1X24 = 8227
     * }
     */
    public static int V4L2_MBUS_FMT_YVYU12_1X24() {
        return V4L2_MBUS_FMT_YVYU12_1X24;
    }
    private static final int V4L2_MBUS_FMT_SBGGR8_1X8 = (int)12289L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR8_1X8 = 12289
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR8_1X8() {
        return V4L2_MBUS_FMT_SBGGR8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGBRG8_1X8 = (int)12307L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGBRG8_1X8 = 12307
     * }
     */
    public static int V4L2_MBUS_FMT_SGBRG8_1X8() {
        return V4L2_MBUS_FMT_SGBRG8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGRBG8_1X8 = (int)12290L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGRBG8_1X8 = 12290
     * }
     */
    public static int V4L2_MBUS_FMT_SGRBG8_1X8() {
        return V4L2_MBUS_FMT_SGRBG8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SRGGB8_1X8 = (int)12308L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SRGGB8_1X8 = 12308
     * }
     */
    public static int V4L2_MBUS_FMT_SRGGB8_1X8() {
        return V4L2_MBUS_FMT_SRGGB8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8 = (int)12309L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8 = 12309
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8() {
        return V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8 = (int)12310L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8 = 12310
     * }
     */
    public static int V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8() {
        return V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8 = (int)12311L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8 = 12311
     * }
     */
    public static int V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8() {
        return V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8 = (int)12312L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8 = 12312
     * }
     */
    public static int V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8() {
        return V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 = (int)12299L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 = 12299
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8() {
        return V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 = (int)12300L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 = 12300
     * }
     */
    public static int V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8() {
        return V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 = (int)12297L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 = 12297
     * }
     */
    public static int V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8() {
        return V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 = (int)12301L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 = 12301
     * }
     */
    public static int V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8() {
        return V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE = (int)12291L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE = 12291
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE() {
        return V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE = (int)12292L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE = 12292
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE() {
        return V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE = (int)12293L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE = 12293
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE() {
        return V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE = (int)12294L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE = 12294
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE() {
        return V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE;
    }
    private static final int V4L2_MBUS_FMT_SBGGR10_1X10 = (int)12295L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR10_1X10 = 12295
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR10_1X10() {
        return V4L2_MBUS_FMT_SBGGR10_1X10;
    }
    private static final int V4L2_MBUS_FMT_SGBRG10_1X10 = (int)12302L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGBRG10_1X10 = 12302
     * }
     */
    public static int V4L2_MBUS_FMT_SGBRG10_1X10() {
        return V4L2_MBUS_FMT_SGBRG10_1X10;
    }
    private static final int V4L2_MBUS_FMT_SGRBG10_1X10 = (int)12298L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGRBG10_1X10 = 12298
     * }
     */
    public static int V4L2_MBUS_FMT_SGRBG10_1X10() {
        return V4L2_MBUS_FMT_SGRBG10_1X10;
    }
    private static final int V4L2_MBUS_FMT_SRGGB10_1X10 = (int)12303L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SRGGB10_1X10 = 12303
     * }
     */
    public static int V4L2_MBUS_FMT_SRGGB10_1X10() {
        return V4L2_MBUS_FMT_SRGGB10_1X10;
    }
    private static final int V4L2_MBUS_FMT_SBGGR12_1X12 = (int)12296L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SBGGR12_1X12 = 12296
     * }
     */
    public static int V4L2_MBUS_FMT_SBGGR12_1X12() {
        return V4L2_MBUS_FMT_SBGGR12_1X12;
    }
    private static final int V4L2_MBUS_FMT_SGBRG12_1X12 = (int)12304L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGBRG12_1X12 = 12304
     * }
     */
    public static int V4L2_MBUS_FMT_SGBRG12_1X12() {
        return V4L2_MBUS_FMT_SGBRG12_1X12;
    }
    private static final int V4L2_MBUS_FMT_SGRBG12_1X12 = (int)12305L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SGRBG12_1X12 = 12305
     * }
     */
    public static int V4L2_MBUS_FMT_SGRBG12_1X12() {
        return V4L2_MBUS_FMT_SGRBG12_1X12;
    }
    private static final int V4L2_MBUS_FMT_SRGGB12_1X12 = (int)12306L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_SRGGB12_1X12 = 12306
     * }
     */
    public static int V4L2_MBUS_FMT_SRGGB12_1X12() {
        return V4L2_MBUS_FMT_SRGGB12_1X12;
    }
    private static final int V4L2_MBUS_FMT_JPEG_1X8 = (int)16385L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_JPEG_1X8 = 16385
     * }
     */
    public static int V4L2_MBUS_FMT_JPEG_1X8() {
        return V4L2_MBUS_FMT_JPEG_1X8;
    }
    private static final int V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8 = (int)20481L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8 = 20481
     * }
     */
    public static int V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8() {
        return V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8;
    }
    private static final int V4L2_MBUS_FMT_AHSV8888_1X32 = (int)24577L;
    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode.V4L2_MBUS_FMT_AHSV8888_1X32 = 24577
     * }
     */
    public static int V4L2_MBUS_FMT_AHSV8888_1X32() {
        return V4L2_MBUS_FMT_AHSV8888_1X32;
    }
    private static final int V4L2_SUBDEV_FORMAT_TRY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum v4l2_subdev_format_whence.V4L2_SUBDEV_FORMAT_TRY = 0
     * }
     */
    public static int V4L2_SUBDEV_FORMAT_TRY() {
        return V4L2_SUBDEV_FORMAT_TRY;
    }
    private static final int V4L2_SUBDEV_FORMAT_ACTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum v4l2_subdev_format_whence.V4L2_SUBDEV_FORMAT_ACTIVE = 1
     * }
     */
    public static int V4L2_SUBDEV_FORMAT_ACTIVE() {
        return V4L2_SUBDEV_FORMAT_ACTIVE;
    }
    private static final int WDR_MODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.WDR_MODE_NONE = 0
     * }
     */
    public static int WDR_MODE_NONE() {
        return WDR_MODE_NONE;
    }
    private static final int WDR_MODE_2To1_LINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.WDR_MODE_2To1_LINE = 1
     * }
     */
    public static int WDR_MODE_2To1_LINE() {
        return WDR_MODE_2To1_LINE;
    }
    private static final int WDR_MODE_2To1_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.WDR_MODE_2To1_FRAME = 2
     * }
     */
    public static int WDR_MODE_2To1_FRAME() {
        return WDR_MODE_2To1_FRAME;
    }
    private static final int SDR_DDR_MODE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SDR_DDR_MODE = 3
     * }
     */
    public static int SDR_DDR_MODE() {
        return SDR_DDR_MODE;
    }
    private static final int ISP_SDR_DCAM_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ISP_SDR_DCAM_MODE = 4
     * }
     */
    public static int ISP_SDR_DCAM_MODE() {
        return ISP_SDR_DCAM_MODE;
    }

    private static class v4l2_subdev_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_open(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_open$descriptor() {
        return v4l2_subdev_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_open(struct media_entity *entity)
     * }
     */
    public static MethodHandle v4l2_subdev_open$handle() {
        return v4l2_subdev_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_open(struct media_entity *entity)
     * }
     */
    public static MemorySegment v4l2_subdev_open$address() {
        return v4l2_subdev_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_open(struct media_entity *entity)
     * }
     */
    public static int v4l2_subdev_open(MemorySegment entity) {
        var mh$ = v4l2_subdev_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_open", entity);
            }
            return (int)mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void v4l2_subdev_close(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_close$descriptor() {
        return v4l2_subdev_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void v4l2_subdev_close(struct media_entity *entity)
     * }
     */
    public static MethodHandle v4l2_subdev_close$handle() {
        return v4l2_subdev_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void v4l2_subdev_close(struct media_entity *entity)
     * }
     */
    public static MemorySegment v4l2_subdev_close$address() {
        return v4l2_subdev_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void v4l2_subdev_close(struct media_entity *entity)
     * }
     */
    public static void v4l2_subdev_close(MemorySegment entity) {
        var mh$ = v4l2_subdev_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_close", entity);
            }
            mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_get_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_get_format$descriptor() {
        return v4l2_subdev_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MethodHandle v4l2_subdev_get_format$handle() {
        return v4l2_subdev_get_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MemorySegment v4l2_subdev_get_format$address() {
        return v4l2_subdev_get_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_get_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static int v4l2_subdev_get_format(MemorySegment entity, MemorySegment format, int pad, int which) {
        var mh$ = v4l2_subdev_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_get_format", entity, format, pad, which);
            }
            return (int)mh$.invokeExact(entity, format, pad, which);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_format$descriptor() {
        return v4l2_subdev_set_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MethodHandle v4l2_subdev_set_format$handle() {
        return v4l2_subdev_set_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MemorySegment v4l2_subdev_set_format$address() {
        return v4l2_subdev_set_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_format(struct media_entity *entity, struct v4l2_mbus_framefmt *format, unsigned int pad, enum v4l2_subdev_format_whence which)
     * }
     */
    public static int v4l2_subdev_set_format(MemorySegment entity, MemorySegment format, int pad, int which) {
        var mh$ = v4l2_subdev_set_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_format", entity, format, pad, which);
            }
            return (int)mh$.invokeExact(entity, format, pad, which);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_get_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_get_selection$descriptor() {
        return v4l2_subdev_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MethodHandle v4l2_subdev_get_selection$handle() {
        return v4l2_subdev_get_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MemorySegment v4l2_subdev_get_selection$address() {
        return v4l2_subdev_get_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_get_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static int v4l2_subdev_get_selection(MemorySegment entity, MemorySegment rect, int pad, int target, int which) {
        var mh$ = v4l2_subdev_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_get_selection", entity, rect, pad, target, which);
            }
            return (int)mh$.invokeExact(entity, rect, pad, target, which);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_selection$descriptor() {
        return v4l2_subdev_set_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MethodHandle v4l2_subdev_set_selection$handle() {
        return v4l2_subdev_set_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static MemorySegment v4l2_subdev_set_selection$address() {
        return v4l2_subdev_set_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_selection(struct media_entity *entity, struct v4l2_rect *rect, unsigned int pad, unsigned int target, enum v4l2_subdev_format_whence which)
     * }
     */
    public static int v4l2_subdev_set_selection(MemorySegment entity, MemorySegment rect, int pad, int target, int which) {
        var mh$ = v4l2_subdev_set_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_selection", entity, rect, pad, target, which);
            }
            return (int)mh$.invokeExact(entity, rect, pad, target, which);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_get_dv_timings_caps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_get_dv_timings_caps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings_caps(struct media_entity *entity, struct v4l2_dv_timings_cap *caps)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_get_dv_timings_caps$descriptor() {
        return v4l2_subdev_get_dv_timings_caps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings_caps(struct media_entity *entity, struct v4l2_dv_timings_cap *caps)
     * }
     */
    public static MethodHandle v4l2_subdev_get_dv_timings_caps$handle() {
        return v4l2_subdev_get_dv_timings_caps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings_caps(struct media_entity *entity, struct v4l2_dv_timings_cap *caps)
     * }
     */
    public static MemorySegment v4l2_subdev_get_dv_timings_caps$address() {
        return v4l2_subdev_get_dv_timings_caps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings_caps(struct media_entity *entity, struct v4l2_dv_timings_cap *caps)
     * }
     */
    public static int v4l2_subdev_get_dv_timings_caps(MemorySegment entity, MemorySegment caps) {
        var mh$ = v4l2_subdev_get_dv_timings_caps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_get_dv_timings_caps", entity, caps);
            }
            return (int)mh$.invokeExact(entity, caps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_query_dv_timings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_query_dv_timings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_query_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_query_dv_timings$descriptor() {
        return v4l2_subdev_query_dv_timings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_query_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MethodHandle v4l2_subdev_query_dv_timings$handle() {
        return v4l2_subdev_query_dv_timings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_query_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MemorySegment v4l2_subdev_query_dv_timings$address() {
        return v4l2_subdev_query_dv_timings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_query_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static int v4l2_subdev_query_dv_timings(MemorySegment entity, MemorySegment timings) {
        var mh$ = v4l2_subdev_query_dv_timings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_query_dv_timings", entity, timings);
            }
            return (int)mh$.invokeExact(entity, timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_get_dv_timings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_get_dv_timings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_get_dv_timings$descriptor() {
        return v4l2_subdev_get_dv_timings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MethodHandle v4l2_subdev_get_dv_timings$handle() {
        return v4l2_subdev_get_dv_timings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MemorySegment v4l2_subdev_get_dv_timings$address() {
        return v4l2_subdev_get_dv_timings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_get_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static int v4l2_subdev_get_dv_timings(MemorySegment entity, MemorySegment timings) {
        var mh$ = v4l2_subdev_get_dv_timings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_get_dv_timings", entity, timings);
            }
            return (int)mh$.invokeExact(entity, timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_dv_timings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_dv_timings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_dv_timings$descriptor() {
        return v4l2_subdev_set_dv_timings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MethodHandle v4l2_subdev_set_dv_timings$handle() {
        return v4l2_subdev_set_dv_timings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static MemorySegment v4l2_subdev_set_dv_timings$address() {
        return v4l2_subdev_set_dv_timings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_dv_timings(struct media_entity *entity, struct v4l2_dv_timings *timings)
     * }
     */
    public static int v4l2_subdev_set_dv_timings(MemorySegment entity, MemorySegment timings) {
        var mh$ = v4l2_subdev_set_dv_timings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_dv_timings", entity, timings);
            }
            return (int)mh$.invokeExact(entity, timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_get_frame_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_get_frame_interval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_get_frame_interval$descriptor() {
        return v4l2_subdev_get_frame_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static MethodHandle v4l2_subdev_get_frame_interval$handle() {
        return v4l2_subdev_get_frame_interval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_get_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static MemorySegment v4l2_subdev_get_frame_interval$address() {
        return v4l2_subdev_get_frame_interval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_get_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static int v4l2_subdev_get_frame_interval(MemorySegment entity, MemorySegment interval) {
        var mh$ = v4l2_subdev_get_frame_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_get_frame_interval", entity, interval);
            }
            return (int)mh$.invokeExact(entity, interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_frame_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_frame_interval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_frame_interval$descriptor() {
        return v4l2_subdev_set_frame_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static MethodHandle v4l2_subdev_set_frame_interval$handle() {
        return v4l2_subdev_set_frame_interval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static MemorySegment v4l2_subdev_set_frame_interval$address() {
        return v4l2_subdev_set_frame_interval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_frame_interval(struct media_entity *entity, struct v4l2_fract *interval)
     * }
     */
    public static int v4l2_subdev_set_frame_interval(MemorySegment entity, MemorySegment interval) {
        var mh$ = v4l2_subdev_set_frame_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_frame_interval", entity, interval);
            }
            return (int)mh$.invokeExact(entity, interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_parse_setup_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_parse_setup_formats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_parse_setup_formats(struct media_device *media, const char *p)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_parse_setup_formats$descriptor() {
        return v4l2_subdev_parse_setup_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_parse_setup_formats(struct media_device *media, const char *p)
     * }
     */
    public static MethodHandle v4l2_subdev_parse_setup_formats$handle() {
        return v4l2_subdev_parse_setup_formats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_parse_setup_formats(struct media_device *media, const char *p)
     * }
     */
    public static MemorySegment v4l2_subdev_parse_setup_formats$address() {
        return v4l2_subdev_parse_setup_formats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_parse_setup_formats(struct media_device *media, const char *p)
     * }
     */
    public static int v4l2_subdev_parse_setup_formats(MemorySegment media, MemorySegment p) {
        var mh$ = v4l2_subdev_parse_setup_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_parse_setup_formats", media, p);
            }
            return (int)mh$.invokeExact(media, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_pixelcode_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_pixelcode_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *v4l2_subdev_pixelcode_to_string(unsigned int code)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_pixelcode_to_string$descriptor() {
        return v4l2_subdev_pixelcode_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *v4l2_subdev_pixelcode_to_string(unsigned int code)
     * }
     */
    public static MethodHandle v4l2_subdev_pixelcode_to_string$handle() {
        return v4l2_subdev_pixelcode_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *v4l2_subdev_pixelcode_to_string(unsigned int code)
     * }
     */
    public static MemorySegment v4l2_subdev_pixelcode_to_string$address() {
        return v4l2_subdev_pixelcode_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *v4l2_subdev_pixelcode_to_string(unsigned int code)
     * }
     */
    public static MemorySegment v4l2_subdev_pixelcode_to_string(int code) {
        var mh$ = v4l2_subdev_pixelcode_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_pixelcode_to_string", code);
            }
            return (MemorySegment)mh$.invokeExact(code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_string_to_pixelcode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_string_to_pixelcode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode v4l2_subdev_string_to_pixelcode(const char *string, unsigned int length)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_string_to_pixelcode$descriptor() {
        return v4l2_subdev_string_to_pixelcode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode v4l2_subdev_string_to_pixelcode(const char *string, unsigned int length)
     * }
     */
    public static MethodHandle v4l2_subdev_string_to_pixelcode$handle() {
        return v4l2_subdev_string_to_pixelcode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode v4l2_subdev_string_to_pixelcode(const char *string, unsigned int length)
     * }
     */
    public static MemorySegment v4l2_subdev_string_to_pixelcode$address() {
        return v4l2_subdev_string_to_pixelcode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * enum v4l2_mbus_pixelcode v4l2_subdev_string_to_pixelcode(const char *string, unsigned int length)
     * }
     */
    public static int v4l2_subdev_string_to_pixelcode(MemorySegment string, int length) {
        var mh$ = v4l2_subdev_string_to_pixelcode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_string_to_pixelcode", string, length);
            }
            return (int)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_ctrls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_ctrls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_ctrls(struct media_entity *entity, struct v4l2_ext_control *ctrls, int count)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_ctrls$descriptor() {
        return v4l2_subdev_set_ctrls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_ctrls(struct media_entity *entity, struct v4l2_ext_control *ctrls, int count)
     * }
     */
    public static MethodHandle v4l2_subdev_set_ctrls$handle() {
        return v4l2_subdev_set_ctrls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_ctrls(struct media_entity *entity, struct v4l2_ext_control *ctrls, int count)
     * }
     */
    public static MemorySegment v4l2_subdev_set_ctrls$address() {
        return v4l2_subdev_set_ctrls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_ctrls(struct media_entity *entity, struct v4l2_ext_control *ctrls, int count)
     * }
     */
    public static int v4l2_subdev_set_ctrls(MemorySegment entity, MemorySegment ctrls, int count) {
        var mh$ = v4l2_subdev_set_ctrls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_ctrls", entity, ctrls, count);
            }
            return (int)mh$.invokeExact(entity, ctrls, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_subdev_set_wdr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_subdev_set_wdr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_wdr(struct media_entity *entity, uint32_t wdr_mode)
     * }
     */
    public static FunctionDescriptor v4l2_subdev_set_wdr$descriptor() {
        return v4l2_subdev_set_wdr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_wdr(struct media_entity *entity, uint32_t wdr_mode)
     * }
     */
    public static MethodHandle v4l2_subdev_set_wdr$handle() {
        return v4l2_subdev_set_wdr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_subdev_set_wdr(struct media_entity *entity, uint32_t wdr_mode)
     * }
     */
    public static MemorySegment v4l2_subdev_set_wdr$address() {
        return v4l2_subdev_set_wdr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_subdev_set_wdr(struct media_entity *entity, uint32_t wdr_mode)
     * }
     */
    public static int v4l2_subdev_set_wdr(MemorySegment entity, int wdr_mode) {
        var mh$ = v4l2_subdev_set_wdr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_subdev_set_wdr", entity, wdr_mode);
            }
            return (int)mh$.invokeExact(entity, wdr_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_video_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_open(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor v4l2_video_open$descriptor() {
        return v4l2_video_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_open(struct media_entity *entity)
     * }
     */
    public static MethodHandle v4l2_video_open$handle() {
        return v4l2_video_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_open(struct media_entity *entity)
     * }
     */
    public static MemorySegment v4l2_video_open$address() {
        return v4l2_video_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_open(struct media_entity *entity)
     * }
     */
    public static int v4l2_video_open(MemorySegment entity) {
        var mh$ = v4l2_video_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_open", entity);
            }
            return (int)mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_video_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void v4l2_video_close(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor v4l2_video_close$descriptor() {
        return v4l2_video_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void v4l2_video_close(struct media_entity *entity)
     * }
     */
    public static MethodHandle v4l2_video_close$handle() {
        return v4l2_video_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void v4l2_video_close(struct media_entity *entity)
     * }
     */
    public static MemorySegment v4l2_video_close$address() {
        return v4l2_video_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void v4l2_video_close(struct media_entity *entity)
     * }
     */
    public static void v4l2_video_close(MemorySegment entity) {
        var mh$ = v4l2_video_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_close", entity);
            }
            mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_get_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_get_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static FunctionDescriptor v4l2_video_get_format$descriptor() {
        return v4l2_video_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_get_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static MethodHandle v4l2_video_get_format$handle() {
        return v4l2_video_get_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_get_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static MemorySegment v4l2_video_get_format$address() {
        return v4l2_video_get_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_get_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static int v4l2_video_get_format(MemorySegment entity, MemorySegment v4l2_fmt) {
        var mh$ = v4l2_video_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_get_format", entity, v4l2_fmt);
            }
            return (int)mh$.invokeExact(entity, v4l2_fmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_set_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("v4l2_video_set_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_set_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static FunctionDescriptor v4l2_video_set_format$descriptor() {
        return v4l2_video_set_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_set_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static MethodHandle v4l2_video_set_format$handle() {
        return v4l2_video_set_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_set_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static MemorySegment v4l2_video_set_format$address() {
        return v4l2_video_set_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_set_format(struct media_entity *entity, struct v4l2_format *v4l2_fmt)
     * }
     */
    public static int v4l2_video_set_format(MemorySegment entity, MemorySegment v4l2_fmt) {
        var mh$ = v4l2_video_set_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_set_format", entity, v4l2_fmt);
            }
            return (int)mh$.invokeExact(entity, v4l2_fmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_get_capability {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_get_capability");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_get_capability(struct media_entity *entity, struct v4l2_capability *v4l2_cap)
     * }
     */
    public static FunctionDescriptor v4l2_video_get_capability$descriptor() {
        return v4l2_video_get_capability.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_get_capability(struct media_entity *entity, struct v4l2_capability *v4l2_cap)
     * }
     */
    public static MethodHandle v4l2_video_get_capability$handle() {
        return v4l2_video_get_capability.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_get_capability(struct media_entity *entity, struct v4l2_capability *v4l2_cap)
     * }
     */
    public static MemorySegment v4l2_video_get_capability$address() {
        return v4l2_video_get_capability.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_get_capability(struct media_entity *entity, struct v4l2_capability *v4l2_cap)
     * }
     */
    public static int v4l2_video_get_capability(MemorySegment entity, MemorySegment v4l2_cap) {
        var mh$ = v4l2_video_get_capability.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_get_capability", entity, v4l2_cap);
            }
            return (int)mh$.invokeExact(entity, v4l2_cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_req_bufs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_req_bufs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_req_bufs(struct media_entity *entity, struct v4l2_requestbuffers *v4l2_rb)
     * }
     */
    public static FunctionDescriptor v4l2_video_req_bufs$descriptor() {
        return v4l2_video_req_bufs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_req_bufs(struct media_entity *entity, struct v4l2_requestbuffers *v4l2_rb)
     * }
     */
    public static MethodHandle v4l2_video_req_bufs$handle() {
        return v4l2_video_req_bufs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_req_bufs(struct media_entity *entity, struct v4l2_requestbuffers *v4l2_rb)
     * }
     */
    public static MemorySegment v4l2_video_req_bufs$address() {
        return v4l2_video_req_bufs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_req_bufs(struct media_entity *entity, struct v4l2_requestbuffers *v4l2_rb)
     * }
     */
    public static int v4l2_video_req_bufs(MemorySegment entity, MemorySegment v4l2_rb) {
        var mh$ = v4l2_video_req_bufs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_req_bufs", entity, v4l2_rb);
            }
            return (int)mh$.invokeExact(entity, v4l2_rb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_query_buf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_query_buf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_query_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static FunctionDescriptor v4l2_video_query_buf$descriptor() {
        return v4l2_video_query_buf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_query_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MethodHandle v4l2_video_query_buf$handle() {
        return v4l2_video_query_buf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_query_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MemorySegment v4l2_video_query_buf$address() {
        return v4l2_video_query_buf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_query_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static int v4l2_video_query_buf(MemorySegment entity, MemorySegment v4l2_buf) {
        var mh$ = v4l2_video_query_buf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_query_buf", entity, v4l2_buf);
            }
            return (int)mh$.invokeExact(entity, v4l2_buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_q_buf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_q_buf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_q_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static FunctionDescriptor v4l2_video_q_buf$descriptor() {
        return v4l2_video_q_buf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_q_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MethodHandle v4l2_video_q_buf$handle() {
        return v4l2_video_q_buf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_q_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MemorySegment v4l2_video_q_buf$address() {
        return v4l2_video_q_buf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_q_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static int v4l2_video_q_buf(MemorySegment entity, MemorySegment v4l2_buf) {
        var mh$ = v4l2_video_q_buf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_q_buf", entity, v4l2_buf);
            }
            return (int)mh$.invokeExact(entity, v4l2_buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_dq_buf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_dq_buf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_dq_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static FunctionDescriptor v4l2_video_dq_buf$descriptor() {
        return v4l2_video_dq_buf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_dq_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MethodHandle v4l2_video_dq_buf$handle() {
        return v4l2_video_dq_buf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_dq_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static MemorySegment v4l2_video_dq_buf$address() {
        return v4l2_video_dq_buf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_dq_buf(struct media_entity *entity, struct v4l2_buffer *v4l2_buf)
     * }
     */
    public static int v4l2_video_dq_buf(MemorySegment entity, MemorySegment v4l2_buf) {
        var mh$ = v4l2_video_dq_buf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_dq_buf", entity, v4l2_buf);
            }
            return (int)mh$.invokeExact(entity, v4l2_buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_stream_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_stream_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_stream_on(struct media_entity *entity, int type)
     * }
     */
    public static FunctionDescriptor v4l2_video_stream_on$descriptor() {
        return v4l2_video_stream_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_stream_on(struct media_entity *entity, int type)
     * }
     */
    public static MethodHandle v4l2_video_stream_on$handle() {
        return v4l2_video_stream_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_stream_on(struct media_entity *entity, int type)
     * }
     */
    public static MemorySegment v4l2_video_stream_on$address() {
        return v4l2_video_stream_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_stream_on(struct media_entity *entity, int type)
     * }
     */
    public static int v4l2_video_stream_on(MemorySegment entity, int type) {
        var mh$ = v4l2_video_stream_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_stream_on", entity, type);
            }
            return (int)mh$.invokeExact(entity, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class v4l2_video_stream_off {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("v4l2_video_stream_off");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int v4l2_video_stream_off(struct media_entity *entity, int type)
     * }
     */
    public static FunctionDescriptor v4l2_video_stream_off$descriptor() {
        return v4l2_video_stream_off.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int v4l2_video_stream_off(struct media_entity *entity, int type)
     * }
     */
    public static MethodHandle v4l2_video_stream_off$handle() {
        return v4l2_video_stream_off.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int v4l2_video_stream_off(struct media_entity *entity, int type)
     * }
     */
    public static MemorySegment v4l2_video_stream_off$address() {
        return v4l2_video_stream_off.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int v4l2_video_stream_off(struct media_entity *entity, int type)
     * }
     */
    public static int v4l2_video_stream_off(MemorySegment entity, int type) {
        var mh$ = v4l2_video_stream_off.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("v4l2_video_stream_off", entity, type);
            }
            return (int)mh$.invokeExact(entity, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AML_CMD_GET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.AML_CMD_GET = 0
     * }
     */
    public static int AML_CMD_GET() {
        return AML_CMD_GET;
    }
    private static final int AML_CMD_SET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.AML_CMD_SET = 1
     * }
     */
    public static int AML_CMD_SET() {
        return AML_CMD_SET;
    }

    private static class aisp_enable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aisp_enable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aisp_enable(uint32_t ctx_id, void *pstAlgCtx, void *calib)
     * }
     */
    public static FunctionDescriptor aisp_enable$descriptor() {
        return aisp_enable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aisp_enable(uint32_t ctx_id, void *pstAlgCtx, void *calib)
     * }
     */
    public static MethodHandle aisp_enable$handle() {
        return aisp_enable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aisp_enable(uint32_t ctx_id, void *pstAlgCtx, void *calib)
     * }
     */
    public static MemorySegment aisp_enable$address() {
        return aisp_enable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aisp_enable(uint32_t ctx_id, void *pstAlgCtx, void *calib)
     * }
     */
    public static void aisp_enable(int ctx_id, MemorySegment pstAlgCtx, MemorySegment calib) {
        var mh$ = aisp_enable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aisp_enable", ctx_id, pstAlgCtx, calib);
            }
            mh$.invokeExact(ctx_id, pstAlgCtx, calib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aisp_disable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aisp_disable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aisp_disable(uint32_t ctx_id)
     * }
     */
    public static FunctionDescriptor aisp_disable$descriptor() {
        return aisp_disable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aisp_disable(uint32_t ctx_id)
     * }
     */
    public static MethodHandle aisp_disable$handle() {
        return aisp_disable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aisp_disable(uint32_t ctx_id)
     * }
     */
    public static MemorySegment aisp_disable$address() {
        return aisp_disable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aisp_disable(uint32_t ctx_id)
     * }
     */
    public static void aisp_disable(int ctx_id) {
        var mh$ = aisp_disable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aisp_disable", ctx_id);
            }
            mh$.invokeExact(ctx_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aisp_alg2user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aisp_alg2user");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aisp_alg2user(uint32_t ctx_id, void *param)
     * }
     */
    public static FunctionDescriptor aisp_alg2user$descriptor() {
        return aisp_alg2user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aisp_alg2user(uint32_t ctx_id, void *param)
     * }
     */
    public static MethodHandle aisp_alg2user$handle() {
        return aisp_alg2user.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aisp_alg2user(uint32_t ctx_id, void *param)
     * }
     */
    public static MemorySegment aisp_alg2user$address() {
        return aisp_alg2user.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aisp_alg2user(uint32_t ctx_id, void *param)
     * }
     */
    public static void aisp_alg2user(int ctx_id, MemorySegment param) {
        var mh$ = aisp_alg2user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aisp_alg2user", ctx_id, param);
            }
            mh$.invokeExact(ctx_id, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aisp_alg2kernel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aisp_alg2kernel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aisp_alg2kernel(uint32_t ctx_id, void *param)
     * }
     */
    public static FunctionDescriptor aisp_alg2kernel$descriptor() {
        return aisp_alg2kernel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aisp_alg2kernel(uint32_t ctx_id, void *param)
     * }
     */
    public static MethodHandle aisp_alg2kernel$handle() {
        return aisp_alg2kernel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aisp_alg2kernel(uint32_t ctx_id, void *param)
     * }
     */
    public static MemorySegment aisp_alg2kernel$address() {
        return aisp_alg2kernel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aisp_alg2kernel(uint32_t ctx_id, void *param)
     * }
     */
    public static void aisp_alg2kernel(int ctx_id, MemorySegment param) {
        var mh$ = aisp_alg2kernel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aisp_alg2kernel", ctx_id, param);
            }
            mh$.invokeExact(ctx_id, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aisp_fw_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aisp_fw_interface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aisp_fw_interface(uint32_t ctx_id, void *param)
     * }
     */
    public static FunctionDescriptor aisp_fw_interface$descriptor() {
        return aisp_fw_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aisp_fw_interface(uint32_t ctx_id, void *param)
     * }
     */
    public static MethodHandle aisp_fw_interface$handle() {
        return aisp_fw_interface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aisp_fw_interface(uint32_t ctx_id, void *param)
     * }
     */
    public static MemorySegment aisp_fw_interface$address() {
        return aisp_fw_interface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aisp_fw_interface(uint32_t ctx_id, void *param)
     * }
     */
    public static void aisp_fw_interface(int ctx_id, MemorySegment param) {
        var mh$ = aisp_fw_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aisp_fw_interface", ctx_id, param);
            }
            mh$.invokeExact(ctx_id, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_read_raw_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_read_raw_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_read_raw_data(unsigned char *pVin, int *pData, int xsize, int ysize, int endian, int src_bit_depth)
     * }
     */
    public static FunctionDescriptor aml_read_raw_data$descriptor() {
        return aml_read_raw_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_read_raw_data(unsigned char *pVin, int *pData, int xsize, int ysize, int endian, int src_bit_depth)
     * }
     */
    public static MethodHandle aml_read_raw_data$handle() {
        return aml_read_raw_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_read_raw_data(unsigned char *pVin, int *pData, int xsize, int ysize, int endian, int src_bit_depth)
     * }
     */
    public static MemorySegment aml_read_raw_data$address() {
        return aml_read_raw_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_read_raw_data(unsigned char *pVin, int *pData, int xsize, int ysize, int endian, int src_bit_depth)
     * }
     */
    public static int aml_read_raw_data(MemorySegment pVin, MemorySegment pData, int xsize, int ysize, int endian, int src_bit_depth) {
        var mh$ = aml_read_raw_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_read_raw_data", pVin, pData, xsize, ysize, endian, src_bit_depth);
            }
            return (int)mh$.invokeExact(pVin, pData, xsize, ysize, endian, src_bit_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_optical_center_point_calibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_optical_center_point_calibration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_optical_center_point_calibration(int xsize, int ysize, int *phase_ofst, int *pData, int *center_x, int *center_y)
     * }
     */
    public static FunctionDescriptor aml_optical_center_point_calibration$descriptor() {
        return aml_optical_center_point_calibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_optical_center_point_calibration(int xsize, int ysize, int *phase_ofst, int *pData, int *center_x, int *center_y)
     * }
     */
    public static MethodHandle aml_optical_center_point_calibration$handle() {
        return aml_optical_center_point_calibration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_optical_center_point_calibration(int xsize, int ysize, int *phase_ofst, int *pData, int *center_x, int *center_y)
     * }
     */
    public static MemorySegment aml_optical_center_point_calibration$address() {
        return aml_optical_center_point_calibration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_optical_center_point_calibration(int xsize, int ysize, int *phase_ofst, int *pData, int *center_x, int *center_y)
     * }
     */
    public static int aml_optical_center_point_calibration(int xsize, int ysize, MemorySegment phase_ofst, MemorySegment pData, MemorySegment center_x, MemorySegment center_y) {
        var mh$ = aml_optical_center_point_calibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_optical_center_point_calibration", xsize, ysize, phase_ofst, pData, center_x, center_y);
            }
            return (int)mh$.invokeExact(xsize, ysize, phase_ofst, pData, center_x, center_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_radial_shading_calibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_radial_shading_calibration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_radial_shading_calibration(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int chroma_s, int luma_s, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_radial_shading_calibration$descriptor() {
        return aml_radial_shading_calibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_radial_shading_calibration(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int chroma_s, int luma_s, int *pVout)
     * }
     */
    public static MethodHandle aml_radial_shading_calibration$handle() {
        return aml_radial_shading_calibration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_radial_shading_calibration(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int chroma_s, int luma_s, int *pVout)
     * }
     */
    public static MemorySegment aml_radial_shading_calibration$address() {
        return aml_radial_shading_calibration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_radial_shading_calibration(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int chroma_s, int luma_s, int *pVout)
     * }
     */
    public static int aml_radial_shading_calibration(int xsize, int ysize, MemorySegment phase_ofst, int center_ofs_x, int center_ofs_y, MemorySegment pData, int chroma_s, int luma_s, MemorySegment pVout) {
        var mh$ = aml_radial_shading_calibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_radial_shading_calibration", xsize, ysize, phase_ofst, center_ofs_x, center_ofs_y, pData, chroma_s, luma_s, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, phase_ofst, center_ofs_x, center_ofs_y, pData, chroma_s, luma_s, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_radial_shading_correct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_radial_shading_correct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_radial_shading_correct(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int *pRadLSC, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_radial_shading_correct$descriptor() {
        return aml_radial_shading_correct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_radial_shading_correct(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int *pRadLSC, int *pVout)
     * }
     */
    public static MethodHandle aml_radial_shading_correct$handle() {
        return aml_radial_shading_correct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_radial_shading_correct(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int *pRadLSC, int *pVout)
     * }
     */
    public static MemorySegment aml_radial_shading_correct$address() {
        return aml_radial_shading_correct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_radial_shading_correct(int xsize, int ysize, int *phase_ofst, int center_ofs_x, int center_ofs_y, int *pData, int *pRadLSC, int *pVout)
     * }
     */
    public static int aml_radial_shading_correct(int xsize, int ysize, MemorySegment phase_ofst, int center_ofs_x, int center_ofs_y, MemorySegment pData, MemorySegment pRadLSC, MemorySegment pVout) {
        var mh$ = aml_radial_shading_correct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_radial_shading_correct", xsize, ysize, phase_ofst, center_ofs_x, center_ofs_y, pData, pRadLSC, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, phase_ofst, center_ofs_x, center_ofs_y, pData, pRadLSC, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_mesh_shading_calibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_mesh_shading_calibration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_mesh_shading_calibration(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int chroma_s, int luma_s, int mesh_s, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_mesh_shading_calibration$descriptor() {
        return aml_mesh_shading_calibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_mesh_shading_calibration(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int chroma_s, int luma_s, int mesh_s, int *pVout)
     * }
     */
    public static MethodHandle aml_mesh_shading_calibration$handle() {
        return aml_mesh_shading_calibration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_mesh_shading_calibration(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int chroma_s, int luma_s, int mesh_s, int *pVout)
     * }
     */
    public static MemorySegment aml_mesh_shading_calibration$address() {
        return aml_mesh_shading_calibration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_mesh_shading_calibration(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int chroma_s, int luma_s, int mesh_s, int *pVout)
     * }
     */
    public static int aml_mesh_shading_calibration(int xsize, int ysize, int X_node, int Y_node, MemorySegment phase_ofst, MemorySegment pData, int chroma_s, int luma_s, int mesh_s, MemorySegment pVout) {
        var mh$ = aml_mesh_shading_calibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_mesh_shading_calibration", xsize, ysize, X_node, Y_node, phase_ofst, pData, chroma_s, luma_s, mesh_s, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, X_node, Y_node, phase_ofst, pData, chroma_s, luma_s, mesh_s, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_mesh_shading_correct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_mesh_shading_correct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_mesh_shading_correct(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int *pLSC, int meshscale, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_mesh_shading_correct$descriptor() {
        return aml_mesh_shading_correct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_mesh_shading_correct(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int *pLSC, int meshscale, int *pVout)
     * }
     */
    public static MethodHandle aml_mesh_shading_correct$handle() {
        return aml_mesh_shading_correct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_mesh_shading_correct(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int *pLSC, int meshscale, int *pVout)
     * }
     */
    public static MemorySegment aml_mesh_shading_correct$address() {
        return aml_mesh_shading_correct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_mesh_shading_correct(int xsize, int ysize, int X_node, int Y_node, int *phase_ofst, int *pData, int *pLSC, int meshscale, int *pVout)
     * }
     */
    public static int aml_mesh_shading_correct(int xsize, int ysize, int X_node, int Y_node, MemorySegment phase_ofst, MemorySegment pData, MemorySegment pLSC, int meshscale, MemorySegment pVout) {
        var mh$ = aml_mesh_shading_correct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_mesh_shading_correct", xsize, ysize, X_node, Y_node, phase_ofst, pData, pLSC, meshscale, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, X_node, Y_node, phase_ofst, pData, pLSC, meshscale, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_mesh_shading_compress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_mesh_shading_compress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_mesh_shading_compress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static FunctionDescriptor aml_mesh_shading_compress$descriptor() {
        return aml_mesh_shading_compress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_mesh_shading_compress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static MethodHandle aml_mesh_shading_compress$handle() {
        return aml_mesh_shading_compress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_mesh_shading_compress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static MemorySegment aml_mesh_shading_compress$address() {
        return aml_mesh_shading_compress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_mesh_shading_compress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static int aml_mesh_shading_compress(int X_node, int Y_node, MemorySegment pLSC, MemorySegment pLSC_enc, int size, int lose_level) {
        var mh$ = aml_mesh_shading_compress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_mesh_shading_compress", X_node, Y_node, pLSC, pLSC_enc, size, lose_level);
            }
            return (int)mh$.invokeExact(X_node, Y_node, pLSC, pLSC_enc, size, lose_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_mesh_shading_decompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_mesh_shading_decompress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_mesh_shading_decompress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static FunctionDescriptor aml_mesh_shading_decompress$descriptor() {
        return aml_mesh_shading_decompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_mesh_shading_decompress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static MethodHandle aml_mesh_shading_decompress$handle() {
        return aml_mesh_shading_decompress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_mesh_shading_decompress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static MemorySegment aml_mesh_shading_decompress$address() {
        return aml_mesh_shading_decompress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_mesh_shading_decompress(int X_node, int Y_node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static int aml_mesh_shading_decompress(int X_node, int Y_node, MemorySegment pLSC, MemorySegment pLSC_enc, int size) {
        var mh$ = aml_mesh_shading_decompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_mesh_shading_decompress", X_node, Y_node, pLSC, pLSC_enc, size);
            }
            return (int)mh$.invokeExact(X_node, Y_node, pLSC, pLSC_enc, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_rad_shading_compress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_rad_shading_compress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_rad_shading_compress(int node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static FunctionDescriptor aml_rad_shading_compress$descriptor() {
        return aml_rad_shading_compress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_rad_shading_compress(int node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static MethodHandle aml_rad_shading_compress$handle() {
        return aml_rad_shading_compress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_rad_shading_compress(int node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static MemorySegment aml_rad_shading_compress$address() {
        return aml_rad_shading_compress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_rad_shading_compress(int node, int *pLSC, unsigned char *pLSC_enc, int size, int lose_level)
     * }
     */
    public static int aml_rad_shading_compress(int node, MemorySegment pLSC, MemorySegment pLSC_enc, int size, int lose_level) {
        var mh$ = aml_rad_shading_compress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_rad_shading_compress", node, pLSC, pLSC_enc, size, lose_level);
            }
            return (int)mh$.invokeExact(node, pLSC, pLSC_enc, size, lose_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_rad_shading_decompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_rad_shading_decompress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_rad_shading_decompress(int node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static FunctionDescriptor aml_rad_shading_decompress$descriptor() {
        return aml_rad_shading_decompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_rad_shading_decompress(int node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static MethodHandle aml_rad_shading_decompress$handle() {
        return aml_rad_shading_decompress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_rad_shading_decompress(int node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static MemorySegment aml_rad_shading_decompress$address() {
        return aml_rad_shading_decompress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_rad_shading_decompress(int node, int *pLSC, unsigned char *pLSC_enc, int size)
     * }
     */
    public static int aml_rad_shading_decompress(int node, MemorySegment pLSC, MemorySegment pLSC_enc, int size) {
        var mh$ = aml_rad_shading_decompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_rad_shading_decompress", node, pLSC, pLSC_enc, size);
            }
            return (int)mh$.invokeExact(node, pLSC, pLSC_enc, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_white_balance_otp_calibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_white_balance_otp_calibration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_white_balance_otp_calibration(int xsize, int ysize, int *pData, int *pVout, int *phase_ofst)
     * }
     */
    public static FunctionDescriptor aml_white_balance_otp_calibration$descriptor() {
        return aml_white_balance_otp_calibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_white_balance_otp_calibration(int xsize, int ysize, int *pData, int *pVout, int *phase_ofst)
     * }
     */
    public static MethodHandle aml_white_balance_otp_calibration$handle() {
        return aml_white_balance_otp_calibration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_white_balance_otp_calibration(int xsize, int ysize, int *pData, int *pVout, int *phase_ofst)
     * }
     */
    public static MemorySegment aml_white_balance_otp_calibration$address() {
        return aml_white_balance_otp_calibration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_white_balance_otp_calibration(int xsize, int ysize, int *pData, int *pVout, int *phase_ofst)
     * }
     */
    public static int aml_white_balance_otp_calibration(int xsize, int ysize, MemorySegment pData, MemorySegment pVout, MemorySegment phase_ofst) {
        var mh$ = aml_white_balance_otp_calibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_white_balance_otp_calibration", xsize, ysize, pData, pVout, phase_ofst);
            }
            return (int)mh$.invokeExact(xsize, ysize, pData, pVout, phase_ofst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_black_level_correct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_black_level_correct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_black_level_correct(int xsize, int ysize, int *phase_ofst, int *blc, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_black_level_correct$descriptor() {
        return aml_black_level_correct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_black_level_correct(int xsize, int ysize, int *phase_ofst, int *blc, int *pVout)
     * }
     */
    public static MethodHandle aml_black_level_correct$handle() {
        return aml_black_level_correct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_black_level_correct(int xsize, int ysize, int *phase_ofst, int *blc, int *pVout)
     * }
     */
    public static MemorySegment aml_black_level_correct$address() {
        return aml_black_level_correct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_black_level_correct(int xsize, int ysize, int *phase_ofst, int *blc, int *pVout)
     * }
     */
    public static int aml_black_level_correct(int xsize, int ysize, MemorySegment phase_ofst, MemorySegment blc, MemorySegment pVout) {
        var mh$ = aml_black_level_correct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_black_level_correct", xsize, ysize, phase_ofst, blc, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, phase_ofst, blc, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_white_balance_correct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_white_balance_correct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_white_balance_correct(int xsize, int ysize, int *in_bw, int *phase_ofst, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_white_balance_correct$descriptor() {
        return aml_white_balance_correct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_white_balance_correct(int xsize, int ysize, int *in_bw, int *phase_ofst, int *pVout)
     * }
     */
    public static MethodHandle aml_white_balance_correct$handle() {
        return aml_white_balance_correct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_white_balance_correct(int xsize, int ysize, int *in_bw, int *phase_ofst, int *pVout)
     * }
     */
    public static MemorySegment aml_white_balance_correct$address() {
        return aml_white_balance_correct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_white_balance_correct(int xsize, int ysize, int *in_bw, int *phase_ofst, int *pVout)
     * }
     */
    public static int aml_white_balance_correct(int xsize, int ysize, MemorySegment in_bw, MemorySegment phase_ofst, MemorySegment pVout) {
        var mh$ = aml_white_balance_correct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_white_balance_correct", xsize, ysize, in_bw, phase_ofst, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, in_bw, phase_ofst, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_demosaic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_demosaic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_demosaic(int xsize, int ysize, int *phase_ofst, int *pData, int *pVout)
     * }
     */
    public static FunctionDescriptor aml_demosaic$descriptor() {
        return aml_demosaic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_demosaic(int xsize, int ysize, int *phase_ofst, int *pData, int *pVout)
     * }
     */
    public static MethodHandle aml_demosaic$handle() {
        return aml_demosaic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_demosaic(int xsize, int ysize, int *phase_ofst, int *pData, int *pVout)
     * }
     */
    public static MemorySegment aml_demosaic$address() {
        return aml_demosaic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_demosaic(int xsize, int ysize, int *phase_ofst, int *pData, int *pVout)
     * }
     */
    public static int aml_demosaic(int xsize, int ysize, MemorySegment phase_ofst, MemorySegment pData, MemorySegment pVout) {
        var mh$ = aml_demosaic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_demosaic", xsize, ysize, phase_ofst, pData, pVout);
            }
            return (int)mh$.invokeExact(xsize, ysize, phase_ofst, pData, pVout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_write_bmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_write_bmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int aml_write_bmp(char *filename, int *cpBufr, int xsize, int ysize)
     * }
     */
    public static FunctionDescriptor aml_write_bmp$descriptor() {
        return aml_write_bmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int aml_write_bmp(char *filename, int *cpBufr, int xsize, int ysize)
     * }
     */
    public static MethodHandle aml_write_bmp$handle() {
        return aml_write_bmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int aml_write_bmp(char *filename, int *cpBufr, int xsize, int ysize)
     * }
     */
    public static MemorySegment aml_write_bmp$address() {
        return aml_write_bmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int aml_write_bmp(char *filename, int *cpBufr, int xsize, int ysize)
     * }
     */
    public static int aml_write_bmp(MemorySegment filename, MemorySegment cpBufr, int xsize, int ysize) {
        var mh$ = aml_write_bmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_write_bmp", filename, cpBufr, xsize, ysize);
            }
            return (int)mh$.invokeExact(filename, cpBufr, xsize, ysize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aml_debug_mode_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("aml_debug_mode_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void aml_debug_mode_set(int debug)
     * }
     */
    public static FunctionDescriptor aml_debug_mode_set$descriptor() {
        return aml_debug_mode_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void aml_debug_mode_set(int debug)
     * }
     */
    public static MethodHandle aml_debug_mode_set$handle() {
        return aml_debug_mode_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void aml_debug_mode_set(int debug)
     * }
     */
    public static MemorySegment aml_debug_mode_set$address() {
        return aml_debug_mode_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void aml_debug_mode_set(int debug)
     * }
     */
    public static void aml_debug_mode_set(int debug) {
        var mh$ = aml_debug_mode_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aml_debug_mode_set", debug);
            }
            mh$.invokeExact(debug);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void mediaLog(const char *fmt, ...)
     * }
     */
    public static class mediaLog {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("mediaLog");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mediaLog(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void mediaLog(const char *fmt, ...)
         * }
         */
        public static mediaLog makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mediaLog(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mediaLog", fmt, x1);
                }
                 spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class mediaStreamInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("mediaStreamInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mediaStreamInit(media_stream_t *stream, struct media_device *dev)
     * }
     */
    public static FunctionDescriptor mediaStreamInit$descriptor() {
        return mediaStreamInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mediaStreamInit(media_stream_t *stream, struct media_device *dev)
     * }
     */
    public static MethodHandle mediaStreamInit$handle() {
        return mediaStreamInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mediaStreamInit(media_stream_t *stream, struct media_device *dev)
     * }
     */
    public static MemorySegment mediaStreamInit$address() {
        return mediaStreamInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mediaStreamInit(media_stream_t *stream, struct media_device *dev)
     * }
     */
    public static int mediaStreamInit(MemorySegment stream, MemorySegment dev) {
        var mh$ = mediaStreamInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mediaStreamInit", stream, dev);
            }
            return (int)mh$.invokeExact(stream, dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class createLinks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("createLinks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int createLinks(media_stream_t *stream)
     * }
     */
    public static FunctionDescriptor createLinks$descriptor() {
        return createLinks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int createLinks(media_stream_t *stream)
     * }
     */
    public static MethodHandle createLinks$handle() {
        return createLinks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int createLinks(media_stream_t *stream)
     * }
     */
    public static MemorySegment createLinks$address() {
        return createLinks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int createLinks(media_stream_t *stream)
     * }
     */
    public static int createLinks(MemorySegment stream) {
        var mh$ = createLinks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("createLinks", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setSdFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setSdFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setSdFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static FunctionDescriptor setSdFormat$descriptor() {
        return setSdFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setSdFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MethodHandle setSdFormat$handle() {
        return setSdFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setSdFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MemorySegment setSdFormat$address() {
        return setSdFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setSdFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static int setSdFormat(MemorySegment stream, MemorySegment cfg) {
        var mh$ = setSdFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setSdFormat", stream, cfg);
            }
            return (int)mh$.invokeExact(stream, cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setImgFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setImgFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setImgFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static FunctionDescriptor setImgFormat$descriptor() {
        return setImgFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setImgFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MethodHandle setImgFormat$handle() {
        return setImgFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setImgFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MemorySegment setImgFormat$address() {
        return setImgFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setImgFormat(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static int setImgFormat(MemorySegment stream, MemorySegment cfg) {
        var mh$ = setImgFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setImgFormat", stream, cfg);
            }
            return (int)mh$.invokeExact(stream, cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setDataFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setDataFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setDataFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static FunctionDescriptor setDataFormat$descriptor() {
        return setDataFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setDataFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static MethodHandle setDataFormat$handle() {
        return setDataFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setDataFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static MemorySegment setDataFormat$address() {
        return setDataFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setDataFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static int setDataFormat(MemorySegment camera, MemorySegment cfg) {
        var mh$ = setDataFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setDataFormat", camera, cfg);
            }
            return (int)mh$.invokeExact(camera, cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setConfigFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setConfigFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setConfigFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static FunctionDescriptor setConfigFormat$descriptor() {
        return setConfigFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setConfigFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static MethodHandle setConfigFormat$handle() {
        return setConfigFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setConfigFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static MemorySegment setConfigFormat$address() {
        return setConfigFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setConfigFormat(media_stream_t *camera, stream_configuration_t *cfg)
     * }
     */
    public static int setConfigFormat(MemorySegment camera, MemorySegment cfg) {
        var mh$ = setConfigFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setConfigFormat", camera, cfg);
            }
            return (int)mh$.invokeExact(camera, cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_set_wdrMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("media_set_wdrMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_set_wdrMode(media_stream_t *camera, uint32_t wdr_mode)
     * }
     */
    public static FunctionDescriptor media_set_wdrMode$descriptor() {
        return media_set_wdrMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_set_wdrMode(media_stream_t *camera, uint32_t wdr_mode)
     * }
     */
    public static MethodHandle media_set_wdrMode$handle() {
        return media_set_wdrMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_set_wdrMode(media_stream_t *camera, uint32_t wdr_mode)
     * }
     */
    public static MemorySegment media_set_wdrMode$address() {
        return media_set_wdrMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_set_wdrMode(media_stream_t *camera, uint32_t wdr_mode)
     * }
     */
    public static int media_set_wdrMode(MemorySegment camera, int wdr_mode) {
        var mh$ = media_set_wdrMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_set_wdrMode", camera, wdr_mode);
            }
            return (int)mh$.invokeExact(camera, wdr_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mediaStreamConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("mediaStreamConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mediaStreamConfig(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static FunctionDescriptor mediaStreamConfig$descriptor() {
        return mediaStreamConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mediaStreamConfig(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MethodHandle mediaStreamConfig$handle() {
        return mediaStreamConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mediaStreamConfig(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static MemorySegment mediaStreamConfig$address() {
        return mediaStreamConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mediaStreamConfig(media_stream_t *stream, stream_configuration_t *cfg)
     * }
     */
    public static int mediaStreamConfig(MemorySegment stream, MemorySegment cfg) {
        var mh$ = mediaStreamConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mediaStreamConfig", stream, cfg);
            }
            return (int)mh$.invokeExact(stream, cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __WCHAR_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 4294967295
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN 0
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN 0
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 4294967295
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = mediaAPI.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_FLOAT64X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return __HAVE_FLOAT64X;
    }
    private static final int __HAVE_FLOAT64X_LONG_DOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return __HAVE_FLOAT64X_LONG_DOUBLE;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int _IOC_NRMASK = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NRMASK 255
     * }
     */
    public static int _IOC_NRMASK() {
        return _IOC_NRMASK;
    }
    private static final int _IOC_TYPEMASK = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _IOC_TYPEMASK 255
     * }
     */
    public static int _IOC_TYPEMASK() {
        return _IOC_TYPEMASK;
    }
    private static final int _IOC_SIZEMASK = (int)16383L;
    /**
     * {@snippet lang=c :
     * #define _IOC_SIZEMASK 16383
     * }
     */
    public static int _IOC_SIZEMASK() {
        return _IOC_SIZEMASK;
    }
    private static final int _IOC_DIRMASK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _IOC_DIRMASK 3
     * }
     */
    public static int _IOC_DIRMASK() {
        return _IOC_DIRMASK;
    }
    private static final int _IOC_TYPESHIFT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _IOC_TYPESHIFT 8
     * }
     */
    public static int _IOC_TYPESHIFT() {
        return _IOC_TYPESHIFT;
    }
    private static final int _IOC_SIZESHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define _IOC_SIZESHIFT 16
     * }
     */
    public static int _IOC_SIZESHIFT() {
        return _IOC_SIZESHIFT;
    }
    private static final int _IOC_DIRSHIFT = (int)30L;
    /**
     * {@snippet lang=c :
     * #define _IOC_DIRSHIFT 30
     * }
     */
    public static int _IOC_DIRSHIFT() {
        return _IOC_DIRSHIFT;
    }
    private static final int _IOC_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NONE 0
     * }
     */
    public static int _IOC_NONE() {
        return _IOC_NONE;
    }
    private static final int _IOC_WRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _IOC_WRITE 1
     * }
     */
    public static int _IOC_WRITE() {
        return _IOC_WRITE;
    }
    private static final int _IOC_READ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IOC_READ 2
     * }
     */
    public static int _IOC_READ() {
        return _IOC_READ;
    }
    private static final int IOC_IN = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define IOC_IN 1073741824
     * }
     */
    public static int IOC_IN() {
        return IOC_IN;
    }
    private static final int IOC_OUT = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IOC_OUT 2147483648
     * }
     */
    public static int IOC_OUT() {
        return IOC_OUT;
    }
    private static final int IOC_INOUT = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define IOC_INOUT 3221225472
     * }
     */
    public static int IOC_INOUT() {
        return IOC_INOUT;
    }
    private static final int IOCSIZE_MASK = (int)1073676288L;
    /**
     * {@snippet lang=c :
     * #define IOCSIZE_MASK 1073676288
     * }
     */
    public static int IOCSIZE_MASK() {
        return IOCSIZE_MASK;
    }
    private static final int IOCSIZE_SHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define IOCSIZE_SHIFT 16
     * }
     */
    public static int IOCSIZE_SHIFT() {
        return IOCSIZE_SHIFT;
    }
    private static final int MEDIA_ENT_F_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_UNKNOWN 0
     * }
     */
    public static int MEDIA_ENT_F_UNKNOWN() {
        return MEDIA_ENT_F_UNKNOWN;
    }
    private static final int MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN 131072
     * }
     */
    public static int MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN() {
        return MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN;
    }
    private static final int MEDIA_ENT_F_DTV_DEMOD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DTV_DEMOD 1
     * }
     */
    public static int MEDIA_ENT_F_DTV_DEMOD() {
        return MEDIA_ENT_F_DTV_DEMOD;
    }
    private static final int MEDIA_ENT_F_TS_DEMUX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_TS_DEMUX 2
     * }
     */
    public static int MEDIA_ENT_F_TS_DEMUX() {
        return MEDIA_ENT_F_TS_DEMUX;
    }
    private static final int MEDIA_ENT_F_DTV_CA = (int)3L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DTV_CA 3
     * }
     */
    public static int MEDIA_ENT_F_DTV_CA() {
        return MEDIA_ENT_F_DTV_CA;
    }
    private static final int MEDIA_ENT_F_DTV_NET_DECAP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DTV_NET_DECAP 4
     * }
     */
    public static int MEDIA_ENT_F_DTV_NET_DECAP() {
        return MEDIA_ENT_F_DTV_NET_DECAP;
    }
    private static final int MEDIA_ENT_F_IO_V4L = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IO_V4L 65537
     * }
     */
    public static int MEDIA_ENT_F_IO_V4L() {
        return MEDIA_ENT_F_IO_V4L;
    }
    private static final int MEDIA_ENT_F_IO_DTV = (int)4097L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IO_DTV 4097
     * }
     */
    public static int MEDIA_ENT_F_IO_DTV() {
        return MEDIA_ENT_F_IO_DTV;
    }
    private static final int MEDIA_ENT_F_IO_VBI = (int)4098L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IO_VBI 4098
     * }
     */
    public static int MEDIA_ENT_F_IO_VBI() {
        return MEDIA_ENT_F_IO_VBI;
    }
    private static final int MEDIA_ENT_F_IO_SWRADIO = (int)4099L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IO_SWRADIO 4099
     * }
     */
    public static int MEDIA_ENT_F_IO_SWRADIO() {
        return MEDIA_ENT_F_IO_SWRADIO;
    }
    private static final int MEDIA_ENT_F_CAM_SENSOR = (int)131073L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_CAM_SENSOR 131073
     * }
     */
    public static int MEDIA_ENT_F_CAM_SENSOR() {
        return MEDIA_ENT_F_CAM_SENSOR;
    }
    private static final int MEDIA_ENT_F_FLASH = (int)131074L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_FLASH 131074
     * }
     */
    public static int MEDIA_ENT_F_FLASH() {
        return MEDIA_ENT_F_FLASH;
    }
    private static final int MEDIA_ENT_F_LENS = (int)131075L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_LENS 131075
     * }
     */
    public static int MEDIA_ENT_F_LENS() {
        return MEDIA_ENT_F_LENS;
    }
    private static final int MEDIA_ENT_F_TUNER = (int)131077L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_TUNER 131077
     * }
     */
    public static int MEDIA_ENT_F_TUNER() {
        return MEDIA_ENT_F_TUNER;
    }
    private static final int MEDIA_ENT_F_IF_VID_DECODER = (int)8193L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IF_VID_DECODER 8193
     * }
     */
    public static int MEDIA_ENT_F_IF_VID_DECODER() {
        return MEDIA_ENT_F_IF_VID_DECODER;
    }
    private static final int MEDIA_ENT_F_IF_AUD_DECODER = (int)8194L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_IF_AUD_DECODER 8194
     * }
     */
    public static int MEDIA_ENT_F_IF_AUD_DECODER() {
        return MEDIA_ENT_F_IF_AUD_DECODER;
    }
    private static final int MEDIA_ENT_F_AUDIO_CAPTURE = (int)12289L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_AUDIO_CAPTURE 12289
     * }
     */
    public static int MEDIA_ENT_F_AUDIO_CAPTURE() {
        return MEDIA_ENT_F_AUDIO_CAPTURE;
    }
    private static final int MEDIA_ENT_F_AUDIO_PLAYBACK = (int)12290L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_AUDIO_PLAYBACK 12290
     * }
     */
    public static int MEDIA_ENT_F_AUDIO_PLAYBACK() {
        return MEDIA_ENT_F_AUDIO_PLAYBACK;
    }
    private static final int MEDIA_ENT_F_AUDIO_MIXER = (int)12291L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_AUDIO_MIXER 12291
     * }
     */
    public static int MEDIA_ENT_F_AUDIO_MIXER() {
        return MEDIA_ENT_F_AUDIO_MIXER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_COMPOSER = (int)16385L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_COMPOSER 16385
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_COMPOSER() {
        return MEDIA_ENT_F_PROC_VIDEO_COMPOSER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_PIXEL_FORMATTER = (int)16386L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_PIXEL_FORMATTER 16386
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_PIXEL_FORMATTER() {
        return MEDIA_ENT_F_PROC_VIDEO_PIXEL_FORMATTER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_PIXEL_ENC_CONV = (int)16387L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_PIXEL_ENC_CONV 16387
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_PIXEL_ENC_CONV() {
        return MEDIA_ENT_F_PROC_VIDEO_PIXEL_ENC_CONV;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_LUT = (int)16388L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_LUT 16388
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_LUT() {
        return MEDIA_ENT_F_PROC_VIDEO_LUT;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_SCALER = (int)16389L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_SCALER 16389
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_SCALER() {
        return MEDIA_ENT_F_PROC_VIDEO_SCALER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_STATISTICS = (int)16390L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_STATISTICS 16390
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_STATISTICS() {
        return MEDIA_ENT_F_PROC_VIDEO_STATISTICS;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_ENCODER = (int)16391L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_ENCODER 16391
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_ENCODER() {
        return MEDIA_ENT_F_PROC_VIDEO_ENCODER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_DECODER = (int)16392L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_DECODER 16392
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_DECODER() {
        return MEDIA_ENT_F_PROC_VIDEO_DECODER;
    }
    private static final int MEDIA_ENT_F_PROC_VIDEO_ISP = (int)16393L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_PROC_VIDEO_ISP 16393
     * }
     */
    public static int MEDIA_ENT_F_PROC_VIDEO_ISP() {
        return MEDIA_ENT_F_PROC_VIDEO_ISP;
    }
    private static final int MEDIA_ENT_F_VID_MUX = (int)20481L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_VID_MUX 20481
     * }
     */
    public static int MEDIA_ENT_F_VID_MUX() {
        return MEDIA_ENT_F_VID_MUX;
    }
    private static final int MEDIA_ENT_F_VID_IF_BRIDGE = (int)20482L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_VID_IF_BRIDGE 20482
     * }
     */
    public static int MEDIA_ENT_F_VID_IF_BRIDGE() {
        return MEDIA_ENT_F_VID_IF_BRIDGE;
    }
    private static final int MEDIA_ENT_F_ATV_DECODER = (int)131076L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_ATV_DECODER 131076
     * }
     */
    public static int MEDIA_ENT_F_ATV_DECODER() {
        return MEDIA_ENT_F_ATV_DECODER;
    }
    private static final int MEDIA_ENT_F_DV_DECODER = (int)24577L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DV_DECODER 24577
     * }
     */
    public static int MEDIA_ENT_F_DV_DECODER() {
        return MEDIA_ENT_F_DV_DECODER;
    }
    private static final int MEDIA_ENT_F_DV_ENCODER = (int)24578L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DV_ENCODER 24578
     * }
     */
    public static int MEDIA_ENT_F_DV_ENCODER() {
        return MEDIA_ENT_F_DV_ENCODER;
    }
    private static final int MEDIA_ENT_FL_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_FL_DEFAULT 1
     * }
     */
    public static int MEDIA_ENT_FL_DEFAULT() {
        return MEDIA_ENT_FL_DEFAULT;
    }
    private static final int MEDIA_ENT_FL_CONNECTOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_FL_CONNECTOR 2
     * }
     */
    public static int MEDIA_ENT_FL_CONNECTOR() {
        return MEDIA_ENT_FL_CONNECTOR;
    }
    private static final int MEDIA_ENT_ID_FLAG_NEXT = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_ID_FLAG_NEXT 2147483648
     * }
     */
    public static int MEDIA_ENT_ID_FLAG_NEXT() {
        return MEDIA_ENT_ID_FLAG_NEXT;
    }
    private static final int MEDIA_PAD_FL_SINK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_PAD_FL_SINK 1
     * }
     */
    public static int MEDIA_PAD_FL_SINK() {
        return MEDIA_PAD_FL_SINK;
    }
    private static final int MEDIA_PAD_FL_SOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_PAD_FL_SOURCE 2
     * }
     */
    public static int MEDIA_PAD_FL_SOURCE() {
        return MEDIA_PAD_FL_SOURCE;
    }
    private static final int MEDIA_PAD_FL_MUST_CONNECT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_PAD_FL_MUST_CONNECT 4
     * }
     */
    public static int MEDIA_PAD_FL_MUST_CONNECT() {
        return MEDIA_PAD_FL_MUST_CONNECT;
    }
    private static final int MEDIA_LNK_FL_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_ENABLED 1
     * }
     */
    public static int MEDIA_LNK_FL_ENABLED() {
        return MEDIA_LNK_FL_ENABLED;
    }
    private static final int MEDIA_LNK_FL_IMMUTABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_IMMUTABLE 2
     * }
     */
    public static int MEDIA_LNK_FL_IMMUTABLE() {
        return MEDIA_LNK_FL_IMMUTABLE;
    }
    private static final int MEDIA_LNK_FL_DYNAMIC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_DYNAMIC 4
     * }
     */
    public static int MEDIA_LNK_FL_DYNAMIC() {
        return MEDIA_LNK_FL_DYNAMIC;
    }
    private static final int MEDIA_LNK_FL_LINK_TYPE = (int)-268435456L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_LINK_TYPE -268435456
     * }
     */
    public static int MEDIA_LNK_FL_LINK_TYPE() {
        return MEDIA_LNK_FL_LINK_TYPE;
    }
    private static final int MEDIA_LNK_FL_DATA_LINK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_DATA_LINK 0
     * }
     */
    public static int MEDIA_LNK_FL_DATA_LINK() {
        return MEDIA_LNK_FL_DATA_LINK;
    }
    private static final int MEDIA_LNK_FL_INTERFACE_LINK = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_INTERFACE_LINK 268435456
     * }
     */
    public static int MEDIA_LNK_FL_INTERFACE_LINK() {
        return MEDIA_LNK_FL_INTERFACE_LINK;
    }
    private static final int MEDIA_LNK_FL_ANCILLARY_LINK = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_LNK_FL_ANCILLARY_LINK 536870912
     * }
     */
    public static int MEDIA_LNK_FL_ANCILLARY_LINK() {
        return MEDIA_LNK_FL_ANCILLARY_LINK;
    }
    private static final int MEDIA_INTF_T_DVB_FE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_FE 256
     * }
     */
    public static int MEDIA_INTF_T_DVB_FE() {
        return MEDIA_INTF_T_DVB_FE;
    }
    private static final int MEDIA_INTF_T_DVB_DEMUX = (int)257L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_DEMUX 257
     * }
     */
    public static int MEDIA_INTF_T_DVB_DEMUX() {
        return MEDIA_INTF_T_DVB_DEMUX;
    }
    private static final int MEDIA_INTF_T_DVB_DVR = (int)258L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_DVR 258
     * }
     */
    public static int MEDIA_INTF_T_DVB_DVR() {
        return MEDIA_INTF_T_DVB_DVR;
    }
    private static final int MEDIA_INTF_T_DVB_CA = (int)259L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_CA 259
     * }
     */
    public static int MEDIA_INTF_T_DVB_CA() {
        return MEDIA_INTF_T_DVB_CA;
    }
    private static final int MEDIA_INTF_T_DVB_NET = (int)260L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_NET 260
     * }
     */
    public static int MEDIA_INTF_T_DVB_NET() {
        return MEDIA_INTF_T_DVB_NET;
    }
    private static final int MEDIA_INTF_T_V4L_VIDEO = (int)512L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_VIDEO 512
     * }
     */
    public static int MEDIA_INTF_T_V4L_VIDEO() {
        return MEDIA_INTF_T_V4L_VIDEO;
    }
    private static final int MEDIA_INTF_T_V4L_VBI = (int)513L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_VBI 513
     * }
     */
    public static int MEDIA_INTF_T_V4L_VBI() {
        return MEDIA_INTF_T_V4L_VBI;
    }
    private static final int MEDIA_INTF_T_V4L_RADIO = (int)514L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_RADIO 514
     * }
     */
    public static int MEDIA_INTF_T_V4L_RADIO() {
        return MEDIA_INTF_T_V4L_RADIO;
    }
    private static final int MEDIA_INTF_T_V4L_SUBDEV = (int)515L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_SUBDEV 515
     * }
     */
    public static int MEDIA_INTF_T_V4L_SUBDEV() {
        return MEDIA_INTF_T_V4L_SUBDEV;
    }
    private static final int MEDIA_INTF_T_V4L_SWRADIO = (int)516L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_SWRADIO 516
     * }
     */
    public static int MEDIA_INTF_T_V4L_SWRADIO() {
        return MEDIA_INTF_T_V4L_SWRADIO;
    }
    private static final int MEDIA_INTF_T_V4L_TOUCH = (int)517L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_TOUCH 517
     * }
     */
    public static int MEDIA_INTF_T_V4L_TOUCH() {
        return MEDIA_INTF_T_V4L_TOUCH;
    }
    private static final int MEDIA_INTF_T_ALSA_PCM_CAPTURE = (int)768L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_PCM_CAPTURE 768
     * }
     */
    public static int MEDIA_INTF_T_ALSA_PCM_CAPTURE() {
        return MEDIA_INTF_T_ALSA_PCM_CAPTURE;
    }
    private static final int MEDIA_INTF_T_ALSA_PCM_PLAYBACK = (int)769L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_PCM_PLAYBACK 769
     * }
     */
    public static int MEDIA_INTF_T_ALSA_PCM_PLAYBACK() {
        return MEDIA_INTF_T_ALSA_PCM_PLAYBACK;
    }
    private static final int MEDIA_INTF_T_ALSA_CONTROL = (int)770L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_CONTROL 770
     * }
     */
    public static int MEDIA_INTF_T_ALSA_CONTROL() {
        return MEDIA_INTF_T_ALSA_CONTROL;
    }
    private static final long MEDIA_IOC_DEVICE_INFO = 3238034432L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_DEVICE_INFO 3238034432
     * }
     */
    public static long MEDIA_IOC_DEVICE_INFO() {
        return MEDIA_IOC_DEVICE_INFO;
    }
    private static final long MEDIA_IOC_ENUM_ENTITIES = 3238034433L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_ENUM_ENTITIES 3238034433
     * }
     */
    public static long MEDIA_IOC_ENUM_ENTITIES() {
        return MEDIA_IOC_ENUM_ENTITIES;
    }
    private static final long MEDIA_IOC_ENUM_LINKS = 3223878658L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_ENUM_LINKS 3223878658
     * }
     */
    public static long MEDIA_IOC_ENUM_LINKS() {
        return MEDIA_IOC_ENUM_LINKS;
    }
    private static final long MEDIA_IOC_SETUP_LINK = 3224665091L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_SETUP_LINK 3224665091
     * }
     */
    public static long MEDIA_IOC_SETUP_LINK() {
        return MEDIA_IOC_SETUP_LINK;
    }
    private static final long MEDIA_IOC_G_TOPOLOGY = 3225975812L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_G_TOPOLOGY 3225975812
     * }
     */
    public static long MEDIA_IOC_G_TOPOLOGY() {
        return MEDIA_IOC_G_TOPOLOGY;
    }
    private static final long MEDIA_IOC_REQUEST_ALLOC = 2147777541L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_IOC_REQUEST_ALLOC 2147777541
     * }
     */
    public static long MEDIA_IOC_REQUEST_ALLOC() {
        return MEDIA_IOC_REQUEST_ALLOC;
    }
    private static final int MEDIA_REQUEST_IOC_QUEUE = (int)31872L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_REQUEST_IOC_QUEUE 31872
     * }
     */
    public static int MEDIA_REQUEST_IOC_QUEUE() {
        return MEDIA_REQUEST_IOC_QUEUE;
    }
    private static final int MEDIA_REQUEST_IOC_REINIT = (int)31873L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_REQUEST_IOC_REINIT 31873
     * }
     */
    public static int MEDIA_REQUEST_IOC_REINIT() {
        return MEDIA_REQUEST_IOC_REINIT;
    }
    private static final int MEDIA_ENT_T_DEVNODE_UNKNOWN = (int)131071L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE_UNKNOWN 131071
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE_UNKNOWN() {
        return MEDIA_ENT_T_DEVNODE_UNKNOWN;
    }
    private static final int MEDIA_ENT_T_DEVNODE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE 65536
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE() {
        return MEDIA_ENT_T_DEVNODE;
    }
    private static final int MEDIA_ENT_T_DEVNODE_V4L = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE_V4L 65537
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE_V4L() {
        return MEDIA_ENT_T_DEVNODE_V4L;
    }
    private static final int MEDIA_ENT_T_DEVNODE_FB = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE_FB 65538
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE_FB() {
        return MEDIA_ENT_T_DEVNODE_FB;
    }
    private static final int MEDIA_ENT_T_DEVNODE_ALSA = (int)65539L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE_ALSA 65539
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE_ALSA() {
        return MEDIA_ENT_T_DEVNODE_ALSA;
    }
    private static final int MEDIA_ENT_T_DEVNODE_DVB = (int)65540L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_DEVNODE_DVB 65540
     * }
     */
    public static int MEDIA_ENT_T_DEVNODE_DVB() {
        return MEDIA_ENT_T_DEVNODE_DVB;
    }
    private static final int MEDIA_ENT_T_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_UNKNOWN 0
     * }
     */
    public static int MEDIA_ENT_T_UNKNOWN() {
        return MEDIA_ENT_T_UNKNOWN;
    }
    private static final int MEDIA_ENT_T_V4L2_VIDEO = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_VIDEO 65537
     * }
     */
    public static int MEDIA_ENT_T_V4L2_VIDEO() {
        return MEDIA_ENT_T_V4L2_VIDEO;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV 131072
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV() {
        return MEDIA_ENT_T_V4L2_SUBDEV;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV_SENSOR = (int)131073L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV_SENSOR 131073
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV_SENSOR() {
        return MEDIA_ENT_T_V4L2_SUBDEV_SENSOR;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV_FLASH = (int)131074L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV_FLASH 131074
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV_FLASH() {
        return MEDIA_ENT_T_V4L2_SUBDEV_FLASH;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV_LENS = (int)131075L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV_LENS 131075
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV_LENS() {
        return MEDIA_ENT_T_V4L2_SUBDEV_LENS;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV_DECODER = (int)131076L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV_DECODER 131076
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV_DECODER() {
        return MEDIA_ENT_T_V4L2_SUBDEV_DECODER;
    }
    private static final int MEDIA_ENT_T_V4L2_SUBDEV_TUNER = (int)131077L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_T_V4L2_SUBDEV_TUNER 131077
     * }
     */
    public static int MEDIA_ENT_T_V4L2_SUBDEV_TUNER() {
        return MEDIA_ENT_T_V4L2_SUBDEV_TUNER;
    }
    private static final int MEDIA_ENT_F_DTV_DECODER = (int)24577L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_DTV_DECODER 24577
     * }
     */
    public static int MEDIA_ENT_F_DTV_DECODER() {
        return MEDIA_ENT_F_DTV_DECODER;
    }
    private static final int MEDIA_INTF_T_ALSA_COMPRESS = (int)771L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_COMPRESS 771
     * }
     */
    public static int MEDIA_INTF_T_ALSA_COMPRESS() {
        return MEDIA_INTF_T_ALSA_COMPRESS;
    }
    private static final int MEDIA_INTF_T_ALSA_RAWMIDI = (int)772L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_RAWMIDI 772
     * }
     */
    public static int MEDIA_INTF_T_ALSA_RAWMIDI() {
        return MEDIA_INTF_T_ALSA_RAWMIDI;
    }
    private static final int MEDIA_INTF_T_ALSA_HWDEP = (int)773L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_HWDEP 773
     * }
     */
    public static int MEDIA_INTF_T_ALSA_HWDEP() {
        return MEDIA_INTF_T_ALSA_HWDEP;
    }
    private static final int MEDIA_INTF_T_ALSA_SEQUENCER = (int)774L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_SEQUENCER 774
     * }
     */
    public static int MEDIA_INTF_T_ALSA_SEQUENCER() {
        return MEDIA_INTF_T_ALSA_SEQUENCER;
    }
    private static final int MEDIA_INTF_T_ALSA_TIMER = (int)775L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_TIMER 775
     * }
     */
    public static int MEDIA_INTF_T_ALSA_TIMER() {
        return MEDIA_INTF_T_ALSA_TIMER;
    }
    private static final int MEDIA_API_VERSION = (int)256L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_API_VERSION 256
     * }
     */
    public static int MEDIA_API_VERSION() {
        return MEDIA_API_VERSION;
    }
    private static final int V4L2_SEL_FLAG_GE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_FLAG_GE 1
     * }
     */
    public static int V4L2_SEL_FLAG_GE() {
        return V4L2_SEL_FLAG_GE;
    }
    private static final int V4L2_SEL_FLAG_LE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_FLAG_LE 2
     * }
     */
    public static int V4L2_SEL_FLAG_LE() {
        return V4L2_SEL_FLAG_LE;
    }
    private static final int V4L2_SEL_FLAG_KEEP_CONFIG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_FLAG_KEEP_CONFIG 4
     * }
     */
    public static int V4L2_SEL_FLAG_KEEP_CONFIG() {
        return V4L2_SEL_FLAG_KEEP_CONFIG;
    }
    private static final int V4L2_SEL_TGT_CROP_ACTIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_CROP_ACTIVE 0
     * }
     */
    public static int V4L2_SEL_TGT_CROP_ACTIVE() {
        return V4L2_SEL_TGT_CROP_ACTIVE;
    }
    private static final int V4L2_SEL_TGT_COMPOSE_ACTIVE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_COMPOSE_ACTIVE 256
     * }
     */
    public static int V4L2_SEL_TGT_COMPOSE_ACTIVE() {
        return V4L2_SEL_TGT_COMPOSE_ACTIVE;
    }
    private static final int V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL 0
     * }
     */
    public static int V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL() {
        return V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL;
    }
    private static final int V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL 256
     * }
     */
    public static int V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL() {
        return V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL;
    }
    private static final int V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS 2
     * }
     */
    public static int V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS() {
        return V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS;
    }
    private static final int V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS = (int)258L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS 258
     * }
     */
    public static int V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS() {
        return V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS;
    }
    private static final int V4L2_SUBDEV_SEL_FLAG_SIZE_GE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_FLAG_SIZE_GE 1
     * }
     */
    public static int V4L2_SUBDEV_SEL_FLAG_SIZE_GE() {
        return V4L2_SUBDEV_SEL_FLAG_SIZE_GE;
    }
    private static final int V4L2_SUBDEV_SEL_FLAG_SIZE_LE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_FLAG_SIZE_LE 2
     * }
     */
    public static int V4L2_SUBDEV_SEL_FLAG_SIZE_LE() {
        return V4L2_SUBDEV_SEL_FLAG_SIZE_LE;
    }
    private static final int V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG 4
     * }
     */
    public static int V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG() {
        return V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int V4L2_CID_BASE = (int)9963776L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BASE 9963776
     * }
     */
    public static int V4L2_CID_BASE() {
        return V4L2_CID_BASE;
    }
    private static final int V4L2_CID_USER_BASE = (int)9963776L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_BASE 9963776
     * }
     */
    public static int V4L2_CID_USER_BASE() {
        return V4L2_CID_USER_BASE;
    }
    private static final int V4L2_CID_USER_CLASS = (int)9961473L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_CLASS 9961473
     * }
     */
    public static int V4L2_CID_USER_CLASS() {
        return V4L2_CID_USER_CLASS;
    }
    private static final int V4L2_CID_BRIGHTNESS = (int)9963776L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BRIGHTNESS 9963776
     * }
     */
    public static int V4L2_CID_BRIGHTNESS() {
        return V4L2_CID_BRIGHTNESS;
    }
    private static final int V4L2_CID_CONTRAST = (int)9963777L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_CONTRAST 9963777
     * }
     */
    public static int V4L2_CID_CONTRAST() {
        return V4L2_CID_CONTRAST;
    }
    private static final int V4L2_CID_SATURATION = (int)9963778L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_SATURATION 9963778
     * }
     */
    public static int V4L2_CID_SATURATION() {
        return V4L2_CID_SATURATION;
    }
    private static final int V4L2_CID_HUE = (int)9963779L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_HUE 9963779
     * }
     */
    public static int V4L2_CID_HUE() {
        return V4L2_CID_HUE;
    }
    private static final int V4L2_CID_AUDIO_VOLUME = (int)9963781L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_VOLUME 9963781
     * }
     */
    public static int V4L2_CID_AUDIO_VOLUME() {
        return V4L2_CID_AUDIO_VOLUME;
    }
    private static final int V4L2_CID_AUDIO_BALANCE = (int)9963782L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_BALANCE 9963782
     * }
     */
    public static int V4L2_CID_AUDIO_BALANCE() {
        return V4L2_CID_AUDIO_BALANCE;
    }
    private static final int V4L2_CID_AUDIO_BASS = (int)9963783L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_BASS 9963783
     * }
     */
    public static int V4L2_CID_AUDIO_BASS() {
        return V4L2_CID_AUDIO_BASS;
    }
    private static final int V4L2_CID_AUDIO_TREBLE = (int)9963784L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_TREBLE 9963784
     * }
     */
    public static int V4L2_CID_AUDIO_TREBLE() {
        return V4L2_CID_AUDIO_TREBLE;
    }
    private static final int V4L2_CID_AUDIO_MUTE = (int)9963785L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_MUTE 9963785
     * }
     */
    public static int V4L2_CID_AUDIO_MUTE() {
        return V4L2_CID_AUDIO_MUTE;
    }
    private static final int V4L2_CID_AUDIO_LOUDNESS = (int)9963786L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUDIO_LOUDNESS 9963786
     * }
     */
    public static int V4L2_CID_AUDIO_LOUDNESS() {
        return V4L2_CID_AUDIO_LOUDNESS;
    }
    private static final int V4L2_CID_BLACK_LEVEL = (int)9963787L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BLACK_LEVEL 9963787
     * }
     */
    public static int V4L2_CID_BLACK_LEVEL() {
        return V4L2_CID_BLACK_LEVEL;
    }
    private static final int V4L2_CID_AUTO_WHITE_BALANCE = (int)9963788L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUTO_WHITE_BALANCE 9963788
     * }
     */
    public static int V4L2_CID_AUTO_WHITE_BALANCE() {
        return V4L2_CID_AUTO_WHITE_BALANCE;
    }
    private static final int V4L2_CID_DO_WHITE_BALANCE = (int)9963789L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_DO_WHITE_BALANCE 9963789
     * }
     */
    public static int V4L2_CID_DO_WHITE_BALANCE() {
        return V4L2_CID_DO_WHITE_BALANCE;
    }
    private static final int V4L2_CID_RED_BALANCE = (int)9963790L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_RED_BALANCE 9963790
     * }
     */
    public static int V4L2_CID_RED_BALANCE() {
        return V4L2_CID_RED_BALANCE;
    }
    private static final int V4L2_CID_BLUE_BALANCE = (int)9963791L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BLUE_BALANCE 9963791
     * }
     */
    public static int V4L2_CID_BLUE_BALANCE() {
        return V4L2_CID_BLUE_BALANCE;
    }
    private static final int V4L2_CID_GAMMA = (int)9963792L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_GAMMA 9963792
     * }
     */
    public static int V4L2_CID_GAMMA() {
        return V4L2_CID_GAMMA;
    }
    private static final int V4L2_CID_WHITENESS = (int)9963792L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_WHITENESS 9963792
     * }
     */
    public static int V4L2_CID_WHITENESS() {
        return V4L2_CID_WHITENESS;
    }
    private static final int V4L2_CID_EXPOSURE = (int)9963793L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_EXPOSURE 9963793
     * }
     */
    public static int V4L2_CID_EXPOSURE() {
        return V4L2_CID_EXPOSURE;
    }
    private static final int V4L2_CID_AUTOGAIN = (int)9963794L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUTOGAIN 9963794
     * }
     */
    public static int V4L2_CID_AUTOGAIN() {
        return V4L2_CID_AUTOGAIN;
    }
    private static final int V4L2_CID_GAIN = (int)9963795L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_GAIN 9963795
     * }
     */
    public static int V4L2_CID_GAIN() {
        return V4L2_CID_GAIN;
    }
    private static final int V4L2_CID_HFLIP = (int)9963796L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_HFLIP 9963796
     * }
     */
    public static int V4L2_CID_HFLIP() {
        return V4L2_CID_HFLIP;
    }
    private static final int V4L2_CID_VFLIP = (int)9963797L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_VFLIP 9963797
     * }
     */
    public static int V4L2_CID_VFLIP() {
        return V4L2_CID_VFLIP;
    }
    private static final int V4L2_CID_POWER_LINE_FREQUENCY = (int)9963800L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_POWER_LINE_FREQUENCY 9963800
     * }
     */
    public static int V4L2_CID_POWER_LINE_FREQUENCY() {
        return V4L2_CID_POWER_LINE_FREQUENCY;
    }
    private static final int V4L2_CID_HUE_AUTO = (int)9963801L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_HUE_AUTO 9963801
     * }
     */
    public static int V4L2_CID_HUE_AUTO() {
        return V4L2_CID_HUE_AUTO;
    }
    private static final int V4L2_CID_WHITE_BALANCE_TEMPERATURE = (int)9963802L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_WHITE_BALANCE_TEMPERATURE 9963802
     * }
     */
    public static int V4L2_CID_WHITE_BALANCE_TEMPERATURE() {
        return V4L2_CID_WHITE_BALANCE_TEMPERATURE;
    }
    private static final int V4L2_CID_SHARPNESS = (int)9963803L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_SHARPNESS 9963803
     * }
     */
    public static int V4L2_CID_SHARPNESS() {
        return V4L2_CID_SHARPNESS;
    }
    private static final int V4L2_CID_BACKLIGHT_COMPENSATION = (int)9963804L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BACKLIGHT_COMPENSATION 9963804
     * }
     */
    public static int V4L2_CID_BACKLIGHT_COMPENSATION() {
        return V4L2_CID_BACKLIGHT_COMPENSATION;
    }
    private static final int V4L2_CID_CHROMA_AGC = (int)9963805L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_CHROMA_AGC 9963805
     * }
     */
    public static int V4L2_CID_CHROMA_AGC() {
        return V4L2_CID_CHROMA_AGC;
    }
    private static final int V4L2_CID_COLOR_KILLER = (int)9963806L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_COLOR_KILLER 9963806
     * }
     */
    public static int V4L2_CID_COLOR_KILLER() {
        return V4L2_CID_COLOR_KILLER;
    }
    private static final int V4L2_CID_COLORFX = (int)9963807L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_COLORFX 9963807
     * }
     */
    public static int V4L2_CID_COLORFX() {
        return V4L2_CID_COLORFX;
    }
    private static final int V4L2_CID_AUTOBRIGHTNESS = (int)9963808L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_AUTOBRIGHTNESS 9963808
     * }
     */
    public static int V4L2_CID_AUTOBRIGHTNESS() {
        return V4L2_CID_AUTOBRIGHTNESS;
    }
    private static final int V4L2_CID_BAND_STOP_FILTER = (int)9963809L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BAND_STOP_FILTER 9963809
     * }
     */
    public static int V4L2_CID_BAND_STOP_FILTER() {
        return V4L2_CID_BAND_STOP_FILTER;
    }
    private static final int V4L2_CID_ROTATE = (int)9963810L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_ROTATE 9963810
     * }
     */
    public static int V4L2_CID_ROTATE() {
        return V4L2_CID_ROTATE;
    }
    private static final int V4L2_CID_BG_COLOR = (int)9963811L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_BG_COLOR 9963811
     * }
     */
    public static int V4L2_CID_BG_COLOR() {
        return V4L2_CID_BG_COLOR;
    }
    private static final int V4L2_CID_CHROMA_GAIN = (int)9963812L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_CHROMA_GAIN 9963812
     * }
     */
    public static int V4L2_CID_CHROMA_GAIN() {
        return V4L2_CID_CHROMA_GAIN;
    }
    private static final int V4L2_CID_ILLUMINATORS_1 = (int)9963813L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_ILLUMINATORS_1 9963813
     * }
     */
    public static int V4L2_CID_ILLUMINATORS_1() {
        return V4L2_CID_ILLUMINATORS_1;
    }
    private static final int V4L2_CID_ILLUMINATORS_2 = (int)9963814L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_ILLUMINATORS_2 9963814
     * }
     */
    public static int V4L2_CID_ILLUMINATORS_2() {
        return V4L2_CID_ILLUMINATORS_2;
    }
    private static final int V4L2_CID_MIN_BUFFERS_FOR_CAPTURE = (int)9963815L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_MIN_BUFFERS_FOR_CAPTURE 9963815
     * }
     */
    public static int V4L2_CID_MIN_BUFFERS_FOR_CAPTURE() {
        return V4L2_CID_MIN_BUFFERS_FOR_CAPTURE;
    }
    private static final int V4L2_CID_MIN_BUFFERS_FOR_OUTPUT = (int)9963816L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_MIN_BUFFERS_FOR_OUTPUT 9963816
     * }
     */
    public static int V4L2_CID_MIN_BUFFERS_FOR_OUTPUT() {
        return V4L2_CID_MIN_BUFFERS_FOR_OUTPUT;
    }
    private static final int V4L2_CID_ALPHA_COMPONENT = (int)9963817L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_ALPHA_COMPONENT 9963817
     * }
     */
    public static int V4L2_CID_ALPHA_COMPONENT() {
        return V4L2_CID_ALPHA_COMPONENT;
    }
    private static final int V4L2_CID_COLORFX_CBCR = (int)9963818L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_COLORFX_CBCR 9963818
     * }
     */
    public static int V4L2_CID_COLORFX_CBCR() {
        return V4L2_CID_COLORFX_CBCR;
    }
    private static final int V4L2_CID_COLORFX_RGB = (int)9963819L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_COLORFX_RGB 9963819
     * }
     */
    public static int V4L2_CID_COLORFX_RGB() {
        return V4L2_CID_COLORFX_RGB;
    }
    private static final int V4L2_CID_LASTP1 = (int)9963820L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_LASTP1 9963820
     * }
     */
    public static int V4L2_CID_LASTP1() {
        return V4L2_CID_LASTP1;
    }
    private static final int V4L2_CID_USER_MEYE_BASE = (int)9967872L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_MEYE_BASE 9967872
     * }
     */
    public static int V4L2_CID_USER_MEYE_BASE() {
        return V4L2_CID_USER_MEYE_BASE;
    }
    private static final int V4L2_CID_USER_BTTV_BASE = (int)9967888L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_BTTV_BASE 9967888
     * }
     */
    public static int V4L2_CID_USER_BTTV_BASE() {
        return V4L2_CID_USER_BTTV_BASE;
    }
    private static final int V4L2_CID_USER_S2255_BASE = (int)9967920L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_S2255_BASE 9967920
     * }
     */
    public static int V4L2_CID_USER_S2255_BASE() {
        return V4L2_CID_USER_S2255_BASE;
    }
    private static final int V4L2_CID_USER_SI476X_BASE = (int)9967936L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_SI476X_BASE 9967936
     * }
     */
    public static int V4L2_CID_USER_SI476X_BASE() {
        return V4L2_CID_USER_SI476X_BASE;
    }
    private static final int V4L2_CID_USER_TI_VPE_BASE = (int)9967952L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_TI_VPE_BASE 9967952
     * }
     */
    public static int V4L2_CID_USER_TI_VPE_BASE() {
        return V4L2_CID_USER_TI_VPE_BASE;
    }
    private static final int V4L2_CID_USER_SAA7134_BASE = (int)9967968L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_SAA7134_BASE 9967968
     * }
     */
    public static int V4L2_CID_USER_SAA7134_BASE() {
        return V4L2_CID_USER_SAA7134_BASE;
    }
    private static final int V4L2_CID_USER_ADV7180_BASE = (int)9967984L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_ADV7180_BASE 9967984
     * }
     */
    public static int V4L2_CID_USER_ADV7180_BASE() {
        return V4L2_CID_USER_ADV7180_BASE;
    }
    private static final int V4L2_CID_USER_TC358743_BASE = (int)9968000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_TC358743_BASE 9968000
     * }
     */
    public static int V4L2_CID_USER_TC358743_BASE() {
        return V4L2_CID_USER_TC358743_BASE;
    }
    private static final int V4L2_CID_USER_MAX217X_BASE = (int)9968016L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_MAX217X_BASE 9968016
     * }
     */
    public static int V4L2_CID_USER_MAX217X_BASE() {
        return V4L2_CID_USER_MAX217X_BASE;
    }
    private static final int V4L2_CID_USER_IMX_BASE = (int)9968048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_IMX_BASE 9968048
     * }
     */
    public static int V4L2_CID_USER_IMX_BASE() {
        return V4L2_CID_USER_IMX_BASE;
    }
    private static final int V4L2_CID_USER_ATMEL_ISC_BASE = (int)9968064L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_ATMEL_ISC_BASE 9968064
     * }
     */
    public static int V4L2_CID_USER_ATMEL_ISC_BASE() {
        return V4L2_CID_USER_ATMEL_ISC_BASE;
    }
    private static final int V4L2_CID_USER_CODA_BASE = (int)9968096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_CODA_BASE 9968096
     * }
     */
    public static int V4L2_CID_USER_CODA_BASE() {
        return V4L2_CID_USER_CODA_BASE;
    }
    private static final int V4L2_CID_USER_CCS_BASE = (int)9968112L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_CCS_BASE 9968112
     * }
     */
    public static int V4L2_CID_USER_CCS_BASE() {
        return V4L2_CID_USER_CCS_BASE;
    }
    private static final int V4L2_CID_USER_ALLEGRO_BASE = (int)9968240L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_ALLEGRO_BASE 9968240
     * }
     */
    public static int V4L2_CID_USER_ALLEGRO_BASE() {
        return V4L2_CID_USER_ALLEGRO_BASE;
    }
    private static final int V4L2_CID_USER_ISL7998X_BASE = (int)9968256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_ISL7998X_BASE 9968256
     * }
     */
    public static int V4L2_CID_USER_ISL7998X_BASE() {
        return V4L2_CID_USER_ISL7998X_BASE;
    }
    private static final int V4L2_CID_USER_DW100_BASE = (int)9968272L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_DW100_BASE 9968272
     * }
     */
    public static int V4L2_CID_USER_DW100_BASE() {
        return V4L2_CID_USER_DW100_BASE;
    }
    private static final int V4L2_CID_USER_ASPEED_BASE = (int)9968288L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_USER_ASPEED_BASE 9968288
     * }
     */
    public static int V4L2_CID_USER_ASPEED_BASE() {
        return V4L2_CID_USER_ASPEED_BASE;
    }
}

