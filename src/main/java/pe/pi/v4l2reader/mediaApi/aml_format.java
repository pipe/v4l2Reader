// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct aml_format {
 *     uint32_t xstart;
 *     uint32_t ystart;
 *     uint32_t width;
 *     uint32_t height;
 *     uint32_t code;
 *     uint32_t fourcc;
 *     uint32_t nplanes;
 *     uint32_t bpp;
 * }
 * }
 */
public class aml_format {

    aml_format() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("xstart"),
        mediaAPI.C_INT.withName("ystart"),
        mediaAPI.C_INT.withName("width"),
        mediaAPI.C_INT.withName("height"),
        mediaAPI.C_INT.withName("code"),
        mediaAPI.C_INT.withName("fourcc"),
        mediaAPI.C_INT.withName("nplanes"),
        mediaAPI.C_INT.withName("bpp")
    ).withName("aml_format");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt xstart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xstart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t xstart
     * }
     */
    public static final OfInt xstart$layout() {
        return xstart$LAYOUT;
    }

    private static final long xstart$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t xstart
     * }
     */
    public static final long xstart$offset() {
        return xstart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t xstart
     * }
     */
    public static int xstart(MemorySegment struct) {
        return struct.get(xstart$LAYOUT, xstart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t xstart
     * }
     */
    public static void xstart(MemorySegment struct, int fieldValue) {
        struct.set(xstart$LAYOUT, xstart$OFFSET, fieldValue);
    }

    private static final OfInt ystart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ystart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t ystart
     * }
     */
    public static final OfInt ystart$layout() {
        return ystart$LAYOUT;
    }

    private static final long ystart$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t ystart
     * }
     */
    public static final long ystart$offset() {
        return ystart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t ystart
     * }
     */
    public static int ystart(MemorySegment struct) {
        return struct.get(ystart$LAYOUT, ystart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t ystart
     * }
     */
    public static void ystart(MemorySegment struct, int fieldValue) {
        struct.set(ystart$LAYOUT, ystart$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt code$LAYOUT = (OfInt)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static final OfInt code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static int code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static void code(MemorySegment struct, int fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final OfInt fourcc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fourcc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t fourcc
     * }
     */
    public static final OfInt fourcc$layout() {
        return fourcc$LAYOUT;
    }

    private static final long fourcc$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t fourcc
     * }
     */
    public static final long fourcc$offset() {
        return fourcc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t fourcc
     * }
     */
    public static int fourcc(MemorySegment struct) {
        return struct.get(fourcc$LAYOUT, fourcc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t fourcc
     * }
     */
    public static void fourcc(MemorySegment struct, int fieldValue) {
        struct.set(fourcc$LAYOUT, fourcc$OFFSET, fieldValue);
    }

    private static final OfInt nplanes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nplanes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t nplanes
     * }
     */
    public static final OfInt nplanes$layout() {
        return nplanes$LAYOUT;
    }

    private static final long nplanes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t nplanes
     * }
     */
    public static final long nplanes$offset() {
        return nplanes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t nplanes
     * }
     */
    public static int nplanes(MemorySegment struct) {
        return struct.get(nplanes$LAYOUT, nplanes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t nplanes
     * }
     */
    public static void nplanes(MemorySegment struct, int fieldValue) {
        struct.set(nplanes$LAYOUT, nplanes$OFFSET, fieldValue);
    }

    private static final OfInt bpp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bpp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bpp
     * }
     */
    public static final OfInt bpp$layout() {
        return bpp$LAYOUT;
    }

    private static final long bpp$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bpp
     * }
     */
    public static final long bpp$offset() {
        return bpp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bpp
     * }
     */
    public static int bpp(MemorySegment struct) {
        return struct.get(bpp$LAYOUT, bpp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bpp
     * }
     */
    public static void bpp(MemorySegment struct, int fieldValue) {
        struct.set(bpp$LAYOUT, bpp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

