// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_vbi_format {
 *     __u32 sampling_rate;
 *     __u32 offset;
 *     __u32 samples_per_line;
 *     __u32 sample_format;
 *     __s32 start[2];
 *     __u32 count[2];
 *     __u32 flags;
 *     __u32 reserved[2];
 * }
 * }
 */
public class v4l2_vbi_format {

    v4l2_vbi_format() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("sampling_rate"),
        mediaAPI.C_INT.withName("offset"),
        mediaAPI.C_INT.withName("samples_per_line"),
        mediaAPI.C_INT.withName("sample_format"),
        MemoryLayout.sequenceLayout(2, mediaAPI.C_INT).withName("start"),
        MemoryLayout.sequenceLayout(2, mediaAPI.C_INT).withName("count"),
        mediaAPI.C_INT.withName("flags"),
        MemoryLayout.sequenceLayout(2, mediaAPI.C_INT).withName("reserved")
    ).withName("v4l2_vbi_format");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sampling_rate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampling_rate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sampling_rate
     * }
     */
    public static final OfInt sampling_rate$layout() {
        return sampling_rate$LAYOUT;
    }

    private static final long sampling_rate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sampling_rate
     * }
     */
    public static final long sampling_rate$offset() {
        return sampling_rate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sampling_rate
     * }
     */
    public static int sampling_rate(MemorySegment struct) {
        return struct.get(sampling_rate$LAYOUT, sampling_rate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sampling_rate
     * }
     */
    public static void sampling_rate(MemorySegment struct, int fieldValue) {
        struct.set(sampling_rate$LAYOUT, sampling_rate$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt samples_per_line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samples_per_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 samples_per_line
     * }
     */
    public static final OfInt samples_per_line$layout() {
        return samples_per_line$LAYOUT;
    }

    private static final long samples_per_line$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 samples_per_line
     * }
     */
    public static final long samples_per_line$offset() {
        return samples_per_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 samples_per_line
     * }
     */
    public static int samples_per_line(MemorySegment struct) {
        return struct.get(samples_per_line$LAYOUT, samples_per_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 samples_per_line
     * }
     */
    public static void samples_per_line(MemorySegment struct, int fieldValue) {
        struct.set(samples_per_line$LAYOUT, samples_per_line$OFFSET, fieldValue);
    }

    private static final OfInt sample_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sample_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sample_format
     * }
     */
    public static final OfInt sample_format$layout() {
        return sample_format$LAYOUT;
    }

    private static final long sample_format$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sample_format
     * }
     */
    public static final long sample_format$offset() {
        return sample_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sample_format
     * }
     */
    public static int sample_format(MemorySegment struct) {
        return struct.get(sample_format$LAYOUT, sample_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sample_format
     * }
     */
    public static void sample_format(MemorySegment struct, int fieldValue) {
        struct.set(sample_format$LAYOUT, sample_format$OFFSET, fieldValue);
    }

    private static final SequenceLayout start$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static final SequenceLayout start$layout() {
        return start$LAYOUT;
    }

    private static final long start$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static final long start$offset() {
        return start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static MemorySegment start(MemorySegment struct) {
        return struct.asSlice(start$OFFSET, start$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static void start(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, start$OFFSET, start$LAYOUT.byteSize());
    }

    private static long[] start$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static long[] start$dimensions() {
        return start$DIMS;
    }
    private static final VarHandle start$ELEM_HANDLE = start$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static int start(MemorySegment struct, long index0) {
        return (int)start$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __s32 start[2]
     * }
     */
    public static void start(MemorySegment struct, long index0, int fieldValue) {
        start$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout count$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static final SequenceLayout count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static MemorySegment count(MemorySegment struct) {
        return struct.asSlice(count$OFFSET, count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static void count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, count$OFFSET, count$LAYOUT.byteSize());
    }

    private static long[] count$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static long[] count$dimensions() {
        return count$DIMS;
    }
    private static final VarHandle count$ELEM_HANDLE = count$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static int count(MemorySegment struct, long index0) {
        return (int)count$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 count[2]
     * }
     */
    public static void count(MemorySegment struct, long index0, int fieldValue) {
        count$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

