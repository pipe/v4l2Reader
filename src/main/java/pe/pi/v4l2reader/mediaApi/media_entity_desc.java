// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct media_entity_desc {
 *     __u32 id;
 *     char name[32];
 *     __u32 type;
 *     __u32 revision;
 *     __u32 flags;
 *     __u32 group_id;
 *     __u16 pads;
 *     __u16 links;
 *     __u32 reserved[4];
 *     union {
 *         struct {
 *             __u32 major;
 *             __u32 minor;
 *         } dev;
 *         struct {
 *             __u32 card;
 *             __u32 device;
 *             __u32 subdevice;
 *         } alsa;
 *         struct {
 *             __u32 major;
 *             __u32 minor;
 *         } v4l;
 *         struct {
 *             __u32 major;
 *             __u32 minor;
 *         } fb;
 *         int dvb;
 *         __u8 raw[184];
 *     };
 * }
 * }
 */
public class media_entity_desc {

    media_entity_desc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("id"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("name"),
        mediaAPI.C_INT.withName("type"),
        mediaAPI.C_INT.withName("revision"),
        mediaAPI.C_INT.withName("flags"),
        mediaAPI.C_INT.withName("group_id"),
        mediaAPI.C_SHORT.withName("pads"),
        mediaAPI.C_SHORT.withName("links"),
        MemoryLayout.sequenceLayout(4, mediaAPI.C_INT).withName("reserved"),
        MemoryLayout.unionLayout(
            media_entity_desc.dev.layout().withName("dev"),
            media_entity_desc.alsa.layout().withName("alsa"),
            media_entity_desc.v4l.layout().withName("v4l"),
            media_entity_desc.fb.layout().withName("fb"),
            mediaAPI.C_INT.withName("dvb"),
            MemoryLayout.sequenceLayout(184, mediaAPI.C_CHAR).withName("raw")
        ).withName("$anon$161:2")
    ).withName("media_entity_desc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt revision$LAYOUT = (OfInt)$LAYOUT.select(groupElement("revision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 revision
     * }
     */
    public static final OfInt revision$layout() {
        return revision$LAYOUT;
    }

    private static final long revision$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 revision
     * }
     */
    public static final long revision$offset() {
        return revision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 revision
     * }
     */
    public static int revision(MemorySegment struct) {
        return struct.get(revision$LAYOUT, revision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 revision
     * }
     */
    public static void revision(MemorySegment struct, int fieldValue) {
        struct.set(revision$LAYOUT, revision$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt group_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("group_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 group_id
     * }
     */
    public static final OfInt group_id$layout() {
        return group_id$LAYOUT;
    }

    private static final long group_id$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 group_id
     * }
     */
    public static final long group_id$offset() {
        return group_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 group_id
     * }
     */
    public static int group_id(MemorySegment struct) {
        return struct.get(group_id$LAYOUT, group_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 group_id
     * }
     */
    public static void group_id(MemorySegment struct, int fieldValue) {
        struct.set(group_id$LAYOUT, group_id$OFFSET, fieldValue);
    }

    private static final OfShort pads$LAYOUT = (OfShort)$LAYOUT.select(groupElement("pads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 pads
     * }
     */
    public static final OfShort pads$layout() {
        return pads$LAYOUT;
    }

    private static final long pads$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 pads
     * }
     */
    public static final long pads$offset() {
        return pads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 pads
     * }
     */
    public static short pads(MemorySegment struct) {
        return struct.get(pads$LAYOUT, pads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 pads
     * }
     */
    public static void pads(MemorySegment struct, short fieldValue) {
        struct.set(pads$LAYOUT, pads$OFFSET, fieldValue);
    }

    private static final OfShort links$LAYOUT = (OfShort)$LAYOUT.select(groupElement("links"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 links
     * }
     */
    public static final OfShort links$layout() {
        return links$LAYOUT;
    }

    private static final long links$OFFSET = 54;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 links
     * }
     */
    public static final long links$offset() {
        return links$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 links
     * }
     */
    public static short links(MemorySegment struct) {
        return struct.get(links$LAYOUT, links$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 links
     * }
     */
    public static void links(MemorySegment struct, short fieldValue) {
        struct.set(links$LAYOUT, links$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 reserved[4]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * }
     * }
     */
    public static class dev {

        dev() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            mediaAPI.C_INT.withName("major"),
            mediaAPI.C_INT.withName("minor")
        ).withName("$anon$163:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("major"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final OfInt major$layout() {
            return major$LAYOUT;
        }

        private static final long major$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final long major$offset() {
            return major$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static int major(MemorySegment struct) {
            return struct.get(major$LAYOUT, major$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static void major(MemorySegment struct, int fieldValue) {
            struct.set(major$LAYOUT, major$OFFSET, fieldValue);
        }

        private static final OfInt minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final OfInt minor$layout() {
            return minor$LAYOUT;
        }

        private static final long minor$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final long minor$offset() {
            return minor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static int minor(MemorySegment struct) {
            return struct.get(minor$LAYOUT, minor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static void minor(MemorySegment struct, int fieldValue) {
            struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout dev$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("dev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } dev
     * }
     */
    public static final GroupLayout dev$layout() {
        return dev$LAYOUT;
    }

    private static final long dev$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } dev
     * }
     */
    public static final long dev$offset() {
        return dev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } dev
     * }
     */
    public static MemorySegment dev(MemorySegment struct) {
        return struct.asSlice(dev$OFFSET, dev$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } dev
     * }
     */
    public static void dev(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dev$OFFSET, dev$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     __u32 card;
     *     __u32 device;
     *     __u32 subdevice;
     * }
     * }
     */
    public static class alsa {

        alsa() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            mediaAPI.C_INT.withName("card"),
            mediaAPI.C_INT.withName("device"),
            mediaAPI.C_INT.withName("subdevice")
        ).withName("$anon$179:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt card$LAYOUT = (OfInt)$LAYOUT.select(groupElement("card"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 card
         * }
         */
        public static final OfInt card$layout() {
            return card$LAYOUT;
        }

        private static final long card$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 card
         * }
         */
        public static final long card$offset() {
            return card$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 card
         * }
         */
        public static int card(MemorySegment struct) {
            return struct.get(card$LAYOUT, card$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 card
         * }
         */
        public static void card(MemorySegment struct, int fieldValue) {
            struct.set(card$LAYOUT, card$OFFSET, fieldValue);
        }

        private static final OfInt device$LAYOUT = (OfInt)$LAYOUT.select(groupElement("device"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 device
         * }
         */
        public static final OfInt device$layout() {
            return device$LAYOUT;
        }

        private static final long device$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 device
         * }
         */
        public static final long device$offset() {
            return device$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 device
         * }
         */
        public static int device(MemorySegment struct) {
            return struct.get(device$LAYOUT, device$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 device
         * }
         */
        public static void device(MemorySegment struct, int fieldValue) {
            struct.set(device$LAYOUT, device$OFFSET, fieldValue);
        }

        private static final OfInt subdevice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subdevice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 subdevice
         * }
         */
        public static final OfInt subdevice$layout() {
            return subdevice$LAYOUT;
        }

        private static final long subdevice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 subdevice
         * }
         */
        public static final long subdevice$offset() {
            return subdevice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 subdevice
         * }
         */
        public static int subdevice(MemorySegment struct) {
            return struct.get(subdevice$LAYOUT, subdevice$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 subdevice
         * }
         */
        public static void subdevice(MemorySegment struct, int fieldValue) {
            struct.set(subdevice$LAYOUT, subdevice$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout alsa$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("alsa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 card;
     *     __u32 device;
     *     __u32 subdevice;
     * } alsa
     * }
     */
    public static final GroupLayout alsa$layout() {
        return alsa$LAYOUT;
    }

    private static final long alsa$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 card;
     *     __u32 device;
     *     __u32 subdevice;
     * } alsa
     * }
     */
    public static final long alsa$offset() {
        return alsa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 card;
     *     __u32 device;
     *     __u32 subdevice;
     * } alsa
     * }
     */
    public static MemorySegment alsa(MemorySegment struct) {
        return struct.asSlice(alsa$OFFSET, alsa$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 card;
     *     __u32 device;
     *     __u32 subdevice;
     * } alsa
     * }
     */
    public static void alsa(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, alsa$OFFSET, alsa$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * }
     * }
     */
    public static class v4l {

        v4l() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            mediaAPI.C_INT.withName("major"),
            mediaAPI.C_INT.withName("minor")
        ).withName("$anon$190:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("major"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final OfInt major$layout() {
            return major$LAYOUT;
        }

        private static final long major$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final long major$offset() {
            return major$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static int major(MemorySegment struct) {
            return struct.get(major$LAYOUT, major$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static void major(MemorySegment struct, int fieldValue) {
            struct.set(major$LAYOUT, major$OFFSET, fieldValue);
        }

        private static final OfInt minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final OfInt minor$layout() {
            return minor$LAYOUT;
        }

        private static final long minor$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final long minor$offset() {
            return minor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static int minor(MemorySegment struct) {
            return struct.get(minor$LAYOUT, minor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static void minor(MemorySegment struct, int fieldValue) {
            struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout v4l$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("v4l"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } v4l
     * }
     */
    public static final GroupLayout v4l$layout() {
        return v4l$LAYOUT;
    }

    private static final long v4l$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } v4l
     * }
     */
    public static final long v4l$offset() {
        return v4l$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } v4l
     * }
     */
    public static MemorySegment v4l(MemorySegment struct) {
        return struct.asSlice(v4l$OFFSET, v4l$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } v4l
     * }
     */
    public static void v4l(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, v4l$OFFSET, v4l$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * }
     * }
     */
    public static class fb {

        fb() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            mediaAPI.C_INT.withName("major"),
            mediaAPI.C_INT.withName("minor")
        ).withName("$anon$194:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("major"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final OfInt major$layout() {
            return major$LAYOUT;
        }

        private static final long major$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static final long major$offset() {
            return major$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static int major(MemorySegment struct) {
            return struct.get(major$LAYOUT, major$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 major
         * }
         */
        public static void major(MemorySegment struct, int fieldValue) {
            struct.set(major$LAYOUT, major$OFFSET, fieldValue);
        }

        private static final OfInt minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final OfInt minor$layout() {
            return minor$LAYOUT;
        }

        private static final long minor$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static final long minor$offset() {
            return minor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static int minor(MemorySegment struct) {
            return struct.get(minor$LAYOUT, minor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u32 minor
         * }
         */
        public static void minor(MemorySegment struct, int fieldValue) {
            struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout fb$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("fb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } fb
     * }
     */
    public static final GroupLayout fb$layout() {
        return fb$LAYOUT;
    }

    private static final long fb$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } fb
     * }
     */
    public static final long fb$offset() {
        return fb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } fb
     * }
     */
    public static MemorySegment fb(MemorySegment struct) {
        return struct.asSlice(fb$OFFSET, fb$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     __u32 major;
     *     __u32 minor;
     * } fb
     * }
     */
    public static void fb(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fb$OFFSET, fb$LAYOUT.byteSize());
    }

    private static final OfInt dvb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("dvb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dvb
     * }
     */
    public static final OfInt dvb$layout() {
        return dvb$LAYOUT;
    }

    private static final long dvb$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dvb
     * }
     */
    public static final long dvb$offset() {
        return dvb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dvb
     * }
     */
    public static int dvb(MemorySegment struct) {
        return struct.get(dvb$LAYOUT, dvb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dvb
     * }
     */
    public static void dvb(MemorySegment struct, int fieldValue) {
        struct.set(dvb$LAYOUT, dvb$OFFSET, fieldValue);
    }

    private static final SequenceLayout raw$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$161:2"), groupElement("raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static final SequenceLayout raw$layout() {
        return raw$LAYOUT;
    }

    private static final long raw$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static final long raw$offset() {
        return raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static MemorySegment raw(MemorySegment struct) {
        return struct.asSlice(raw$OFFSET, raw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static void raw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, raw$OFFSET, raw$LAYOUT.byteSize());
    }

    private static long[] raw$DIMS = { 184 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static long[] raw$dimensions() {
        return raw$DIMS;
    }
    private static final VarHandle raw$ELEM_HANDLE = raw$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static byte raw(MemorySegment struct, long index0) {
        return (byte)raw$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 raw[184]
     * }
     */
    public static void raw(MemorySegment struct, long index0, byte fieldValue) {
        raw$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

