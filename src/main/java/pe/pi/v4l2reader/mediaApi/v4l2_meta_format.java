// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_meta_format {
 *     __u32 dataformat;
 *     __u32 buffersize;
 * }
 * }
 */
public class v4l2_meta_format {

    v4l2_meta_format() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.align(mediaAPI.C_INT, 1).withName("dataformat"),
        mediaAPI.align(mediaAPI.C_INT, 1).withName("buffersize")
    ).withName("v4l2_meta_format");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dataformat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dataformat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 dataformat
     * }
     */
    public static final OfInt dataformat$layout() {
        return dataformat$LAYOUT;
    }

    private static final long dataformat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 dataformat
     * }
     */
    public static final long dataformat$offset() {
        return dataformat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 dataformat
     * }
     */
    public static int dataformat(MemorySegment struct) {
        return struct.get(dataformat$LAYOUT, dataformat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 dataformat
     * }
     */
    public static void dataformat(MemorySegment struct, int fieldValue) {
        struct.set(dataformat$LAYOUT, dataformat$OFFSET, fieldValue);
    }

    private static final OfInt buffersize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffersize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 buffersize
     * }
     */
    public static final OfInt buffersize$layout() {
        return buffersize$LAYOUT;
    }

    private static final long buffersize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 buffersize
     * }
     */
    public static final long buffersize$offset() {
        return buffersize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 buffersize
     * }
     */
    public static int buffersize(MemorySegment struct) {
        return struct.get(buffersize$LAYOUT, buffersize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 buffersize
     * }
     */
    public static void buffersize(MemorySegment struct, int fieldValue) {
        struct.set(buffersize$LAYOUT, buffersize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

