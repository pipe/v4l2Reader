// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_sliced_vbi_format {
 *     __u16 service_set;
 *     __u16 service_lines[2][24];
 *     __u32 io_size;
 *     __u32 reserved[2];
 * }
 * }
 */
public class v4l2_sliced_vbi_format {

    v4l2_sliced_vbi_format() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_SHORT.withName("service_set"),
        MemoryLayout.sequenceLayout(2, MemoryLayout.sequenceLayout(24, mediaAPI.C_SHORT)).withName("service_lines"),
        MemoryLayout.paddingLayout(2),
        mediaAPI.C_INT.withName("io_size"),
        MemoryLayout.sequenceLayout(2, mediaAPI.C_INT).withName("reserved")
    ).withName("v4l2_sliced_vbi_format");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort service_set$LAYOUT = (OfShort)$LAYOUT.select(groupElement("service_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 service_set
     * }
     */
    public static final OfShort service_set$layout() {
        return service_set$LAYOUT;
    }

    private static final long service_set$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 service_set
     * }
     */
    public static final long service_set$offset() {
        return service_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 service_set
     * }
     */
    public static short service_set(MemorySegment struct) {
        return struct.get(service_set$LAYOUT, service_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 service_set
     * }
     */
    public static void service_set(MemorySegment struct, short fieldValue) {
        struct.set(service_set$LAYOUT, service_set$OFFSET, fieldValue);
    }

    private static final SequenceLayout service_lines$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("service_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static final SequenceLayout service_lines$layout() {
        return service_lines$LAYOUT;
    }

    private static final long service_lines$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static final long service_lines$offset() {
        return service_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static MemorySegment service_lines(MemorySegment struct) {
        return struct.asSlice(service_lines$OFFSET, service_lines$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static void service_lines(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, service_lines$OFFSET, service_lines$LAYOUT.byteSize());
    }

    private static long[] service_lines$DIMS = { 2, 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static long[] service_lines$dimensions() {
        return service_lines$DIMS;
    }
    private static final VarHandle service_lines$ELEM_HANDLE = service_lines$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static short service_lines(MemorySegment struct, long index0, long index1) {
        return (short)service_lines$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u16 service_lines[2][24]
     * }
     */
    public static void service_lines(MemorySegment struct, long index0, long index1, short fieldValue) {
        service_lines$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final OfInt io_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("io_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 io_size
     * }
     */
    public static final OfInt io_size$layout() {
        return io_size$LAYOUT;
    }

    private static final long io_size$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 io_size
     * }
     */
    public static final long io_size$offset() {
        return io_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 io_size
     * }
     */
    public static int io_size(MemorySegment struct) {
        return struct.get(io_size$LAYOUT, io_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 io_size
     * }
     */
    public static void io_size(MemorySegment struct, int fieldValue) {
        struct.set(io_size$LAYOUT, io_size$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

