// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *);
 *     int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *);
 *     void (*pfn_cmos_alg_update)(int);
 *     void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *);
 *     void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *);
 *     void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t);
 * }
 * }
 */
public class ALG_SENSOR_EXP_FUNC_S {

    ALG_SENSOR_EXP_FUNC_S() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_POINTER.withName("pfn_cmos_fps_set"),
        mediaAPI.C_POINTER.withName("pfn_cmos_get_alg_default"),
        mediaAPI.C_POINTER.withName("pfn_cmos_alg_update"),
        mediaAPI.C_POINTER.withName("pfn_cmos_again_calc_table"),
        mediaAPI.C_POINTER.withName("pfn_cmos_dgain_calc_table"),
        mediaAPI.C_POINTER.withName("pfn_cmos_inttime_calc_table")
    ).withName("$anon$91:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static class pfn_cmos_fps_set {

        pfn_cmos_fps_set() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, float _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_FLOAT,
            mediaAPI.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_fps_set.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_fps_set.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, float _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_fps_set$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_fps_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static final AddressLayout pfn_cmos_fps_set$layout() {
        return pfn_cmos_fps_set$LAYOUT;
    }

    private static final long pfn_cmos_fps_set$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static final long pfn_cmos_fps_set$offset() {
        return pfn_cmos_fps_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static MemorySegment pfn_cmos_fps_set(MemorySegment struct) {
        return struct.get(pfn_cmos_fps_set$LAYOUT, pfn_cmos_fps_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_fps_set)(int, float, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static void pfn_cmos_fps_set(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_fps_set$LAYOUT, pfn_cmos_fps_set$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static class pfn_cmos_get_alg_default {

        pfn_cmos_get_alg_default() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(int _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_get_alg_default.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_get_alg_default.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_get_alg_default$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_get_alg_default"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static final AddressLayout pfn_cmos_get_alg_default$layout() {
        return pfn_cmos_get_alg_default$LAYOUT;
    }

    private static final long pfn_cmos_get_alg_default$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static final long pfn_cmos_get_alg_default$offset() {
        return pfn_cmos_get_alg_default$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static MemorySegment pfn_cmos_get_alg_default(MemorySegment struct) {
        return struct.get(pfn_cmos_get_alg_default$LAYOUT, pfn_cmos_get_alg_default$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*pfn_cmos_get_alg_default)(int, ALG_SENSOR_DEFAULT_S *)
     * }
     */
    public static void pfn_cmos_get_alg_default(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_get_alg_default$LAYOUT, pfn_cmos_get_alg_default$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_cmos_alg_update)(int)
     * }
     */
    public static class pfn_cmos_alg_update {

        pfn_cmos_alg_update() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_alg_update.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_alg_update.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_alg_update$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_alg_update"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_alg_update)(int)
     * }
     */
    public static final AddressLayout pfn_cmos_alg_update$layout() {
        return pfn_cmos_alg_update$LAYOUT;
    }

    private static final long pfn_cmos_alg_update$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_alg_update)(int)
     * }
     */
    public static final long pfn_cmos_alg_update$offset() {
        return pfn_cmos_alg_update$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_alg_update)(int)
     * }
     */
    public static MemorySegment pfn_cmos_alg_update(MemorySegment struct) {
        return struct.get(pfn_cmos_alg_update$LAYOUT, pfn_cmos_alg_update$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_alg_update)(int)
     * }
     */
    public static void pfn_cmos_alg_update(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_alg_update$LAYOUT, pfn_cmos_alg_update$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static class pfn_cmos_again_calc_table {

        pfn_cmos_again_calc_table() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_again_calc_table.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_again_calc_table.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_again_calc_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_again_calc_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static final AddressLayout pfn_cmos_again_calc_table$layout() {
        return pfn_cmos_again_calc_table$LAYOUT;
    }

    private static final long pfn_cmos_again_calc_table$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static final long pfn_cmos_again_calc_table$offset() {
        return pfn_cmos_again_calc_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static MemorySegment pfn_cmos_again_calc_table(MemorySegment struct) {
        return struct.get(pfn_cmos_again_calc_table$LAYOUT, pfn_cmos_again_calc_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_again_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static void pfn_cmos_again_calc_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_again_calc_table$LAYOUT, pfn_cmos_again_calc_table$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static class pfn_cmos_dgain_calc_table {

        pfn_cmos_dgain_calc_table() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_dgain_calc_table.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_dgain_calc_table.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_dgain_calc_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_dgain_calc_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static final AddressLayout pfn_cmos_dgain_calc_table$layout() {
        return pfn_cmos_dgain_calc_table$LAYOUT;
    }

    private static final long pfn_cmos_dgain_calc_table$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static final long pfn_cmos_dgain_calc_table$offset() {
        return pfn_cmos_dgain_calc_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static MemorySegment pfn_cmos_dgain_calc_table(MemorySegment struct) {
        return struct.get(pfn_cmos_dgain_calc_table$LAYOUT, pfn_cmos_dgain_calc_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_dgain_calc_table)(int, uint32_t *, uint32_t *)
     * }
     */
    public static void pfn_cmos_dgain_calc_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_dgain_calc_table$LAYOUT, pfn_cmos_dgain_calc_table$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t)
     * }
     */
    public static class pfn_cmos_inttime_calc_table {

        pfn_cmos_inttime_calc_table() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, int _x1, int _x2, int _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_cmos_inttime_calc_table.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_cmos_inttime_calc_table.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, int _x1, int _x2, int _x3, int _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_cmos_inttime_calc_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_cmos_inttime_calc_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t)
     * }
     */
    public static final AddressLayout pfn_cmos_inttime_calc_table$layout() {
        return pfn_cmos_inttime_calc_table$LAYOUT;
    }

    private static final long pfn_cmos_inttime_calc_table$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t)
     * }
     */
    public static final long pfn_cmos_inttime_calc_table$offset() {
        return pfn_cmos_inttime_calc_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t)
     * }
     */
    public static MemorySegment pfn_cmos_inttime_calc_table(MemorySegment struct) {
        return struct.get(pfn_cmos_inttime_calc_table$LAYOUT, pfn_cmos_inttime_calc_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_cmos_inttime_calc_table)(int, uint32_t, uint32_t, uint32_t, uint32_t)
     * }
     */
    public static void pfn_cmos_inttime_calc_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_cmos_inttime_calc_table$LAYOUT, pfn_cmos_inttime_calc_table$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

