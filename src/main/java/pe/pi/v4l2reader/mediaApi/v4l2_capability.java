// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_capability {
 *     __u8 driver[16];
 *     __u8 card[32];
 *     __u8 bus_info[32];
 *     __u32 version;
 *     __u32 capabilities;
 *     __u32 device_caps;
 *     __u32 reserved[3];
 * }
 * }
 */
public class v4l2_capability {

    v4l2_capability() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, mediaAPI.C_CHAR).withName("driver"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("card"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("bus_info"),
        mediaAPI.C_INT.withName("version"),
        mediaAPI.C_INT.withName("capabilities"),
        mediaAPI.C_INT.withName("device_caps"),
        MemoryLayout.sequenceLayout(3, mediaAPI.C_INT).withName("reserved")
    ).withName("v4l2_capability");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout driver$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("driver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static final SequenceLayout driver$layout() {
        return driver$LAYOUT;
    }

    private static final long driver$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static final long driver$offset() {
        return driver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static MemorySegment driver(MemorySegment struct) {
        return struct.asSlice(driver$OFFSET, driver$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static void driver(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, driver$OFFSET, driver$LAYOUT.byteSize());
    }

    private static long[] driver$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static long[] driver$dimensions() {
        return driver$DIMS;
    }
    private static final VarHandle driver$ELEM_HANDLE = driver$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static byte driver(MemorySegment struct, long index0) {
        return (byte)driver$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 driver[16]
     * }
     */
    public static void driver(MemorySegment struct, long index0, byte fieldValue) {
        driver$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout card$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("card"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static final SequenceLayout card$layout() {
        return card$LAYOUT;
    }

    private static final long card$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static final long card$offset() {
        return card$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static MemorySegment card(MemorySegment struct) {
        return struct.asSlice(card$OFFSET, card$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static void card(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, card$OFFSET, card$LAYOUT.byteSize());
    }

    private static long[] card$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static long[] card$dimensions() {
        return card$DIMS;
    }
    private static final VarHandle card$ELEM_HANDLE = card$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static byte card(MemorySegment struct, long index0) {
        return (byte)card$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 card[32]
     * }
     */
    public static void card(MemorySegment struct, long index0, byte fieldValue) {
        card$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout bus_info$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bus_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static final SequenceLayout bus_info$layout() {
        return bus_info$LAYOUT;
    }

    private static final long bus_info$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static final long bus_info$offset() {
        return bus_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static MemorySegment bus_info(MemorySegment struct) {
        return struct.asSlice(bus_info$OFFSET, bus_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static void bus_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bus_info$OFFSET, bus_info$LAYOUT.byteSize());
    }

    private static long[] bus_info$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static long[] bus_info$dimensions() {
        return bus_info$DIMS;
    }
    private static final VarHandle bus_info$ELEM_HANDLE = bus_info$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static byte bus_info(MemorySegment struct, long index0) {
        return (byte)bus_info$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 bus_info[32]
     * }
     */
    public static void bus_info(MemorySegment struct, long index0, byte fieldValue) {
        bus_info$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt capabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 capabilities
     * }
     */
    public static final OfInt capabilities$layout() {
        return capabilities$LAYOUT;
    }

    private static final long capabilities$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 capabilities
     * }
     */
    public static final long capabilities$offset() {
        return capabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 capabilities
     * }
     */
    public static int capabilities(MemorySegment struct) {
        return struct.get(capabilities$LAYOUT, capabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 capabilities
     * }
     */
    public static void capabilities(MemorySegment struct, int fieldValue) {
        struct.set(capabilities$LAYOUT, capabilities$OFFSET, fieldValue);
    }

    private static final OfInt device_caps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("device_caps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 device_caps
     * }
     */
    public static final OfInt device_caps$layout() {
        return device_caps$LAYOUT;
    }

    private static final long device_caps$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 device_caps
     * }
     */
    public static final long device_caps$offset() {
        return device_caps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 device_caps
     * }
     */
    public static int device_caps(MemorySegment struct) {
        return struct.get(device_caps$LAYOUT, device_caps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 device_caps
     * }
     */
    public static void device_caps(MemorySegment struct, int fieldValue) {
        struct.set(device_caps$LAYOUT, device_caps$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 reserved[3]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

