// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct media_entity {
 *     struct media_device *media;
 *     struct media_entity_desc info;
 *     struct media_pad *pads;
 *     struct media_link *links;
 *     unsigned int max_links;
 *     unsigned int num_links;
 *     char devname[32];
 *     int fd;
 * }
 * }
 */
public class media_entity {

    media_entity() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_POINTER.withName("media"),
        media_entity_desc.layout().withName("info"),
        mediaAPI.C_POINTER.withName("pads"),
        mediaAPI.C_POINTER.withName("links"),
        mediaAPI.C_INT.withName("max_links"),
        mediaAPI.C_INT.withName("num_links"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("devname"),
        mediaAPI.C_INT.withName("fd"),
        MemoryLayout.paddingLayout(4)
    ).withName("media_entity");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout media$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("media"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_device *media
     * }
     */
    public static final AddressLayout media$layout() {
        return media$LAYOUT;
    }

    private static final long media$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_device *media
     * }
     */
    public static final long media$offset() {
        return media$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_device *media
     * }
     */
    public static MemorySegment media(MemorySegment struct) {
        return struct.get(media$LAYOUT, media$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_device *media
     * }
     */
    public static void media(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(media$LAYOUT, media$OFFSET, fieldValue);
    }

    private static final GroupLayout info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity_desc info
     * }
     */
    public static final GroupLayout info$layout() {
        return info$LAYOUT;
    }

    private static final long info$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity_desc info
     * }
     */
    public static final long info$offset() {
        return info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity_desc info
     * }
     */
    public static MemorySegment info(MemorySegment struct) {
        return struct.asSlice(info$OFFSET, info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity_desc info
     * }
     */
    public static void info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, info$OFFSET, info$LAYOUT.byteSize());
    }

    private static final AddressLayout pads$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_pad *pads
     * }
     */
    public static final AddressLayout pads$layout() {
        return pads$LAYOUT;
    }

    private static final long pads$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_pad *pads
     * }
     */
    public static final long pads$offset() {
        return pads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_pad *pads
     * }
     */
    public static MemorySegment pads(MemorySegment struct) {
        return struct.get(pads$LAYOUT, pads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_pad *pads
     * }
     */
    public static void pads(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pads$LAYOUT, pads$OFFSET, fieldValue);
    }

    private static final AddressLayout links$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("links"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_link *links
     * }
     */
    public static final AddressLayout links$layout() {
        return links$LAYOUT;
    }

    private static final long links$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_link *links
     * }
     */
    public static final long links$offset() {
        return links$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_link *links
     * }
     */
    public static MemorySegment links(MemorySegment struct) {
        return struct.get(links$LAYOUT, links$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_link *links
     * }
     */
    public static void links(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(links$LAYOUT, links$OFFSET, fieldValue);
    }

    private static final OfInt max_links$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_links"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int max_links
     * }
     */
    public static final OfInt max_links$layout() {
        return max_links$LAYOUT;
    }

    private static final long max_links$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int max_links
     * }
     */
    public static final long max_links$offset() {
        return max_links$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int max_links
     * }
     */
    public static int max_links(MemorySegment struct) {
        return struct.get(max_links$LAYOUT, max_links$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int max_links
     * }
     */
    public static void max_links(MemorySegment struct, int fieldValue) {
        struct.set(max_links$LAYOUT, max_links$OFFSET, fieldValue);
    }

    private static final OfInt num_links$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_links"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int num_links
     * }
     */
    public static final OfInt num_links$layout() {
        return num_links$LAYOUT;
    }

    private static final long num_links$OFFSET = 284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int num_links
     * }
     */
    public static final long num_links$offset() {
        return num_links$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int num_links
     * }
     */
    public static int num_links(MemorySegment struct) {
        return struct.get(num_links$LAYOUT, num_links$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int num_links
     * }
     */
    public static void num_links(MemorySegment struct, int fieldValue) {
        struct.set(num_links$LAYOUT, num_links$OFFSET, fieldValue);
    }

    private static final SequenceLayout devname$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("devname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static final SequenceLayout devname$layout() {
        return devname$LAYOUT;
    }

    private static final long devname$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static final long devname$offset() {
        return devname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static MemorySegment devname(MemorySegment struct) {
        return struct.asSlice(devname$OFFSET, devname$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static void devname(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, devname$OFFSET, devname$LAYOUT.byteSize());
    }

    private static long[] devname$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static long[] devname$dimensions() {
        return devname$DIMS;
    }
    private static final VarHandle devname$ELEM_HANDLE = devname$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static byte devname(MemorySegment struct, long index0) {
        return (byte)devname$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char devname[32]
     * }
     */
    public static void devname(MemorySegment struct, long index0, byte fieldValue) {
        devname$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

