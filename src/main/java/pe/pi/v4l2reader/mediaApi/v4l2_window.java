// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_window {
 *     struct v4l2_rect w;
 *     __u32 field;
 *     __u32 chromakey;
 *     struct v4l2_clip *clips;
 *     __u32 clipcount;
 *     void *bitmap;
 *     __u8 global_alpha;
 * }
 * }
 */
public class v4l2_window {

    v4l2_window() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        v4l2_rect.layout().withName("w"),
        mediaAPI.C_INT.withName("field"),
        mediaAPI.C_INT.withName("chromakey"),
        mediaAPI.C_POINTER.withName("clips"),
        mediaAPI.C_INT.withName("clipcount"),
        MemoryLayout.paddingLayout(4),
        mediaAPI.C_POINTER.withName("bitmap"),
        mediaAPI.C_CHAR.withName("global_alpha"),
        MemoryLayout.paddingLayout(7)
    ).withName("v4l2_window");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout w$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct v4l2_rect w
     * }
     */
    public static final GroupLayout w$layout() {
        return w$LAYOUT;
    }

    private static final long w$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct v4l2_rect w
     * }
     */
    public static final long w$offset() {
        return w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct v4l2_rect w
     * }
     */
    public static MemorySegment w(MemorySegment struct) {
        return struct.asSlice(w$OFFSET, w$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct v4l2_rect w
     * }
     */
    public static void w(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, w$OFFSET, w$LAYOUT.byteSize());
    }

    private static final OfInt field$LAYOUT = (OfInt)$LAYOUT.select(groupElement("field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final OfInt field$layout() {
        return field$LAYOUT;
    }

    private static final long field$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final long field$offset() {
        return field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static int field(MemorySegment struct) {
        return struct.get(field$LAYOUT, field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static void field(MemorySegment struct, int fieldValue) {
        struct.set(field$LAYOUT, field$OFFSET, fieldValue);
    }

    private static final OfInt chromakey$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chromakey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 chromakey
     * }
     */
    public static final OfInt chromakey$layout() {
        return chromakey$LAYOUT;
    }

    private static final long chromakey$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 chromakey
     * }
     */
    public static final long chromakey$offset() {
        return chromakey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 chromakey
     * }
     */
    public static int chromakey(MemorySegment struct) {
        return struct.get(chromakey$LAYOUT, chromakey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 chromakey
     * }
     */
    public static void chromakey(MemorySegment struct, int fieldValue) {
        struct.set(chromakey$LAYOUT, chromakey$OFFSET, fieldValue);
    }

    private static final AddressLayout clips$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clips"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct v4l2_clip *clips
     * }
     */
    public static final AddressLayout clips$layout() {
        return clips$LAYOUT;
    }

    private static final long clips$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct v4l2_clip *clips
     * }
     */
    public static final long clips$offset() {
        return clips$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct v4l2_clip *clips
     * }
     */
    public static MemorySegment clips(MemorySegment struct) {
        return struct.get(clips$LAYOUT, clips$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct v4l2_clip *clips
     * }
     */
    public static void clips(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clips$LAYOUT, clips$OFFSET, fieldValue);
    }

    private static final OfInt clipcount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clipcount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 clipcount
     * }
     */
    public static final OfInt clipcount$layout() {
        return clipcount$LAYOUT;
    }

    private static final long clipcount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 clipcount
     * }
     */
    public static final long clipcount$offset() {
        return clipcount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 clipcount
     * }
     */
    public static int clipcount(MemorySegment struct) {
        return struct.get(clipcount$LAYOUT, clipcount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 clipcount
     * }
     */
    public static void clipcount(MemorySegment struct, int fieldValue) {
        struct.set(clipcount$LAYOUT, clipcount$OFFSET, fieldValue);
    }

    private static final AddressLayout bitmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bitmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *bitmap
     * }
     */
    public static final AddressLayout bitmap$layout() {
        return bitmap$LAYOUT;
    }

    private static final long bitmap$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *bitmap
     * }
     */
    public static final long bitmap$offset() {
        return bitmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *bitmap
     * }
     */
    public static MemorySegment bitmap(MemorySegment struct) {
        return struct.get(bitmap$LAYOUT, bitmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *bitmap
     * }
     */
    public static void bitmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bitmap$LAYOUT, bitmap$OFFSET, fieldValue);
    }

    private static final OfByte global_alpha$LAYOUT = (OfByte)$LAYOUT.select(groupElement("global_alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 global_alpha
     * }
     */
    public static final OfByte global_alpha$layout() {
        return global_alpha$LAYOUT;
    }

    private static final long global_alpha$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 global_alpha
     * }
     */
    public static final long global_alpha$offset() {
        return global_alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 global_alpha
     * }
     */
    public static byte global_alpha(MemorySegment struct) {
        return struct.get(global_alpha$LAYOUT, global_alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 global_alpha
     * }
     */
    public static void global_alpha(MemorySegment struct, byte fieldValue) {
        struct.set(global_alpha$LAYOUT, global_alpha$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

