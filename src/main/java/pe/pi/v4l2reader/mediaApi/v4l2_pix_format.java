// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct v4l2_pix_format {
 *     __u32 width;
 *     __u32 height;
 *     __u32 pixelformat;
 *     __u32 field;
 *     __u32 bytesperline;
 *     __u32 sizeimage;
 *     __u32 colorspace;
 *     __u32 priv;
 *     __u32 flags;
 *     union {
 *         __u32 ycbcr_enc;
 *         __u32 hsv_enc;
 *     };
 *     __u32 quantization;
 *     __u32 xfer_func;
 * }
 * }
 */
public class v4l2_pix_format {

    v4l2_pix_format() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("width"),
        mediaAPI.C_INT.withName("height"),
        mediaAPI.C_INT.withName("pixelformat"),
        mediaAPI.C_INT.withName("field"),
        mediaAPI.C_INT.withName("bytesperline"),
        mediaAPI.C_INT.withName("sizeimage"),
        mediaAPI.C_INT.withName("colorspace"),
        mediaAPI.C_INT.withName("priv"),
        mediaAPI.C_INT.withName("flags"),
        MemoryLayout.unionLayout(
            mediaAPI.C_INT.withName("ycbcr_enc"),
            mediaAPI.C_INT.withName("hsv_enc")
        ).withName("$anon$500:2"),
        mediaAPI.C_INT.withName("quantization"),
        mediaAPI.C_INT.withName("xfer_func")
    ).withName("v4l2_pix_format");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt pixelformat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pixelformat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 pixelformat
     * }
     */
    public static final OfInt pixelformat$layout() {
        return pixelformat$LAYOUT;
    }

    private static final long pixelformat$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 pixelformat
     * }
     */
    public static final long pixelformat$offset() {
        return pixelformat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 pixelformat
     * }
     */
    public static int pixelformat(MemorySegment struct) {
        return struct.get(pixelformat$LAYOUT, pixelformat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 pixelformat
     * }
     */
    public static void pixelformat(MemorySegment struct, int fieldValue) {
        struct.set(pixelformat$LAYOUT, pixelformat$OFFSET, fieldValue);
    }

    private static final OfInt field$LAYOUT = (OfInt)$LAYOUT.select(groupElement("field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final OfInt field$layout() {
        return field$LAYOUT;
    }

    private static final long field$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static final long field$offset() {
        return field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static int field(MemorySegment struct) {
        return struct.get(field$LAYOUT, field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 field
     * }
     */
    public static void field(MemorySegment struct, int fieldValue) {
        struct.set(field$LAYOUT, field$OFFSET, fieldValue);
    }

    private static final OfInt bytesperline$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bytesperline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 bytesperline
     * }
     */
    public static final OfInt bytesperline$layout() {
        return bytesperline$LAYOUT;
    }

    private static final long bytesperline$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 bytesperline
     * }
     */
    public static final long bytesperline$offset() {
        return bytesperline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 bytesperline
     * }
     */
    public static int bytesperline(MemorySegment struct) {
        return struct.get(bytesperline$LAYOUT, bytesperline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 bytesperline
     * }
     */
    public static void bytesperline(MemorySegment struct, int fieldValue) {
        struct.set(bytesperline$LAYOUT, bytesperline$OFFSET, fieldValue);
    }

    private static final OfInt sizeimage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sizeimage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sizeimage
     * }
     */
    public static final OfInt sizeimage$layout() {
        return sizeimage$LAYOUT;
    }

    private static final long sizeimage$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sizeimage
     * }
     */
    public static final long sizeimage$offset() {
        return sizeimage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sizeimage
     * }
     */
    public static int sizeimage(MemorySegment struct) {
        return struct.get(sizeimage$LAYOUT, sizeimage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sizeimage
     * }
     */
    public static void sizeimage(MemorySegment struct, int fieldValue) {
        struct.set(sizeimage$LAYOUT, sizeimage$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt priv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 priv
     * }
     */
    public static final OfInt priv$layout() {
        return priv$LAYOUT;
    }

    private static final long priv$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 priv
     * }
     */
    public static final long priv$offset() {
        return priv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 priv
     * }
     */
    public static int priv(MemorySegment struct) {
        return struct.get(priv$LAYOUT, priv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 priv
     * }
     */
    public static void priv(MemorySegment struct, int fieldValue) {
        struct.set(priv$LAYOUT, priv$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt ycbcr_enc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$500:2"), groupElement("ycbcr_enc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 ycbcr_enc
     * }
     */
    public static final OfInt ycbcr_enc$layout() {
        return ycbcr_enc$LAYOUT;
    }

    private static final long ycbcr_enc$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 ycbcr_enc
     * }
     */
    public static final long ycbcr_enc$offset() {
        return ycbcr_enc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 ycbcr_enc
     * }
     */
    public static int ycbcr_enc(MemorySegment struct) {
        return struct.get(ycbcr_enc$LAYOUT, ycbcr_enc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 ycbcr_enc
     * }
     */
    public static void ycbcr_enc(MemorySegment struct, int fieldValue) {
        struct.set(ycbcr_enc$LAYOUT, ycbcr_enc$OFFSET, fieldValue);
    }

    private static final OfInt hsv_enc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$500:2"), groupElement("hsv_enc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 hsv_enc
     * }
     */
    public static final OfInt hsv_enc$layout() {
        return hsv_enc$LAYOUT;
    }

    private static final long hsv_enc$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 hsv_enc
     * }
     */
    public static final long hsv_enc$offset() {
        return hsv_enc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 hsv_enc
     * }
     */
    public static int hsv_enc(MemorySegment struct) {
        return struct.get(hsv_enc$LAYOUT, hsv_enc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 hsv_enc
     * }
     */
    public static void hsv_enc(MemorySegment struct, int fieldValue) {
        struct.set(hsv_enc$LAYOUT, hsv_enc$OFFSET, fieldValue);
    }

    private static final OfInt quantization$LAYOUT = (OfInt)$LAYOUT.select(groupElement("quantization"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 quantization
     * }
     */
    public static final OfInt quantization$layout() {
        return quantization$LAYOUT;
    }

    private static final long quantization$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 quantization
     * }
     */
    public static final long quantization$offset() {
        return quantization$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 quantization
     * }
     */
    public static int quantization(MemorySegment struct) {
        return struct.get(quantization$LAYOUT, quantization$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 quantization
     * }
     */
    public static void quantization(MemorySegment struct, int fieldValue) {
        struct.set(quantization$LAYOUT, quantization$OFFSET, fieldValue);
    }

    private static final OfInt xfer_func$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xfer_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 xfer_func
     * }
     */
    public static final OfInt xfer_func$layout() {
        return xfer_func$LAYOUT;
    }

    private static final long xfer_func$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 xfer_func
     * }
     */
    public static final long xfer_func$offset() {
        return xfer_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 xfer_func
     * }
     */
    public static int xfer_func(MemorySegment struct) {
        return struct.get(xfer_func$LAYOUT, xfer_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 xfer_func
     * }
     */
    public static void xfer_func(MemorySegment struct, int fieldValue) {
        struct.set(xfer_func$LAYOUT, xfer_func$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

