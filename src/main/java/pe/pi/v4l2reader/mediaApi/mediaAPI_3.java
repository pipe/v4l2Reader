// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class mediaAPI_3 {

    mediaAPI_3() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("mediaAPI"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 0
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int __GLIBC_USE_C2X_STRTOL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return __GLIBC_USE_C2X_STRTOL;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)39L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int _BITS_STDINT_LEAST_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return _BITS_STDINT_LEAST_H;
    }
    private static final int _STDIO_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return _STDIO_H;
    }
    private static final int __GNUC_VA_LIST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return __GNUC_VA_LIST;
    }
    private static final int _____fpos_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return _____fpos_t_defined;
    }
    private static final int ____mbstate_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return ____mbstate_t_defined;
    }
    private static final int _____fpos64_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return _____fpos64_t_defined;
    }
    private static final int ____FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return ____FILE_defined;
    }
    private static final int __FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return __FILE_defined;
    }
    private static final int __struct_FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return __struct_FILE_defined;
    }
    private static final int _IO_EOF_SEEN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return _IO_EOF_SEEN;
    }
    private static final int _IO_ERR_SEEN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return _IO_ERR_SEEN;
    }
    private static final int _IO_USER_LOCK = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return _IO_USER_LOCK;
    }
    private static final int __cookie_io_functions_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __cookie_io_functions_t_defined 1
     * }
     */
    public static int __cookie_io_functions_t_defined() {
        return __cookie_io_functions_t_defined;
    }
    private static final int _IOFBF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return _IOFBF;
    }
    private static final int _IOLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return _IOLBF;
    }
    private static final int _IONBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return _IONBF;
    }
    private static final int BUFSIZ = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return BUFSIZ;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int L_tmpnam = (int)20L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return L_tmpnam;
    }
    private static final int TMP_MAX = (int)238328L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int _BITS_STDIO_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return _BITS_STDIO_LIM_H;
    }
    private static final int FILENAME_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return FILENAME_MAX;
    }
    private static final int L_ctermid = (int)9L;
    /**
     * {@snippet lang=c :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return L_ctermid;
    }
    private static final int FOPEN_MAX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return FOPEN_MAX;
    }
    private static final int __HAVE_FLOAT128 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128 1
     * }
     */
    public static int __HAVE_FLOAT128() {
        return __HAVE_FLOAT128;
    }
    private static final int __HAVE_DISTINCT_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return __HAVE_DISTINCT_FLOAT128;
    }
    private static final int __HAVE_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return __HAVE_FLOAT16;
    }
    private static final int __HAVE_FLOAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return __HAVE_FLOAT32;
    }
    private static final int __HAVE_FLOAT64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return __HAVE_FLOAT64;
    }
    private static final int __HAVE_FLOAT32X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return __HAVE_FLOAT32X;
    }
    private static final int __HAVE_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return __HAVE_FLOAT128X;
    }
    private static final int __HAVE_DISTINCT_FLOAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return __HAVE_DISTINCT_FLOAT32;
    }
    private static final int __HAVE_DISTINCT_FLOAT64 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return __HAVE_DISTINCT_FLOAT64;
    }
    private static final int __HAVE_DISTINCT_FLOAT32X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return __HAVE_DISTINCT_FLOAT32X;
    }
    private static final int __HAVE_DISTINCT_FLOAT64X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return __HAVE_DISTINCT_FLOAT64X;
    }
    private static final int __HAVE_FLOATN_NOT_TYPEDEF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return __HAVE_FLOATN_NOT_TYPEDEF;
    }
    private static final int _STRING_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRING_H 1
     * }
     */
    public static int _STRING_H() {
        return _STRING_H;
    }
    private static final int _BITS_TYPES_LOCALE_T_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES_LOCALE_T_H() {
        return _BITS_TYPES_LOCALE_T_H;
    }
    private static final int _BITS_TYPES___LOCALE_T_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES___LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES___LOCALE_T_H() {
        return _BITS_TYPES___LOCALE_T_H;
    }
    private static final int _STRINGS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRINGS_H 1
     * }
     */
    public static int _STRINGS_H() {
        return _STRINGS_H;
    }
    private static final int _IOC_NRBITS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NRBITS 8
     * }
     */
    public static int _IOC_NRBITS() {
        return _IOC_NRBITS;
    }
    private static final int _IOC_TYPEBITS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _IOC_TYPEBITS 8
     * }
     */
    public static int _IOC_TYPEBITS() {
        return _IOC_TYPEBITS;
    }
    private static final int _IOC_SIZEBITS = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _IOC_SIZEBITS 14
     * }
     */
    public static int _IOC_SIZEBITS() {
        return _IOC_SIZEBITS;
    }
    private static final int _IOC_DIRBITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IOC_DIRBITS 2
     * }
     */
    public static int _IOC_DIRBITS() {
        return _IOC_DIRBITS;
    }
    private static final int _IOC_NRSHIFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NRSHIFT 0
     * }
     */
    public static int _IOC_NRSHIFT() {
        return _IOC_NRSHIFT;
    }
    private static final int __BITS_PER_LONG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __BITS_PER_LONG 64
     * }
     */
    public static int __BITS_PER_LONG() {
        return __BITS_PER_LONG;
    }
    private static final int MEDIA_ENT_F_BASE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_BASE 0
     * }
     */
    public static int MEDIA_ENT_F_BASE() {
        return MEDIA_ENT_F_BASE;
    }
    private static final int MEDIA_ENT_F_OLD_BASE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_OLD_BASE 65536
     * }
     */
    public static int MEDIA_ENT_F_OLD_BASE() {
        return MEDIA_ENT_F_OLD_BASE;
    }
    private static final int MEDIA_ENT_F_OLD_SUBDEV_BASE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_F_OLD_SUBDEV_BASE 131072
     * }
     */
    public static int MEDIA_ENT_F_OLD_SUBDEV_BASE() {
        return MEDIA_ENT_F_OLD_SUBDEV_BASE;
    }
    private static final int MEDIA_INTF_T_DVB_BASE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_DVB_BASE 256
     * }
     */
    public static int MEDIA_INTF_T_DVB_BASE() {
        return MEDIA_INTF_T_DVB_BASE;
    }
    private static final int MEDIA_INTF_T_V4L_BASE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_V4L_BASE 512
     * }
     */
    public static int MEDIA_INTF_T_V4L_BASE() {
        return MEDIA_INTF_T_V4L_BASE;
    }
    private static final int MEDIA_INTF_T_ALSA_BASE = (int)768L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_INTF_T_ALSA_BASE 768
     * }
     */
    public static int MEDIA_INTF_T_ALSA_BASE() {
        return MEDIA_INTF_T_ALSA_BASE;
    }
    private static final int MEDIA_ENT_TYPE_SHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_TYPE_SHIFT 16
     * }
     */
    public static int MEDIA_ENT_TYPE_SHIFT() {
        return MEDIA_ENT_TYPE_SHIFT;
    }
    private static final int MEDIA_ENT_TYPE_MASK = (int)16711680L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_TYPE_MASK 16711680
     * }
     */
    public static int MEDIA_ENT_TYPE_MASK() {
        return MEDIA_ENT_TYPE_MASK;
    }
    private static final int MEDIA_ENT_SUBTYPE_MASK = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_ENT_SUBTYPE_MASK 65535
     * }
     */
    public static int MEDIA_ENT_SUBTYPE_MASK() {
        return MEDIA_ENT_SUBTYPE_MASK;
    }
    private static final int V4L2_SEL_TGT_CROP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_CROP 0
     * }
     */
    public static int V4L2_SEL_TGT_CROP() {
        return V4L2_SEL_TGT_CROP;
    }
    private static final int V4L2_SEL_TGT_CROP_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_CROP_DEFAULT 1
     * }
     */
    public static int V4L2_SEL_TGT_CROP_DEFAULT() {
        return V4L2_SEL_TGT_CROP_DEFAULT;
    }
    private static final int V4L2_SEL_TGT_CROP_BOUNDS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_CROP_BOUNDS 2
     * }
     */
    public static int V4L2_SEL_TGT_CROP_BOUNDS() {
        return V4L2_SEL_TGT_CROP_BOUNDS;
    }
    private static final int V4L2_SEL_TGT_NATIVE_SIZE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_NATIVE_SIZE 3
     * }
     */
    public static int V4L2_SEL_TGT_NATIVE_SIZE() {
        return V4L2_SEL_TGT_NATIVE_SIZE;
    }
    private static final int V4L2_SEL_TGT_COMPOSE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_COMPOSE 256
     * }
     */
    public static int V4L2_SEL_TGT_COMPOSE() {
        return V4L2_SEL_TGT_COMPOSE;
    }
    private static final int V4L2_SEL_TGT_COMPOSE_DEFAULT = (int)257L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_COMPOSE_DEFAULT 257
     * }
     */
    public static int V4L2_SEL_TGT_COMPOSE_DEFAULT() {
        return V4L2_SEL_TGT_COMPOSE_DEFAULT;
    }
    private static final int V4L2_SEL_TGT_COMPOSE_BOUNDS = (int)258L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_COMPOSE_BOUNDS 258
     * }
     */
    public static int V4L2_SEL_TGT_COMPOSE_BOUNDS() {
        return V4L2_SEL_TGT_COMPOSE_BOUNDS;
    }
    private static final int V4L2_SEL_TGT_COMPOSE_PADDED = (int)259L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SEL_TGT_COMPOSE_PADDED 259
     * }
     */
    public static int V4L2_SEL_TGT_COMPOSE_PADDED() {
        return V4L2_SEL_TGT_COMPOSE_PADDED;
    }
    private static final int MEDIA_BUS_FMT_FIXED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_FIXED 1
     * }
     */
    public static int MEDIA_BUS_FMT_FIXED() {
        return MEDIA_BUS_FMT_FIXED;
    }
    private static final int MEDIA_BUS_FMT_RGB444_1X12 = (int)4118L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB444_1X12 4118
     * }
     */
    public static int MEDIA_BUS_FMT_RGB444_1X12() {
        return MEDIA_BUS_FMT_RGB444_1X12;
    }
    private static final int MEDIA_BUS_FMT_RGB444_2X8_PADHI_BE = (int)4097L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB444_2X8_PADHI_BE 4097
     * }
     */
    public static int MEDIA_BUS_FMT_RGB444_2X8_PADHI_BE() {
        return MEDIA_BUS_FMT_RGB444_2X8_PADHI_BE;
    }
    private static final int MEDIA_BUS_FMT_RGB444_2X8_PADHI_LE = (int)4098L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB444_2X8_PADHI_LE 4098
     * }
     */
    public static int MEDIA_BUS_FMT_RGB444_2X8_PADHI_LE() {
        return MEDIA_BUS_FMT_RGB444_2X8_PADHI_LE;
    }
    private static final int MEDIA_BUS_FMT_RGB555_2X8_PADHI_BE = (int)4099L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB555_2X8_PADHI_BE 4099
     * }
     */
    public static int MEDIA_BUS_FMT_RGB555_2X8_PADHI_BE() {
        return MEDIA_BUS_FMT_RGB555_2X8_PADHI_BE;
    }
    private static final int MEDIA_BUS_FMT_RGB555_2X8_PADHI_LE = (int)4100L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB555_2X8_PADHI_LE 4100
     * }
     */
    public static int MEDIA_BUS_FMT_RGB555_2X8_PADHI_LE() {
        return MEDIA_BUS_FMT_RGB555_2X8_PADHI_LE;
    }
    private static final int MEDIA_BUS_FMT_RGB565_1X16 = (int)4119L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB565_1X16 4119
     * }
     */
    public static int MEDIA_BUS_FMT_RGB565_1X16() {
        return MEDIA_BUS_FMT_RGB565_1X16;
    }
    private static final int MEDIA_BUS_FMT_BGR565_2X8_BE = (int)4101L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR565_2X8_BE 4101
     * }
     */
    public static int MEDIA_BUS_FMT_BGR565_2X8_BE() {
        return MEDIA_BUS_FMT_BGR565_2X8_BE;
    }
    private static final int MEDIA_BUS_FMT_BGR565_2X8_LE = (int)4102L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR565_2X8_LE 4102
     * }
     */
    public static int MEDIA_BUS_FMT_BGR565_2X8_LE() {
        return MEDIA_BUS_FMT_BGR565_2X8_LE;
    }
    private static final int MEDIA_BUS_FMT_RGB565_2X8_BE = (int)4103L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB565_2X8_BE 4103
     * }
     */
    public static int MEDIA_BUS_FMT_RGB565_2X8_BE() {
        return MEDIA_BUS_FMT_RGB565_2X8_BE;
    }
    private static final int MEDIA_BUS_FMT_RGB565_2X8_LE = (int)4104L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB565_2X8_LE 4104
     * }
     */
    public static int MEDIA_BUS_FMT_RGB565_2X8_LE() {
        return MEDIA_BUS_FMT_RGB565_2X8_LE;
    }
    private static final int MEDIA_BUS_FMT_RGB666_1X18 = (int)4105L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_1X18 4105
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_1X18() {
        return MEDIA_BUS_FMT_RGB666_1X18;
    }
    private static final int MEDIA_BUS_FMT_RGB666_2X9_BE = (int)4133L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_2X9_BE 4133
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_2X9_BE() {
        return MEDIA_BUS_FMT_RGB666_2X9_BE;
    }
    private static final int MEDIA_BUS_FMT_BGR666_1X18 = (int)4131L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR666_1X18 4131
     * }
     */
    public static int MEDIA_BUS_FMT_BGR666_1X18() {
        return MEDIA_BUS_FMT_BGR666_1X18;
    }
    private static final int MEDIA_BUS_FMT_RBG888_1X24 = (int)4110L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RBG888_1X24 4110
     * }
     */
    public static int MEDIA_BUS_FMT_RBG888_1X24() {
        return MEDIA_BUS_FMT_RBG888_1X24;
    }
    private static final int MEDIA_BUS_FMT_RGB666_1X24_CPADHI = (int)4117L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_1X24_CPADHI 4117
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_1X24_CPADHI() {
        return MEDIA_BUS_FMT_RGB666_1X24_CPADHI;
    }
    private static final int MEDIA_BUS_FMT_BGR666_1X24_CPADHI = (int)4132L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR666_1X24_CPADHI 4132
     * }
     */
    public static int MEDIA_BUS_FMT_BGR666_1X24_CPADHI() {
        return MEDIA_BUS_FMT_BGR666_1X24_CPADHI;
    }
    private static final int MEDIA_BUS_FMT_RGB565_1X24_CPADHI = (int)4130L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB565_1X24_CPADHI 4130
     * }
     */
    public static int MEDIA_BUS_FMT_RGB565_1X24_CPADHI() {
        return MEDIA_BUS_FMT_RGB565_1X24_CPADHI;
    }
    private static final int MEDIA_BUS_FMT_RGB666_1X7X3_SPWG = (int)4112L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_1X7X3_SPWG 4112
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_1X7X3_SPWG() {
        return MEDIA_BUS_FMT_RGB666_1X7X3_SPWG;
    }
    private static final int MEDIA_BUS_FMT_BGR888_1X24 = (int)4115L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR888_1X24 4115
     * }
     */
    public static int MEDIA_BUS_FMT_BGR888_1X24() {
        return MEDIA_BUS_FMT_BGR888_1X24;
    }
    private static final int MEDIA_BUS_FMT_BGR888_3X8 = (int)4123L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_BGR888_3X8 4123
     * }
     */
    public static int MEDIA_BUS_FMT_BGR888_3X8() {
        return MEDIA_BUS_FMT_BGR888_3X8;
    }
    private static final int MEDIA_BUS_FMT_GBR888_1X24 = (int)4116L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_GBR888_1X24 4116
     * }
     */
    public static int MEDIA_BUS_FMT_GBR888_1X24() {
        return MEDIA_BUS_FMT_GBR888_1X24;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X24 = (int)4106L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X24 4106
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X24() {
        return MEDIA_BUS_FMT_RGB888_1X24;
    }
    private static final int MEDIA_BUS_FMT_RGB888_2X12_BE = (int)4107L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_2X12_BE 4107
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_2X12_BE() {
        return MEDIA_BUS_FMT_RGB888_2X12_BE;
    }
    private static final int MEDIA_BUS_FMT_RGB888_2X12_LE = (int)4108L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_2X12_LE 4108
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_2X12_LE() {
        return MEDIA_BUS_FMT_RGB888_2X12_LE;
    }
    private static final int MEDIA_BUS_FMT_RGB888_3X8 = (int)4124L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_3X8 4124
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_3X8() {
        return MEDIA_BUS_FMT_RGB888_3X8;
    }
    private static final int MEDIA_BUS_FMT_RGB888_3X8_DELTA = (int)4125L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_3X8_DELTA 4125
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_3X8_DELTA() {
        return MEDIA_BUS_FMT_RGB888_3X8_DELTA;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X7X4_SPWG = (int)4113L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X7X4_SPWG 4113
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X7X4_SPWG() {
        return MEDIA_BUS_FMT_RGB888_1X7X4_SPWG;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA = (int)4114L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA 4114
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA() {
        return MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA;
    }
    private static final int MEDIA_BUS_FMT_RGB666_1X30_CPADLO = (int)4126L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_1X30_CPADLO 4126
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_1X30_CPADLO() {
        return MEDIA_BUS_FMT_RGB666_1X30_CPADLO;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X30_CPADLO = (int)4127L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X30_CPADLO 4127
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X30_CPADLO() {
        return MEDIA_BUS_FMT_RGB888_1X30_CPADLO;
    }
    private static final int MEDIA_BUS_FMT_ARGB8888_1X32 = (int)4109L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_ARGB8888_1X32 4109
     * }
     */
    public static int MEDIA_BUS_FMT_ARGB8888_1X32() {
        return MEDIA_BUS_FMT_ARGB8888_1X32;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X32_PADHI = (int)4111L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X32_PADHI 4111
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X32_PADHI() {
        return MEDIA_BUS_FMT_RGB888_1X32_PADHI;
    }
    private static final int MEDIA_BUS_FMT_RGB101010_1X30 = (int)4120L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB101010_1X30 4120
     * }
     */
    public static int MEDIA_BUS_FMT_RGB101010_1X30() {
        return MEDIA_BUS_FMT_RGB101010_1X30;
    }
    private static final int MEDIA_BUS_FMT_RGB666_1X36_CPADLO = (int)4128L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB666_1X36_CPADLO 4128
     * }
     */
    public static int MEDIA_BUS_FMT_RGB666_1X36_CPADLO() {
        return MEDIA_BUS_FMT_RGB666_1X36_CPADLO;
    }
    private static final int MEDIA_BUS_FMT_RGB888_1X36_CPADLO = (int)4129L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB888_1X36_CPADLO 4129
     * }
     */
    public static int MEDIA_BUS_FMT_RGB888_1X36_CPADLO() {
        return MEDIA_BUS_FMT_RGB888_1X36_CPADLO;
    }
    private static final int MEDIA_BUS_FMT_RGB121212_1X36 = (int)4121L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB121212_1X36 4121
     * }
     */
    public static int MEDIA_BUS_FMT_RGB121212_1X36() {
        return MEDIA_BUS_FMT_RGB121212_1X36;
    }
    private static final int MEDIA_BUS_FMT_RGB161616_1X48 = (int)4122L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_RGB161616_1X48 4122
     * }
     */
    public static int MEDIA_BUS_FMT_RGB161616_1X48() {
        return MEDIA_BUS_FMT_RGB161616_1X48;
    }
    private static final int MEDIA_BUS_FMT_Y8_1X8 = (int)8193L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y8_1X8 8193
     * }
     */
    public static int MEDIA_BUS_FMT_Y8_1X8() {
        return MEDIA_BUS_FMT_Y8_1X8;
    }
    private static final int MEDIA_BUS_FMT_UV8_1X8 = (int)8213L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UV8_1X8 8213
     * }
     */
    public static int MEDIA_BUS_FMT_UV8_1X8() {
        return MEDIA_BUS_FMT_UV8_1X8;
    }
    private static final int MEDIA_BUS_FMT_UYVY8_1_5X8 = (int)8194L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY8_1_5X8 8194
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY8_1_5X8() {
        return MEDIA_BUS_FMT_UYVY8_1_5X8;
    }
    private static final int MEDIA_BUS_FMT_VYUY8_1_5X8 = (int)8195L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY8_1_5X8 8195
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY8_1_5X8() {
        return MEDIA_BUS_FMT_VYUY8_1_5X8;
    }
    private static final int MEDIA_BUS_FMT_YUYV8_1_5X8 = (int)8196L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV8_1_5X8 8196
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV8_1_5X8() {
        return MEDIA_BUS_FMT_YUYV8_1_5X8;
    }
    private static final int MEDIA_BUS_FMT_YVYU8_1_5X8 = (int)8197L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU8_1_5X8 8197
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU8_1_5X8() {
        return MEDIA_BUS_FMT_YVYU8_1_5X8;
    }
    private static final int MEDIA_BUS_FMT_UYVY8_2X8 = (int)8198L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY8_2X8 8198
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY8_2X8() {
        return MEDIA_BUS_FMT_UYVY8_2X8;
    }
    private static final int MEDIA_BUS_FMT_VYUY8_2X8 = (int)8199L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY8_2X8 8199
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY8_2X8() {
        return MEDIA_BUS_FMT_VYUY8_2X8;
    }
    private static final int MEDIA_BUS_FMT_YUYV8_2X8 = (int)8200L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV8_2X8 8200
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV8_2X8() {
        return MEDIA_BUS_FMT_YUYV8_2X8;
    }
    private static final int MEDIA_BUS_FMT_YVYU8_2X8 = (int)8201L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU8_2X8 8201
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU8_2X8() {
        return MEDIA_BUS_FMT_YVYU8_2X8;
    }
    private static final int MEDIA_BUS_FMT_Y10_1X10 = (int)8202L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y10_1X10 8202
     * }
     */
    public static int MEDIA_BUS_FMT_Y10_1X10() {
        return MEDIA_BUS_FMT_Y10_1X10;
    }
    private static final int MEDIA_BUS_FMT_Y10_2X8_PADHI_LE = (int)8236L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y10_2X8_PADHI_LE 8236
     * }
     */
    public static int MEDIA_BUS_FMT_Y10_2X8_PADHI_LE() {
        return MEDIA_BUS_FMT_Y10_2X8_PADHI_LE;
    }
    private static final int MEDIA_BUS_FMT_UYVY10_2X10 = (int)8216L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY10_2X10 8216
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY10_2X10() {
        return MEDIA_BUS_FMT_UYVY10_2X10;
    }
    private static final int MEDIA_BUS_FMT_VYUY10_2X10 = (int)8217L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY10_2X10 8217
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY10_2X10() {
        return MEDIA_BUS_FMT_VYUY10_2X10;
    }
    private static final int MEDIA_BUS_FMT_YUYV10_2X10 = (int)8203L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV10_2X10 8203
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV10_2X10() {
        return MEDIA_BUS_FMT_YUYV10_2X10;
    }
    private static final int MEDIA_BUS_FMT_YVYU10_2X10 = (int)8204L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU10_2X10 8204
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU10_2X10() {
        return MEDIA_BUS_FMT_YVYU10_2X10;
    }
    private static final int MEDIA_BUS_FMT_Y12_1X12 = (int)8211L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y12_1X12 8211
     * }
     */
    public static int MEDIA_BUS_FMT_Y12_1X12() {
        return MEDIA_BUS_FMT_Y12_1X12;
    }
    private static final int MEDIA_BUS_FMT_UYVY12_2X12 = (int)8220L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY12_2X12 8220
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY12_2X12() {
        return MEDIA_BUS_FMT_UYVY12_2X12;
    }
    private static final int MEDIA_BUS_FMT_VYUY12_2X12 = (int)8221L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY12_2X12 8221
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY12_2X12() {
        return MEDIA_BUS_FMT_VYUY12_2X12;
    }
    private static final int MEDIA_BUS_FMT_YUYV12_2X12 = (int)8222L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV12_2X12 8222
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV12_2X12() {
        return MEDIA_BUS_FMT_YUYV12_2X12;
    }
    private static final int MEDIA_BUS_FMT_YVYU12_2X12 = (int)8223L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU12_2X12 8223
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU12_2X12() {
        return MEDIA_BUS_FMT_YVYU12_2X12;
    }
    private static final int MEDIA_BUS_FMT_Y14_1X14 = (int)8237L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y14_1X14 8237
     * }
     */
    public static int MEDIA_BUS_FMT_Y14_1X14() {
        return MEDIA_BUS_FMT_Y14_1X14;
    }
    private static final int MEDIA_BUS_FMT_Y16_1X16 = (int)8238L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_Y16_1X16 8238
     * }
     */
    public static int MEDIA_BUS_FMT_Y16_1X16() {
        return MEDIA_BUS_FMT_Y16_1X16;
    }
    private static final int MEDIA_BUS_FMT_UYVY8_1X16 = (int)8207L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY8_1X16 8207
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY8_1X16() {
        return MEDIA_BUS_FMT_UYVY8_1X16;
    }
    private static final int MEDIA_BUS_FMT_VYUY8_1X16 = (int)8208L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY8_1X16 8208
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY8_1X16() {
        return MEDIA_BUS_FMT_VYUY8_1X16;
    }
    private static final int MEDIA_BUS_FMT_YUYV8_1X16 = (int)8209L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV8_1X16 8209
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV8_1X16() {
        return MEDIA_BUS_FMT_YUYV8_1X16;
    }
    private static final int MEDIA_BUS_FMT_YVYU8_1X16 = (int)8210L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU8_1X16 8210
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU8_1X16() {
        return MEDIA_BUS_FMT_YVYU8_1X16;
    }
    private static final int MEDIA_BUS_FMT_YDYUYDYV8_1X16 = (int)8212L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YDYUYDYV8_1X16 8212
     * }
     */
    public static int MEDIA_BUS_FMT_YDYUYDYV8_1X16() {
        return MEDIA_BUS_FMT_YDYUYDYV8_1X16;
    }
    private static final int MEDIA_BUS_FMT_UYVY10_1X20 = (int)8218L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY10_1X20 8218
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY10_1X20() {
        return MEDIA_BUS_FMT_UYVY10_1X20;
    }
    private static final int MEDIA_BUS_FMT_VYUY10_1X20 = (int)8219L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY10_1X20 8219
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY10_1X20() {
        return MEDIA_BUS_FMT_VYUY10_1X20;
    }
    private static final int MEDIA_BUS_FMT_YUYV10_1X20 = (int)8205L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV10_1X20 8205
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV10_1X20() {
        return MEDIA_BUS_FMT_YUYV10_1X20;
    }
    private static final int MEDIA_BUS_FMT_YVYU10_1X20 = (int)8206L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU10_1X20 8206
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU10_1X20() {
        return MEDIA_BUS_FMT_YVYU10_1X20;
    }
    private static final int MEDIA_BUS_FMT_VUY8_1X24 = (int)8228L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VUY8_1X24 8228
     * }
     */
    public static int MEDIA_BUS_FMT_VUY8_1X24() {
        return MEDIA_BUS_FMT_VUY8_1X24;
    }
    private static final int MEDIA_BUS_FMT_YUV8_1X24 = (int)8229L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUV8_1X24 8229
     * }
     */
    public static int MEDIA_BUS_FMT_YUV8_1X24() {
        return MEDIA_BUS_FMT_YUV8_1X24;
    }
    private static final int MEDIA_BUS_FMT_UYYVYY8_0_5X24 = (int)8230L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYYVYY8_0_5X24 8230
     * }
     */
    public static int MEDIA_BUS_FMT_UYYVYY8_0_5X24() {
        return MEDIA_BUS_FMT_UYYVYY8_0_5X24;
    }
    private static final int MEDIA_BUS_FMT_UYVY12_1X24 = (int)8224L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYVY12_1X24 8224
     * }
     */
    public static int MEDIA_BUS_FMT_UYVY12_1X24() {
        return MEDIA_BUS_FMT_UYVY12_1X24;
    }
    private static final int MEDIA_BUS_FMT_VYUY12_1X24 = (int)8225L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_VYUY12_1X24 8225
     * }
     */
    public static int MEDIA_BUS_FMT_VYUY12_1X24() {
        return MEDIA_BUS_FMT_VYUY12_1X24;
    }
    private static final int MEDIA_BUS_FMT_YUYV12_1X24 = (int)8226L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUYV12_1X24 8226
     * }
     */
    public static int MEDIA_BUS_FMT_YUYV12_1X24() {
        return MEDIA_BUS_FMT_YUYV12_1X24;
    }
    private static final int MEDIA_BUS_FMT_YVYU12_1X24 = (int)8227L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YVYU12_1X24 8227
     * }
     */
    public static int MEDIA_BUS_FMT_YVYU12_1X24() {
        return MEDIA_BUS_FMT_YVYU12_1X24;
    }
    private static final int MEDIA_BUS_FMT_YUV10_1X30 = (int)8214L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUV10_1X30 8214
     * }
     */
    public static int MEDIA_BUS_FMT_YUV10_1X30() {
        return MEDIA_BUS_FMT_YUV10_1X30;
    }
    private static final int MEDIA_BUS_FMT_UYYVYY10_0_5X30 = (int)8231L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYYVYY10_0_5X30 8231
     * }
     */
    public static int MEDIA_BUS_FMT_UYYVYY10_0_5X30() {
        return MEDIA_BUS_FMT_UYYVYY10_0_5X30;
    }
    private static final int MEDIA_BUS_FMT_AYUV8_1X32 = (int)8215L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_AYUV8_1X32 8215
     * }
     */
    public static int MEDIA_BUS_FMT_AYUV8_1X32() {
        return MEDIA_BUS_FMT_AYUV8_1X32;
    }
    private static final int MEDIA_BUS_FMT_UYYVYY12_0_5X36 = (int)8232L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYYVYY12_0_5X36 8232
     * }
     */
    public static int MEDIA_BUS_FMT_UYYVYY12_0_5X36() {
        return MEDIA_BUS_FMT_UYYVYY12_0_5X36;
    }
    private static final int MEDIA_BUS_FMT_YUV12_1X36 = (int)8233L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUV12_1X36 8233
     * }
     */
    public static int MEDIA_BUS_FMT_YUV12_1X36() {
        return MEDIA_BUS_FMT_YUV12_1X36;
    }
    private static final int MEDIA_BUS_FMT_YUV16_1X48 = (int)8234L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_YUV16_1X48 8234
     * }
     */
    public static int MEDIA_BUS_FMT_YUV16_1X48() {
        return MEDIA_BUS_FMT_YUV16_1X48;
    }
    private static final int MEDIA_BUS_FMT_UYYVYY16_0_5X48 = (int)8235L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_UYYVYY16_0_5X48 8235
     * }
     */
    public static int MEDIA_BUS_FMT_UYYVYY16_0_5X48() {
        return MEDIA_BUS_FMT_UYYVYY16_0_5X48;
    }
    private static final int MEDIA_BUS_FMT_SBGGR8_1X8 = (int)12289L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR8_1X8 12289
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR8_1X8() {
        return MEDIA_BUS_FMT_SBGGR8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGBRG8_1X8 = (int)12307L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG8_1X8 12307
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG8_1X8() {
        return MEDIA_BUS_FMT_SGBRG8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGRBG8_1X8 = (int)12290L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG8_1X8 12290
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG8_1X8() {
        return MEDIA_BUS_FMT_SGRBG8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SRGGB8_1X8 = (int)12308L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB8_1X8 12308
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB8_1X8() {
        return MEDIA_BUS_FMT_SRGGB8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_ALAW8_1X8 = (int)12309L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_ALAW8_1X8 12309
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_ALAW8_1X8() {
        return MEDIA_BUS_FMT_SBGGR10_ALAW8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGBRG10_ALAW8_1X8 = (int)12310L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG10_ALAW8_1X8 12310
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG10_ALAW8_1X8() {
        return MEDIA_BUS_FMT_SGBRG10_ALAW8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGRBG10_ALAW8_1X8 = (int)12311L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG10_ALAW8_1X8 12311
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG10_ALAW8_1X8() {
        return MEDIA_BUS_FMT_SGRBG10_ALAW8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SRGGB10_ALAW8_1X8 = (int)12312L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB10_ALAW8_1X8 12312
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB10_ALAW8_1X8() {
        return MEDIA_BUS_FMT_SRGGB10_ALAW8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_DPCM8_1X8 = (int)12299L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_DPCM8_1X8 12299
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_DPCM8_1X8() {
        return MEDIA_BUS_FMT_SBGGR10_DPCM8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGBRG10_DPCM8_1X8 = (int)12300L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG10_DPCM8_1X8 12300
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG10_DPCM8_1X8() {
        return MEDIA_BUS_FMT_SGBRG10_DPCM8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SGRBG10_DPCM8_1X8 = (int)12297L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG10_DPCM8_1X8 12297
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG10_DPCM8_1X8() {
        return MEDIA_BUS_FMT_SGRBG10_DPCM8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SRGGB10_DPCM8_1X8 = (int)12301L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB10_DPCM8_1X8 12301
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB10_DPCM8_1X8() {
        return MEDIA_BUS_FMT_SRGGB10_DPCM8_1X8;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_BE = (int)12291L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_BE 12291
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_BE() {
        return MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_BE;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_LE = (int)12292L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_LE 12292
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_LE() {
        return MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_LE;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_BE = (int)12293L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_BE 12293
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_BE() {
        return MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_BE;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_LE = (int)12294L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_LE 12294
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_LE() {
        return MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_LE;
    }
    private static final int MEDIA_BUS_FMT_SBGGR10_1X10 = (int)12295L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR10_1X10 12295
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR10_1X10() {
        return MEDIA_BUS_FMT_SBGGR10_1X10;
    }
    private static final int MEDIA_BUS_FMT_SGBRG10_1X10 = (int)12302L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG10_1X10 12302
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG10_1X10() {
        return MEDIA_BUS_FMT_SGBRG10_1X10;
    }
    private static final int MEDIA_BUS_FMT_SGRBG10_1X10 = (int)12298L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG10_1X10 12298
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG10_1X10() {
        return MEDIA_BUS_FMT_SGRBG10_1X10;
    }
    private static final int MEDIA_BUS_FMT_SRGGB10_1X10 = (int)12303L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB10_1X10 12303
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB10_1X10() {
        return MEDIA_BUS_FMT_SRGGB10_1X10;
    }
    private static final int MEDIA_BUS_FMT_SBGGR12_1X12 = (int)12296L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR12_1X12 12296
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR12_1X12() {
        return MEDIA_BUS_FMT_SBGGR12_1X12;
    }
    private static final int MEDIA_BUS_FMT_SGBRG12_1X12 = (int)12304L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG12_1X12 12304
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG12_1X12() {
        return MEDIA_BUS_FMT_SGBRG12_1X12;
    }
    private static final int MEDIA_BUS_FMT_SGRBG12_1X12 = (int)12305L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG12_1X12 12305
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG12_1X12() {
        return MEDIA_BUS_FMT_SGRBG12_1X12;
    }
    private static final int MEDIA_BUS_FMT_SRGGB12_1X12 = (int)12306L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB12_1X12 12306
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB12_1X12() {
        return MEDIA_BUS_FMT_SRGGB12_1X12;
    }
    private static final int MEDIA_BUS_FMT_SBGGR14_1X14 = (int)12313L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR14_1X14 12313
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR14_1X14() {
        return MEDIA_BUS_FMT_SBGGR14_1X14;
    }
    private static final int MEDIA_BUS_FMT_SGBRG14_1X14 = (int)12314L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG14_1X14 12314
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG14_1X14() {
        return MEDIA_BUS_FMT_SGBRG14_1X14;
    }
    private static final int MEDIA_BUS_FMT_SGRBG14_1X14 = (int)12315L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG14_1X14 12315
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG14_1X14() {
        return MEDIA_BUS_FMT_SGRBG14_1X14;
    }
    private static final int MEDIA_BUS_FMT_SRGGB14_1X14 = (int)12316L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB14_1X14 12316
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB14_1X14() {
        return MEDIA_BUS_FMT_SRGGB14_1X14;
    }
    private static final int MEDIA_BUS_FMT_SBGGR16_1X16 = (int)12317L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SBGGR16_1X16 12317
     * }
     */
    public static int MEDIA_BUS_FMT_SBGGR16_1X16() {
        return MEDIA_BUS_FMT_SBGGR16_1X16;
    }
    private static final int MEDIA_BUS_FMT_SGBRG16_1X16 = (int)12318L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGBRG16_1X16 12318
     * }
     */
    public static int MEDIA_BUS_FMT_SGBRG16_1X16() {
        return MEDIA_BUS_FMT_SGBRG16_1X16;
    }
    private static final int MEDIA_BUS_FMT_SGRBG16_1X16 = (int)12319L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SGRBG16_1X16 12319
     * }
     */
    public static int MEDIA_BUS_FMT_SGRBG16_1X16() {
        return MEDIA_BUS_FMT_SGRBG16_1X16;
    }
    private static final int MEDIA_BUS_FMT_SRGGB16_1X16 = (int)12320L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_SRGGB16_1X16 12320
     * }
     */
    public static int MEDIA_BUS_FMT_SRGGB16_1X16() {
        return MEDIA_BUS_FMT_SRGGB16_1X16;
    }
    private static final int MEDIA_BUS_FMT_JPEG_1X8 = (int)16385L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_JPEG_1X8 16385
     * }
     */
    public static int MEDIA_BUS_FMT_JPEG_1X8() {
        return MEDIA_BUS_FMT_JPEG_1X8;
    }
    private static final int MEDIA_BUS_FMT_S5C_UYVY_JPEG_1X8 = (int)20481L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_S5C_UYVY_JPEG_1X8 20481
     * }
     */
    public static int MEDIA_BUS_FMT_S5C_UYVY_JPEG_1X8() {
        return MEDIA_BUS_FMT_S5C_UYVY_JPEG_1X8;
    }
    private static final int MEDIA_BUS_FMT_AHSV8888_1X32 = (int)24577L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_AHSV8888_1X32 24577
     * }
     */
    public static int MEDIA_BUS_FMT_AHSV8888_1X32() {
        return MEDIA_BUS_FMT_AHSV8888_1X32;
    }
    private static final int MEDIA_BUS_FMT_METADATA_FIXED = (int)28673L;
    /**
     * {@snippet lang=c :
     * #define MEDIA_BUS_FMT_METADATA_FIXED 28673
     * }
     */
    public static int MEDIA_BUS_FMT_METADATA_FIXED() {
        return MEDIA_BUS_FMT_METADATA_FIXED;
    }
    private static final int _SYS_TIME_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_TIME_H 1
     * }
     */
    public static int _SYS_TIME_H() {
        return _SYS_TIME_H;
    }
    private static final int __time_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int __timeval_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return __timeval_defined;
    }
    private static final int _SYS_SELECT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return _SYS_SELECT_H;
    }
    private static final int __sigset_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return __sigset_t_defined;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int V4L2_CTRL_CLASS_USER = (int)9961472L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_USER 9961472
     * }
     */
    public static int V4L2_CTRL_CLASS_USER() {
        return V4L2_CTRL_CLASS_USER;
    }
    private static final int V4L2_CTRL_CLASS_CODEC = (int)10027008L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_CODEC 10027008
     * }
     */
    public static int V4L2_CTRL_CLASS_CODEC() {
        return V4L2_CTRL_CLASS_CODEC;
    }
    private static final int V4L2_CTRL_CLASS_CAMERA = (int)10092544L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_CAMERA 10092544
     * }
     */
    public static int V4L2_CTRL_CLASS_CAMERA() {
        return V4L2_CTRL_CLASS_CAMERA;
    }
    private static final int V4L2_CTRL_CLASS_FM_TX = (int)10158080L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_FM_TX 10158080
     * }
     */
    public static int V4L2_CTRL_CLASS_FM_TX() {
        return V4L2_CTRL_CLASS_FM_TX;
    }
    private static final int V4L2_CTRL_CLASS_FLASH = (int)10223616L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_FLASH 10223616
     * }
     */
    public static int V4L2_CTRL_CLASS_FLASH() {
        return V4L2_CTRL_CLASS_FLASH;
    }
    private static final int V4L2_CTRL_CLASS_JPEG = (int)10289152L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_JPEG 10289152
     * }
     */
    public static int V4L2_CTRL_CLASS_JPEG() {
        return V4L2_CTRL_CLASS_JPEG;
    }
    private static final int V4L2_CTRL_CLASS_IMAGE_SOURCE = (int)10354688L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_IMAGE_SOURCE 10354688
     * }
     */
    public static int V4L2_CTRL_CLASS_IMAGE_SOURCE() {
        return V4L2_CTRL_CLASS_IMAGE_SOURCE;
    }
    private static final int V4L2_CTRL_CLASS_IMAGE_PROC = (int)10420224L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_IMAGE_PROC 10420224
     * }
     */
    public static int V4L2_CTRL_CLASS_IMAGE_PROC() {
        return V4L2_CTRL_CLASS_IMAGE_PROC;
    }
    private static final int V4L2_CTRL_CLASS_DV = (int)10485760L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_DV 10485760
     * }
     */
    public static int V4L2_CTRL_CLASS_DV() {
        return V4L2_CTRL_CLASS_DV;
    }
    private static final int V4L2_CTRL_CLASS_FM_RX = (int)10551296L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_FM_RX 10551296
     * }
     */
    public static int V4L2_CTRL_CLASS_FM_RX() {
        return V4L2_CTRL_CLASS_FM_RX;
    }
    private static final int V4L2_CTRL_CLASS_RF_TUNER = (int)10616832L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_RF_TUNER 10616832
     * }
     */
    public static int V4L2_CTRL_CLASS_RF_TUNER() {
        return V4L2_CTRL_CLASS_RF_TUNER;
    }
    private static final int V4L2_CTRL_CLASS_DETECT = (int)10682368L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_DETECT 10682368
     * }
     */
    public static int V4L2_CTRL_CLASS_DETECT() {
        return V4L2_CTRL_CLASS_DETECT;
    }
    private static final int V4L2_CTRL_CLASS_CODEC_STATELESS = (int)10747904L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_CODEC_STATELESS 10747904
     * }
     */
    public static int V4L2_CTRL_CLASS_CODEC_STATELESS() {
        return V4L2_CTRL_CLASS_CODEC_STATELESS;
    }
    private static final int V4L2_CTRL_CLASS_COLORIMETRY = (int)10813440L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_CLASS_COLORIMETRY 10813440
     * }
     */
    public static int V4L2_CTRL_CLASS_COLORIMETRY() {
        return V4L2_CTRL_CLASS_COLORIMETRY;
    }
    private static final int V4L2_CAMERA_ORIENTATION_FRONT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAMERA_ORIENTATION_FRONT 0
     * }
     */
    public static int V4L2_CAMERA_ORIENTATION_FRONT() {
        return V4L2_CAMERA_ORIENTATION_FRONT;
    }
    private static final int V4L2_CAMERA_ORIENTATION_BACK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAMERA_ORIENTATION_BACK 1
     * }
     */
    public static int V4L2_CAMERA_ORIENTATION_BACK() {
        return V4L2_CAMERA_ORIENTATION_BACK;
    }
    private static final int V4L2_CAMERA_ORIENTATION_EXTERNAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAMERA_ORIENTATION_EXTERNAL 2
     * }
     */
    public static int V4L2_CAMERA_ORIENTATION_EXTERNAL() {
        return V4L2_CAMERA_ORIENTATION_EXTERNAL;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET0_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET0_FLAG 1
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET0_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET0_FLAG;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET1_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET1_FLAG 2
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET1_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET1_FLAG;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET2_FLAG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET2_FLAG 4
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET2_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET2_FLAG;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET3_FLAG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET3_FLAG 8
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET3_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET3_FLAG;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET4_FLAG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET4_FLAG 16
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET4_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET4_FLAG;
    }
    private static final int V4L2_H264_SPS_CONSTRAINT_SET5_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_CONSTRAINT_SET5_FLAG 32
     * }
     */
    public static int V4L2_H264_SPS_CONSTRAINT_SET5_FLAG() {
        return V4L2_H264_SPS_CONSTRAINT_SET5_FLAG;
    }
    private static final int V4L2_H264_SPS_FLAG_SEPARATE_COLOUR_PLANE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_SEPARATE_COLOUR_PLANE 1
     * }
     */
    public static int V4L2_H264_SPS_FLAG_SEPARATE_COLOUR_PLANE() {
        return V4L2_H264_SPS_FLAG_SEPARATE_COLOUR_PLANE;
    }
    private static final int V4L2_H264_SPS_FLAG_QPPRIME_Y_ZERO_TRANSFORM_BYPASS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_QPPRIME_Y_ZERO_TRANSFORM_BYPASS 2
     * }
     */
    public static int V4L2_H264_SPS_FLAG_QPPRIME_Y_ZERO_TRANSFORM_BYPASS() {
        return V4L2_H264_SPS_FLAG_QPPRIME_Y_ZERO_TRANSFORM_BYPASS;
    }
    private static final int V4L2_H264_SPS_FLAG_DELTA_PIC_ORDER_ALWAYS_ZERO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_DELTA_PIC_ORDER_ALWAYS_ZERO 4
     * }
     */
    public static int V4L2_H264_SPS_FLAG_DELTA_PIC_ORDER_ALWAYS_ZERO() {
        return V4L2_H264_SPS_FLAG_DELTA_PIC_ORDER_ALWAYS_ZERO;
    }
    private static final int V4L2_H264_SPS_FLAG_GAPS_IN_FRAME_NUM_VALUE_ALLOWED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_GAPS_IN_FRAME_NUM_VALUE_ALLOWED 8
     * }
     */
    public static int V4L2_H264_SPS_FLAG_GAPS_IN_FRAME_NUM_VALUE_ALLOWED() {
        return V4L2_H264_SPS_FLAG_GAPS_IN_FRAME_NUM_VALUE_ALLOWED;
    }
    private static final int V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY 16
     * }
     */
    public static int V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY() {
        return V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY;
    }
    private static final int V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD 32
     * }
     */
    public static int V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD() {
        return V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD;
    }
    private static final int V4L2_H264_SPS_FLAG_DIRECT_8X8_INFERENCE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SPS_FLAG_DIRECT_8X8_INFERENCE 64
     * }
     */
    public static int V4L2_H264_SPS_FLAG_DIRECT_8X8_INFERENCE() {
        return V4L2_H264_SPS_FLAG_DIRECT_8X8_INFERENCE;
    }
    private static final int V4L2_H264_PPS_FLAG_ENTROPY_CODING_MODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_ENTROPY_CODING_MODE 1
     * }
     */
    public static int V4L2_H264_PPS_FLAG_ENTROPY_CODING_MODE() {
        return V4L2_H264_PPS_FLAG_ENTROPY_CODING_MODE;
    }
    private static final int V4L2_H264_PPS_FLAG_BOTTOM_FIELD_PIC_ORDER_IN_FRAME_PRESENT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_BOTTOM_FIELD_PIC_ORDER_IN_FRAME_PRESENT 2
     * }
     */
    public static int V4L2_H264_PPS_FLAG_BOTTOM_FIELD_PIC_ORDER_IN_FRAME_PRESENT() {
        return V4L2_H264_PPS_FLAG_BOTTOM_FIELD_PIC_ORDER_IN_FRAME_PRESENT;
    }
    private static final int V4L2_H264_PPS_FLAG_WEIGHTED_PRED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_WEIGHTED_PRED 4
     * }
     */
    public static int V4L2_H264_PPS_FLAG_WEIGHTED_PRED() {
        return V4L2_H264_PPS_FLAG_WEIGHTED_PRED;
    }
    private static final int V4L2_H264_PPS_FLAG_DEBLOCKING_FILTER_CONTROL_PRESENT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_DEBLOCKING_FILTER_CONTROL_PRESENT 8
     * }
     */
    public static int V4L2_H264_PPS_FLAG_DEBLOCKING_FILTER_CONTROL_PRESENT() {
        return V4L2_H264_PPS_FLAG_DEBLOCKING_FILTER_CONTROL_PRESENT;
    }
    private static final int V4L2_H264_PPS_FLAG_CONSTRAINED_INTRA_PRED = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_CONSTRAINED_INTRA_PRED 16
     * }
     */
    public static int V4L2_H264_PPS_FLAG_CONSTRAINED_INTRA_PRED() {
        return V4L2_H264_PPS_FLAG_CONSTRAINED_INTRA_PRED;
    }
    private static final int V4L2_H264_PPS_FLAG_REDUNDANT_PIC_CNT_PRESENT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_REDUNDANT_PIC_CNT_PRESENT 32
     * }
     */
    public static int V4L2_H264_PPS_FLAG_REDUNDANT_PIC_CNT_PRESENT() {
        return V4L2_H264_PPS_FLAG_REDUNDANT_PIC_CNT_PRESENT;
    }
    private static final int V4L2_H264_PPS_FLAG_TRANSFORM_8X8_MODE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_TRANSFORM_8X8_MODE 64
     * }
     */
    public static int V4L2_H264_PPS_FLAG_TRANSFORM_8X8_MODE() {
        return V4L2_H264_PPS_FLAG_TRANSFORM_8X8_MODE;
    }
    private static final int V4L2_H264_PPS_FLAG_SCALING_MATRIX_PRESENT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_PPS_FLAG_SCALING_MATRIX_PRESENT 128
     * }
     */
    public static int V4L2_H264_PPS_FLAG_SCALING_MATRIX_PRESENT() {
        return V4L2_H264_PPS_FLAG_SCALING_MATRIX_PRESENT;
    }
    private static final int V4L2_H264_SLICE_TYPE_P = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_TYPE_P 0
     * }
     */
    public static int V4L2_H264_SLICE_TYPE_P() {
        return V4L2_H264_SLICE_TYPE_P;
    }
    private static final int V4L2_H264_SLICE_TYPE_B = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_TYPE_B 1
     * }
     */
    public static int V4L2_H264_SLICE_TYPE_B() {
        return V4L2_H264_SLICE_TYPE_B;
    }
    private static final int V4L2_H264_SLICE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_TYPE_I 2
     * }
     */
    public static int V4L2_H264_SLICE_TYPE_I() {
        return V4L2_H264_SLICE_TYPE_I;
    }
    private static final int V4L2_H264_SLICE_TYPE_SP = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_TYPE_SP 3
     * }
     */
    public static int V4L2_H264_SLICE_TYPE_SP() {
        return V4L2_H264_SLICE_TYPE_SP;
    }
    private static final int V4L2_H264_SLICE_TYPE_SI = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_TYPE_SI 4
     * }
     */
    public static int V4L2_H264_SLICE_TYPE_SI() {
        return V4L2_H264_SLICE_TYPE_SI;
    }
    private static final int V4L2_H264_SLICE_FLAG_DIRECT_SPATIAL_MV_PRED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_FLAG_DIRECT_SPATIAL_MV_PRED 1
     * }
     */
    public static int V4L2_H264_SLICE_FLAG_DIRECT_SPATIAL_MV_PRED() {
        return V4L2_H264_SLICE_FLAG_DIRECT_SPATIAL_MV_PRED;
    }
    private static final int V4L2_H264_SLICE_FLAG_SP_FOR_SWITCH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_SLICE_FLAG_SP_FOR_SWITCH 2
     * }
     */
    public static int V4L2_H264_SLICE_FLAG_SP_FOR_SWITCH() {
        return V4L2_H264_SLICE_FLAG_SP_FOR_SWITCH;
    }
    private static final int V4L2_H264_TOP_FIELD_REF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_TOP_FIELD_REF 1
     * }
     */
    public static int V4L2_H264_TOP_FIELD_REF() {
        return V4L2_H264_TOP_FIELD_REF;
    }
    private static final int V4L2_H264_BOTTOM_FIELD_REF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_BOTTOM_FIELD_REF 2
     * }
     */
    public static int V4L2_H264_BOTTOM_FIELD_REF() {
        return V4L2_H264_BOTTOM_FIELD_REF;
    }
    private static final int V4L2_H264_FRAME_REF = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_FRAME_REF 3
     * }
     */
    public static int V4L2_H264_FRAME_REF() {
        return V4L2_H264_FRAME_REF;
    }
    private static final int V4L2_H264_NUM_DPB_ENTRIES = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_NUM_DPB_ENTRIES 16
     * }
     */
    public static int V4L2_H264_NUM_DPB_ENTRIES() {
        return V4L2_H264_NUM_DPB_ENTRIES;
    }
    private static final int V4L2_H264_DPB_ENTRY_FLAG_VALID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DPB_ENTRY_FLAG_VALID 1
     * }
     */
    public static int V4L2_H264_DPB_ENTRY_FLAG_VALID() {
        return V4L2_H264_DPB_ENTRY_FLAG_VALID;
    }
    private static final int V4L2_H264_DPB_ENTRY_FLAG_ACTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DPB_ENTRY_FLAG_ACTIVE 2
     * }
     */
    public static int V4L2_H264_DPB_ENTRY_FLAG_ACTIVE() {
        return V4L2_H264_DPB_ENTRY_FLAG_ACTIVE;
    }
    private static final int V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM 4
     * }
     */
    public static int V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM() {
        return V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM;
    }
    private static final int V4L2_H264_DPB_ENTRY_FLAG_FIELD = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DPB_ENTRY_FLAG_FIELD 8
     * }
     */
    public static int V4L2_H264_DPB_ENTRY_FLAG_FIELD() {
        return V4L2_H264_DPB_ENTRY_FLAG_FIELD;
    }
    private static final int V4L2_H264_DECODE_PARAM_FLAG_IDR_PIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DECODE_PARAM_FLAG_IDR_PIC 1
     * }
     */
    public static int V4L2_H264_DECODE_PARAM_FLAG_IDR_PIC() {
        return V4L2_H264_DECODE_PARAM_FLAG_IDR_PIC;
    }
    private static final int V4L2_H264_DECODE_PARAM_FLAG_FIELD_PIC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DECODE_PARAM_FLAG_FIELD_PIC 2
     * }
     */
    public static int V4L2_H264_DECODE_PARAM_FLAG_FIELD_PIC() {
        return V4L2_H264_DECODE_PARAM_FLAG_FIELD_PIC;
    }
    private static final int V4L2_H264_DECODE_PARAM_FLAG_BOTTOM_FIELD = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DECODE_PARAM_FLAG_BOTTOM_FIELD 4
     * }
     */
    public static int V4L2_H264_DECODE_PARAM_FLAG_BOTTOM_FIELD() {
        return V4L2_H264_DECODE_PARAM_FLAG_BOTTOM_FIELD;
    }
    private static final int V4L2_H264_DECODE_PARAM_FLAG_PFRAME = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DECODE_PARAM_FLAG_PFRAME 8
     * }
     */
    public static int V4L2_H264_DECODE_PARAM_FLAG_PFRAME() {
        return V4L2_H264_DECODE_PARAM_FLAG_PFRAME;
    }
    private static final int V4L2_H264_DECODE_PARAM_FLAG_BFRAME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_H264_DECODE_PARAM_FLAG_BFRAME 16
     * }
     */
    public static int V4L2_H264_DECODE_PARAM_FLAG_BFRAME() {
        return V4L2_H264_DECODE_PARAM_FLAG_BFRAME;
    }
    private static final int V4L2_FWHT_VERSION = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FWHT_VERSION 3
     * }
     */
    public static int V4L2_FWHT_VERSION() {
        return V4L2_FWHT_VERSION;
    }
    private static final int V4L2_FWHT_FL_COMPONENTS_NUM_OFFSET = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FWHT_FL_COMPONENTS_NUM_OFFSET 16
     * }
     */
    public static int V4L2_FWHT_FL_COMPONENTS_NUM_OFFSET() {
        return V4L2_FWHT_FL_COMPONENTS_NUM_OFFSET;
    }
    private static final int V4L2_FWHT_FL_PIXENC_OFFSET = (int)19L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FWHT_FL_PIXENC_OFFSET 19
     * }
     */
    public static int V4L2_FWHT_FL_PIXENC_OFFSET() {
        return V4L2_FWHT_FL_PIXENC_OFFSET;
    }
    private static final int V4L2_VP8_SEGMENT_FLAG_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_SEGMENT_FLAG_ENABLED 1
     * }
     */
    public static int V4L2_VP8_SEGMENT_FLAG_ENABLED() {
        return V4L2_VP8_SEGMENT_FLAG_ENABLED;
    }
    private static final int V4L2_VP8_SEGMENT_FLAG_UPDATE_MAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_SEGMENT_FLAG_UPDATE_MAP 2
     * }
     */
    public static int V4L2_VP8_SEGMENT_FLAG_UPDATE_MAP() {
        return V4L2_VP8_SEGMENT_FLAG_UPDATE_MAP;
    }
    private static final int V4L2_VP8_SEGMENT_FLAG_UPDATE_FEATURE_DATA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_SEGMENT_FLAG_UPDATE_FEATURE_DATA 4
     * }
     */
    public static int V4L2_VP8_SEGMENT_FLAG_UPDATE_FEATURE_DATA() {
        return V4L2_VP8_SEGMENT_FLAG_UPDATE_FEATURE_DATA;
    }
    private static final int V4L2_VP8_SEGMENT_FLAG_DELTA_VALUE_MODE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_SEGMENT_FLAG_DELTA_VALUE_MODE 8
     * }
     */
    public static int V4L2_VP8_SEGMENT_FLAG_DELTA_VALUE_MODE() {
        return V4L2_VP8_SEGMENT_FLAG_DELTA_VALUE_MODE;
    }
    private static final int V4L2_VP8_LF_ADJ_ENABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_LF_ADJ_ENABLE 1
     * }
     */
    public static int V4L2_VP8_LF_ADJ_ENABLE() {
        return V4L2_VP8_LF_ADJ_ENABLE;
    }
    private static final int V4L2_VP8_LF_DELTA_UPDATE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_LF_DELTA_UPDATE 2
     * }
     */
    public static int V4L2_VP8_LF_DELTA_UPDATE() {
        return V4L2_VP8_LF_DELTA_UPDATE;
    }
    private static final int V4L2_VP8_LF_FILTER_TYPE_SIMPLE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_LF_FILTER_TYPE_SIMPLE 4
     * }
     */
    public static int V4L2_VP8_LF_FILTER_TYPE_SIMPLE() {
        return V4L2_VP8_LF_FILTER_TYPE_SIMPLE;
    }
    private static final int V4L2_VP8_COEFF_PROB_CNT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_COEFF_PROB_CNT 11
     * }
     */
    public static int V4L2_VP8_COEFF_PROB_CNT() {
        return V4L2_VP8_COEFF_PROB_CNT;
    }
    private static final int V4L2_VP8_MV_PROB_CNT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_MV_PROB_CNT 19
     * }
     */
    public static int V4L2_VP8_MV_PROB_CNT() {
        return V4L2_VP8_MV_PROB_CNT;
    }
    private static final int V4L2_VP8_FRAME_FLAG_KEY_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_KEY_FRAME 1
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_KEY_FRAME() {
        return V4L2_VP8_FRAME_FLAG_KEY_FRAME;
    }
    private static final int V4L2_VP8_FRAME_FLAG_EXPERIMENTAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_EXPERIMENTAL 2
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_EXPERIMENTAL() {
        return V4L2_VP8_FRAME_FLAG_EXPERIMENTAL;
    }
    private static final int V4L2_VP8_FRAME_FLAG_SHOW_FRAME = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_SHOW_FRAME 4
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_SHOW_FRAME() {
        return V4L2_VP8_FRAME_FLAG_SHOW_FRAME;
    }
    private static final int V4L2_VP8_FRAME_FLAG_MB_NO_SKIP_COEFF = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_MB_NO_SKIP_COEFF 8
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_MB_NO_SKIP_COEFF() {
        return V4L2_VP8_FRAME_FLAG_MB_NO_SKIP_COEFF;
    }
    private static final int V4L2_VP8_FRAME_FLAG_SIGN_BIAS_GOLDEN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_SIGN_BIAS_GOLDEN 16
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_SIGN_BIAS_GOLDEN() {
        return V4L2_VP8_FRAME_FLAG_SIGN_BIAS_GOLDEN;
    }
    private static final int V4L2_VP8_FRAME_FLAG_SIGN_BIAS_ALT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP8_FRAME_FLAG_SIGN_BIAS_ALT 32
     * }
     */
    public static int V4L2_VP8_FRAME_FLAG_SIGN_BIAS_ALT() {
        return V4L2_VP8_FRAME_FLAG_SIGN_BIAS_ALT;
    }
    private static final int V4L2_MPEG2_SEQ_FLAG_PROGRESSIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_SEQ_FLAG_PROGRESSIVE 1
     * }
     */
    public static int V4L2_MPEG2_SEQ_FLAG_PROGRESSIVE() {
        return V4L2_MPEG2_SEQ_FLAG_PROGRESSIVE;
    }
    private static final int V4L2_MPEG2_PIC_CODING_TYPE_I = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_CODING_TYPE_I 1
     * }
     */
    public static int V4L2_MPEG2_PIC_CODING_TYPE_I() {
        return V4L2_MPEG2_PIC_CODING_TYPE_I;
    }
    private static final int V4L2_MPEG2_PIC_CODING_TYPE_P = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_CODING_TYPE_P 2
     * }
     */
    public static int V4L2_MPEG2_PIC_CODING_TYPE_P() {
        return V4L2_MPEG2_PIC_CODING_TYPE_P;
    }
    private static final int V4L2_MPEG2_PIC_CODING_TYPE_B = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_CODING_TYPE_B 3
     * }
     */
    public static int V4L2_MPEG2_PIC_CODING_TYPE_B() {
        return V4L2_MPEG2_PIC_CODING_TYPE_B;
    }
    private static final int V4L2_MPEG2_PIC_CODING_TYPE_D = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_CODING_TYPE_D 4
     * }
     */
    public static int V4L2_MPEG2_PIC_CODING_TYPE_D() {
        return V4L2_MPEG2_PIC_CODING_TYPE_D;
    }
    private static final int V4L2_MPEG2_PIC_TOP_FIELD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_TOP_FIELD 1
     * }
     */
    public static int V4L2_MPEG2_PIC_TOP_FIELD() {
        return V4L2_MPEG2_PIC_TOP_FIELD;
    }
    private static final int V4L2_MPEG2_PIC_BOTTOM_FIELD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_BOTTOM_FIELD 2
     * }
     */
    public static int V4L2_MPEG2_PIC_BOTTOM_FIELD() {
        return V4L2_MPEG2_PIC_BOTTOM_FIELD;
    }
    private static final int V4L2_MPEG2_PIC_FRAME = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FRAME 3
     * }
     */
    public static int V4L2_MPEG2_PIC_FRAME() {
        return V4L2_MPEG2_PIC_FRAME;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_TOP_FIELD_FIRST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_TOP_FIELD_FIRST 1
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_TOP_FIELD_FIRST() {
        return V4L2_MPEG2_PIC_FLAG_TOP_FIELD_FIRST;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_FRAME_PRED_DCT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_FRAME_PRED_DCT 2
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_FRAME_PRED_DCT() {
        return V4L2_MPEG2_PIC_FLAG_FRAME_PRED_DCT;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_CONCEALMENT_MV = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_CONCEALMENT_MV 4
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_CONCEALMENT_MV() {
        return V4L2_MPEG2_PIC_FLAG_CONCEALMENT_MV;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_Q_SCALE_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_Q_SCALE_TYPE 8
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_Q_SCALE_TYPE() {
        return V4L2_MPEG2_PIC_FLAG_Q_SCALE_TYPE;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_INTRA_VLC = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_INTRA_VLC 16
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_INTRA_VLC() {
        return V4L2_MPEG2_PIC_FLAG_INTRA_VLC;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_ALT_SCAN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_ALT_SCAN 32
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_ALT_SCAN() {
        return V4L2_MPEG2_PIC_FLAG_ALT_SCAN;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_REPEAT_FIRST = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_REPEAT_FIRST 64
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_REPEAT_FIRST() {
        return V4L2_MPEG2_PIC_FLAG_REPEAT_FIRST;
    }
    private static final int V4L2_MPEG2_PIC_FLAG_PROGRESSIVE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MPEG2_PIC_FLAG_PROGRESSIVE 128
     * }
     */
    public static int V4L2_MPEG2_PIC_FLAG_PROGRESSIVE() {
        return V4L2_MPEG2_PIC_FLAG_PROGRESSIVE;
    }
    private static final int V4L2_HEVC_SLICE_TYPE_B = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SLICE_TYPE_B 0
     * }
     */
    public static int V4L2_HEVC_SLICE_TYPE_B() {
        return V4L2_HEVC_SLICE_TYPE_B;
    }
    private static final int V4L2_HEVC_SLICE_TYPE_P = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SLICE_TYPE_P 1
     * }
     */
    public static int V4L2_HEVC_SLICE_TYPE_P() {
        return V4L2_HEVC_SLICE_TYPE_P;
    }
    private static final int V4L2_HEVC_SLICE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SLICE_TYPE_I 2
     * }
     */
    public static int V4L2_HEVC_SLICE_TYPE_I() {
        return V4L2_HEVC_SLICE_TYPE_I;
    }
    private static final int V4L2_HEVC_DPB_ENTRY_LONG_TERM_REFERENCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_DPB_ENTRY_LONG_TERM_REFERENCE 1
     * }
     */
    public static int V4L2_HEVC_DPB_ENTRY_LONG_TERM_REFERENCE() {
        return V4L2_HEVC_DPB_ENTRY_LONG_TERM_REFERENCE;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_FRAME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_FRAME 0
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_FRAME() {
        return V4L2_HEVC_SEI_PIC_STRUCT_FRAME;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_TOP_FIELD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_TOP_FIELD 1
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_TOP_FIELD() {
        return V4L2_HEVC_SEI_PIC_STRUCT_TOP_FIELD;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_FIELD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_FIELD 2
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_FIELD() {
        return V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_FIELD;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM 3
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM() {
        return V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP 4
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP() {
        return V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM_TOP = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM_TOP 5
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM_TOP() {
        return V4L2_HEVC_SEI_PIC_STRUCT_TOP_BOTTOM_TOP;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM = (int)6L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM 6
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM() {
        return V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_FRAME_DOUBLING = (int)7L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_FRAME_DOUBLING 7
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_FRAME_DOUBLING() {
        return V4L2_HEVC_SEI_PIC_STRUCT_FRAME_DOUBLING;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_FRAME_TRIPLING = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_FRAME_TRIPLING 8
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_FRAME_TRIPLING() {
        return V4L2_HEVC_SEI_PIC_STRUCT_FRAME_TRIPLING;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_PREVIOUS_BOTTOM = (int)9L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_PREVIOUS_BOTTOM 9
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_PREVIOUS_BOTTOM() {
        return V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_PREVIOUS_BOTTOM;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_PREVIOUS_TOP = (int)10L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_PREVIOUS_TOP 10
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_PREVIOUS_TOP() {
        return V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_PREVIOUS_TOP;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_NEXT_BOTTOM = (int)11L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_NEXT_BOTTOM 11
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_NEXT_BOTTOM() {
        return V4L2_HEVC_SEI_PIC_STRUCT_TOP_PAIRED_NEXT_BOTTOM;
    }
    private static final int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_NEXT_TOP = (int)12L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_NEXT_TOP 12
     * }
     */
    public static int V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_NEXT_TOP() {
        return V4L2_HEVC_SEI_PIC_STRUCT_BOTTOM_PAIRED_NEXT_TOP;
    }
    private static final int V4L2_HEVC_DPB_ENTRIES_NUM_MAX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_DPB_ENTRIES_NUM_MAX 16
     * }
     */
    public static int V4L2_HEVC_DPB_ENTRIES_NUM_MAX() {
        return V4L2_HEVC_DPB_ENTRIES_NUM_MAX;
    }
    private static final int V4L2_HEVC_DECODE_PARAM_FLAG_IRAP_PIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_DECODE_PARAM_FLAG_IRAP_PIC 1
     * }
     */
    public static int V4L2_HEVC_DECODE_PARAM_FLAG_IRAP_PIC() {
        return V4L2_HEVC_DECODE_PARAM_FLAG_IRAP_PIC;
    }
    private static final int V4L2_HEVC_DECODE_PARAM_FLAG_IDR_PIC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_DECODE_PARAM_FLAG_IDR_PIC 2
     * }
     */
    public static int V4L2_HEVC_DECODE_PARAM_FLAG_IDR_PIC() {
        return V4L2_HEVC_DECODE_PARAM_FLAG_IDR_PIC;
    }
    private static final int V4L2_HEVC_DECODE_PARAM_FLAG_NO_OUTPUT_OF_PRIOR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HEVC_DECODE_PARAM_FLAG_NO_OUTPUT_OF_PRIOR 4
     * }
     */
    public static int V4L2_HEVC_DECODE_PARAM_FLAG_NO_OUTPUT_OF_PRIOR() {
        return V4L2_HEVC_DECODE_PARAM_FLAG_NO_OUTPUT_OF_PRIOR;
    }
    private static final int V4L2_HDR10_MASTERING_PRIMARIES_X_LOW = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_PRIMARIES_X_LOW 5
     * }
     */
    public static int V4L2_HDR10_MASTERING_PRIMARIES_X_LOW() {
        return V4L2_HDR10_MASTERING_PRIMARIES_X_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_PRIMARIES_X_HIGH = (int)37000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_PRIMARIES_X_HIGH 37000
     * }
     */
    public static int V4L2_HDR10_MASTERING_PRIMARIES_X_HIGH() {
        return V4L2_HDR10_MASTERING_PRIMARIES_X_HIGH;
    }
    private static final int V4L2_HDR10_MASTERING_PRIMARIES_Y_LOW = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_PRIMARIES_Y_LOW 5
     * }
     */
    public static int V4L2_HDR10_MASTERING_PRIMARIES_Y_LOW() {
        return V4L2_HDR10_MASTERING_PRIMARIES_Y_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_PRIMARIES_Y_HIGH = (int)42000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_PRIMARIES_Y_HIGH 42000
     * }
     */
    public static int V4L2_HDR10_MASTERING_PRIMARIES_Y_HIGH() {
        return V4L2_HDR10_MASTERING_PRIMARIES_Y_HIGH;
    }
    private static final int V4L2_HDR10_MASTERING_WHITE_POINT_X_LOW = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_WHITE_POINT_X_LOW 5
     * }
     */
    public static int V4L2_HDR10_MASTERING_WHITE_POINT_X_LOW() {
        return V4L2_HDR10_MASTERING_WHITE_POINT_X_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_WHITE_POINT_X_HIGH = (int)37000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_WHITE_POINT_X_HIGH 37000
     * }
     */
    public static int V4L2_HDR10_MASTERING_WHITE_POINT_X_HIGH() {
        return V4L2_HDR10_MASTERING_WHITE_POINT_X_HIGH;
    }
    private static final int V4L2_HDR10_MASTERING_WHITE_POINT_Y_LOW = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_WHITE_POINT_Y_LOW 5
     * }
     */
    public static int V4L2_HDR10_MASTERING_WHITE_POINT_Y_LOW() {
        return V4L2_HDR10_MASTERING_WHITE_POINT_Y_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_WHITE_POINT_Y_HIGH = (int)42000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_WHITE_POINT_Y_HIGH 42000
     * }
     */
    public static int V4L2_HDR10_MASTERING_WHITE_POINT_Y_HIGH() {
        return V4L2_HDR10_MASTERING_WHITE_POINT_Y_HIGH;
    }
    private static final int V4L2_HDR10_MASTERING_MAX_LUMA_LOW = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_MAX_LUMA_LOW 50000
     * }
     */
    public static int V4L2_HDR10_MASTERING_MAX_LUMA_LOW() {
        return V4L2_HDR10_MASTERING_MAX_LUMA_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_MAX_LUMA_HIGH = (int)100000000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_MAX_LUMA_HIGH 100000000
     * }
     */
    public static int V4L2_HDR10_MASTERING_MAX_LUMA_HIGH() {
        return V4L2_HDR10_MASTERING_MAX_LUMA_HIGH;
    }
    private static final int V4L2_HDR10_MASTERING_MIN_LUMA_LOW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_MIN_LUMA_LOW 1
     * }
     */
    public static int V4L2_HDR10_MASTERING_MIN_LUMA_LOW() {
        return V4L2_HDR10_MASTERING_MIN_LUMA_LOW;
    }
    private static final int V4L2_HDR10_MASTERING_MIN_LUMA_HIGH = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define V4L2_HDR10_MASTERING_MIN_LUMA_HIGH 50000
     * }
     */
    public static int V4L2_HDR10_MASTERING_MIN_LUMA_HIGH() {
        return V4L2_HDR10_MASTERING_MIN_LUMA_HIGH;
    }
    private static final int V4L2_VP9_LOOP_FILTER_FLAG_DELTA_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_LOOP_FILTER_FLAG_DELTA_ENABLED 1
     * }
     */
    public static int V4L2_VP9_LOOP_FILTER_FLAG_DELTA_ENABLED() {
        return V4L2_VP9_LOOP_FILTER_FLAG_DELTA_ENABLED;
    }
    private static final int V4L2_VP9_LOOP_FILTER_FLAG_DELTA_UPDATE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_LOOP_FILTER_FLAG_DELTA_UPDATE 2
     * }
     */
    public static int V4L2_VP9_LOOP_FILTER_FLAG_DELTA_UPDATE() {
        return V4L2_VP9_LOOP_FILTER_FLAG_DELTA_UPDATE;
    }
    private static final int V4L2_VP9_SEGMENTATION_FLAG_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENTATION_FLAG_ENABLED 1
     * }
     */
    public static int V4L2_VP9_SEGMENTATION_FLAG_ENABLED() {
        return V4L2_VP9_SEGMENTATION_FLAG_ENABLED;
    }
    private static final int V4L2_VP9_SEGMENTATION_FLAG_UPDATE_MAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENTATION_FLAG_UPDATE_MAP 2
     * }
     */
    public static int V4L2_VP9_SEGMENTATION_FLAG_UPDATE_MAP() {
        return V4L2_VP9_SEGMENTATION_FLAG_UPDATE_MAP;
    }
    private static final int V4L2_VP9_SEGMENTATION_FLAG_TEMPORAL_UPDATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENTATION_FLAG_TEMPORAL_UPDATE 4
     * }
     */
    public static int V4L2_VP9_SEGMENTATION_FLAG_TEMPORAL_UPDATE() {
        return V4L2_VP9_SEGMENTATION_FLAG_TEMPORAL_UPDATE;
    }
    private static final int V4L2_VP9_SEGMENTATION_FLAG_UPDATE_DATA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENTATION_FLAG_UPDATE_DATA 8
     * }
     */
    public static int V4L2_VP9_SEGMENTATION_FLAG_UPDATE_DATA() {
        return V4L2_VP9_SEGMENTATION_FLAG_UPDATE_DATA;
    }
    private static final int V4L2_VP9_SEGMENTATION_FLAG_ABS_OR_DELTA_UPDATE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENTATION_FLAG_ABS_OR_DELTA_UPDATE 16
     * }
     */
    public static int V4L2_VP9_SEGMENTATION_FLAG_ABS_OR_DELTA_UPDATE() {
        return V4L2_VP9_SEGMENTATION_FLAG_ABS_OR_DELTA_UPDATE;
    }
    private static final int V4L2_VP9_SEG_LVL_ALT_Q = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEG_LVL_ALT_Q 0
     * }
     */
    public static int V4L2_VP9_SEG_LVL_ALT_Q() {
        return V4L2_VP9_SEG_LVL_ALT_Q;
    }
    private static final int V4L2_VP9_SEG_LVL_ALT_L = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEG_LVL_ALT_L 1
     * }
     */
    public static int V4L2_VP9_SEG_LVL_ALT_L() {
        return V4L2_VP9_SEG_LVL_ALT_L;
    }
    private static final int V4L2_VP9_SEG_LVL_REF_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEG_LVL_REF_FRAME 2
     * }
     */
    public static int V4L2_VP9_SEG_LVL_REF_FRAME() {
        return V4L2_VP9_SEG_LVL_REF_FRAME;
    }
    private static final int V4L2_VP9_SEG_LVL_SKIP = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEG_LVL_SKIP 3
     * }
     */
    public static int V4L2_VP9_SEG_LVL_SKIP() {
        return V4L2_VP9_SEG_LVL_SKIP;
    }
    private static final int V4L2_VP9_SEG_LVL_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEG_LVL_MAX 4
     * }
     */
    public static int V4L2_VP9_SEG_LVL_MAX() {
        return V4L2_VP9_SEG_LVL_MAX;
    }
    private static final int V4L2_VP9_SEGMENT_FEATURE_ENABLED_MASK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SEGMENT_FEATURE_ENABLED_MASK 15
     * }
     */
    public static int V4L2_VP9_SEGMENT_FEATURE_ENABLED_MASK() {
        return V4L2_VP9_SEGMENT_FEATURE_ENABLED_MASK;
    }
    private static final int V4L2_VP9_FRAME_FLAG_KEY_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_KEY_FRAME 1
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_KEY_FRAME() {
        return V4L2_VP9_FRAME_FLAG_KEY_FRAME;
    }
    private static final int V4L2_VP9_FRAME_FLAG_SHOW_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_SHOW_FRAME 2
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_SHOW_FRAME() {
        return V4L2_VP9_FRAME_FLAG_SHOW_FRAME;
    }
    private static final int V4L2_VP9_FRAME_FLAG_ERROR_RESILIENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_ERROR_RESILIENT 4
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_ERROR_RESILIENT() {
        return V4L2_VP9_FRAME_FLAG_ERROR_RESILIENT;
    }
    private static final int V4L2_VP9_FRAME_FLAG_INTRA_ONLY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_INTRA_ONLY 8
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_INTRA_ONLY() {
        return V4L2_VP9_FRAME_FLAG_INTRA_ONLY;
    }
    private static final int V4L2_VP9_FRAME_FLAG_ALLOW_HIGH_PREC_MV = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_ALLOW_HIGH_PREC_MV 16
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_ALLOW_HIGH_PREC_MV() {
        return V4L2_VP9_FRAME_FLAG_ALLOW_HIGH_PREC_MV;
    }
    private static final int V4L2_VP9_FRAME_FLAG_REFRESH_FRAME_CTX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_REFRESH_FRAME_CTX 32
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_REFRESH_FRAME_CTX() {
        return V4L2_VP9_FRAME_FLAG_REFRESH_FRAME_CTX;
    }
    private static final int V4L2_VP9_FRAME_FLAG_PARALLEL_DEC_MODE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_PARALLEL_DEC_MODE 64
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_PARALLEL_DEC_MODE() {
        return V4L2_VP9_FRAME_FLAG_PARALLEL_DEC_MODE;
    }
    private static final int V4L2_VP9_FRAME_FLAG_X_SUBSAMPLING = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_X_SUBSAMPLING 128
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_X_SUBSAMPLING() {
        return V4L2_VP9_FRAME_FLAG_X_SUBSAMPLING;
    }
    private static final int V4L2_VP9_FRAME_FLAG_Y_SUBSAMPLING = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_Y_SUBSAMPLING 256
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_Y_SUBSAMPLING() {
        return V4L2_VP9_FRAME_FLAG_Y_SUBSAMPLING;
    }
    private static final int V4L2_VP9_FRAME_FLAG_COLOR_RANGE_FULL_SWING = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_FRAME_FLAG_COLOR_RANGE_FULL_SWING 512
     * }
     */
    public static int V4L2_VP9_FRAME_FLAG_COLOR_RANGE_FULL_SWING() {
        return V4L2_VP9_FRAME_FLAG_COLOR_RANGE_FULL_SWING;
    }
    private static final int V4L2_VP9_SIGN_BIAS_LAST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SIGN_BIAS_LAST 1
     * }
     */
    public static int V4L2_VP9_SIGN_BIAS_LAST() {
        return V4L2_VP9_SIGN_BIAS_LAST;
    }
    private static final int V4L2_VP9_SIGN_BIAS_GOLDEN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SIGN_BIAS_GOLDEN 2
     * }
     */
    public static int V4L2_VP9_SIGN_BIAS_GOLDEN() {
        return V4L2_VP9_SIGN_BIAS_GOLDEN;
    }
    private static final int V4L2_VP9_SIGN_BIAS_ALT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_SIGN_BIAS_ALT 4
     * }
     */
    public static int V4L2_VP9_SIGN_BIAS_ALT() {
        return V4L2_VP9_SIGN_BIAS_ALT;
    }
    private static final int V4L2_VP9_RESET_FRAME_CTX_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_RESET_FRAME_CTX_NONE 0
     * }
     */
    public static int V4L2_VP9_RESET_FRAME_CTX_NONE() {
        return V4L2_VP9_RESET_FRAME_CTX_NONE;
    }
    private static final int V4L2_VP9_RESET_FRAME_CTX_SPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_RESET_FRAME_CTX_SPEC 1
     * }
     */
    public static int V4L2_VP9_RESET_FRAME_CTX_SPEC() {
        return V4L2_VP9_RESET_FRAME_CTX_SPEC;
    }
    private static final int V4L2_VP9_RESET_FRAME_CTX_ALL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_RESET_FRAME_CTX_ALL 2
     * }
     */
    public static int V4L2_VP9_RESET_FRAME_CTX_ALL() {
        return V4L2_VP9_RESET_FRAME_CTX_ALL;
    }
    private static final int V4L2_VP9_INTERP_FILTER_EIGHTTAP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_INTERP_FILTER_EIGHTTAP 0
     * }
     */
    public static int V4L2_VP9_INTERP_FILTER_EIGHTTAP() {
        return V4L2_VP9_INTERP_FILTER_EIGHTTAP;
    }
    private static final int V4L2_VP9_INTERP_FILTER_EIGHTTAP_SMOOTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_INTERP_FILTER_EIGHTTAP_SMOOTH 1
     * }
     */
    public static int V4L2_VP9_INTERP_FILTER_EIGHTTAP_SMOOTH() {
        return V4L2_VP9_INTERP_FILTER_EIGHTTAP_SMOOTH;
    }
    private static final int V4L2_VP9_INTERP_FILTER_EIGHTTAP_SHARP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_INTERP_FILTER_EIGHTTAP_SHARP 2
     * }
     */
    public static int V4L2_VP9_INTERP_FILTER_EIGHTTAP_SHARP() {
        return V4L2_VP9_INTERP_FILTER_EIGHTTAP_SHARP;
    }
    private static final int V4L2_VP9_INTERP_FILTER_BILINEAR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_INTERP_FILTER_BILINEAR 3
     * }
     */
    public static int V4L2_VP9_INTERP_FILTER_BILINEAR() {
        return V4L2_VP9_INTERP_FILTER_BILINEAR;
    }
    private static final int V4L2_VP9_INTERP_FILTER_SWITCHABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_INTERP_FILTER_SWITCHABLE 4
     * }
     */
    public static int V4L2_VP9_INTERP_FILTER_SWITCHABLE() {
        return V4L2_VP9_INTERP_FILTER_SWITCHABLE;
    }
    private static final int V4L2_VP9_REFERENCE_MODE_SINGLE_REFERENCE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_REFERENCE_MODE_SINGLE_REFERENCE 0
     * }
     */
    public static int V4L2_VP9_REFERENCE_MODE_SINGLE_REFERENCE() {
        return V4L2_VP9_REFERENCE_MODE_SINGLE_REFERENCE;
    }
    private static final int V4L2_VP9_REFERENCE_MODE_COMPOUND_REFERENCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_REFERENCE_MODE_COMPOUND_REFERENCE 1
     * }
     */
    public static int V4L2_VP9_REFERENCE_MODE_COMPOUND_REFERENCE() {
        return V4L2_VP9_REFERENCE_MODE_COMPOUND_REFERENCE;
    }
    private static final int V4L2_VP9_REFERENCE_MODE_SELECT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_REFERENCE_MODE_SELECT 2
     * }
     */
    public static int V4L2_VP9_REFERENCE_MODE_SELECT() {
        return V4L2_VP9_REFERENCE_MODE_SELECT;
    }
    private static final int V4L2_VP9_PROFILE_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_PROFILE_MAX 3
     * }
     */
    public static int V4L2_VP9_PROFILE_MAX() {
        return V4L2_VP9_PROFILE_MAX;
    }
    private static final int V4L2_VP9_NUM_FRAME_CTX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_NUM_FRAME_CTX 4
     * }
     */
    public static int V4L2_VP9_NUM_FRAME_CTX() {
        return V4L2_VP9_NUM_FRAME_CTX;
    }
    private static final int V4L2_VP9_TX_MODE_ONLY_4X4 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_TX_MODE_ONLY_4X4 0
     * }
     */
    public static int V4L2_VP9_TX_MODE_ONLY_4X4() {
        return V4L2_VP9_TX_MODE_ONLY_4X4;
    }
    private static final int V4L2_VP9_TX_MODE_ALLOW_8X8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_TX_MODE_ALLOW_8X8 1
     * }
     */
    public static int V4L2_VP9_TX_MODE_ALLOW_8X8() {
        return V4L2_VP9_TX_MODE_ALLOW_8X8;
    }
    private static final int V4L2_VP9_TX_MODE_ALLOW_16X16 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_TX_MODE_ALLOW_16X16 2
     * }
     */
    public static int V4L2_VP9_TX_MODE_ALLOW_16X16() {
        return V4L2_VP9_TX_MODE_ALLOW_16X16;
    }
    private static final int V4L2_VP9_TX_MODE_ALLOW_32X32 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_TX_MODE_ALLOW_32X32 3
     * }
     */
    public static int V4L2_VP9_TX_MODE_ALLOW_32X32() {
        return V4L2_VP9_TX_MODE_ALLOW_32X32;
    }
    private static final int V4L2_VP9_TX_MODE_SELECT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_VP9_TX_MODE_SELECT 4
     * }
     */
    public static int V4L2_VP9_TX_MODE_SELECT() {
        return V4L2_VP9_TX_MODE_SELECT;
    }
    private static final int V4L2_AV1_TOTAL_REFS_PER_FRAME = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_TOTAL_REFS_PER_FRAME 8
     * }
     */
    public static int V4L2_AV1_TOTAL_REFS_PER_FRAME() {
        return V4L2_AV1_TOTAL_REFS_PER_FRAME;
    }
    private static final int V4L2_AV1_CDEF_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_CDEF_MAX 8
     * }
     */
    public static int V4L2_AV1_CDEF_MAX() {
        return V4L2_AV1_CDEF_MAX;
    }
    private static final int V4L2_AV1_NUM_PLANES_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_NUM_PLANES_MAX 3
     * }
     */
    public static int V4L2_AV1_NUM_PLANES_MAX() {
        return V4L2_AV1_NUM_PLANES_MAX;
    }
    private static final int V4L2_AV1_MAX_SEGMENTS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_MAX_SEGMENTS 8
     * }
     */
    public static int V4L2_AV1_MAX_SEGMENTS() {
        return V4L2_AV1_MAX_SEGMENTS;
    }
    private static final int V4L2_AV1_REFS_PER_FRAME = (int)7L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_REFS_PER_FRAME 7
     * }
     */
    public static int V4L2_AV1_REFS_PER_FRAME() {
        return V4L2_AV1_REFS_PER_FRAME;
    }
    private static final int V4L2_AV1_AR_COEFFS_SIZE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_AR_COEFFS_SIZE 25
     * }
     */
    public static int V4L2_AV1_AR_COEFFS_SIZE() {
        return V4L2_AV1_AR_COEFFS_SIZE;
    }
    private static final int V4L2_AV1_MAX_NUM_PLANES = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_MAX_NUM_PLANES 3
     * }
     */
    public static int V4L2_AV1_MAX_NUM_PLANES() {
        return V4L2_AV1_MAX_NUM_PLANES;
    }
    private static final int V4L2_AV1_MAX_TILE_COLS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_MAX_TILE_COLS 64
     * }
     */
    public static int V4L2_AV1_MAX_TILE_COLS() {
        return V4L2_AV1_MAX_TILE_COLS;
    }
    private static final int V4L2_AV1_MAX_TILE_ROWS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_MAX_TILE_ROWS 64
     * }
     */
    public static int V4L2_AV1_MAX_TILE_ROWS() {
        return V4L2_AV1_MAX_TILE_ROWS;
    }
    private static final int V4L2_AV1_MAX_TILE_COUNT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_MAX_TILE_COUNT 512
     * }
     */
    public static int V4L2_AV1_MAX_TILE_COUNT() {
        return V4L2_AV1_MAX_TILE_COUNT;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_STILL_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_STILL_PICTURE 1
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_STILL_PICTURE() {
        return V4L2_AV1_SEQUENCE_FLAG_STILL_PICTURE;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_USE_128X128_SUPERBLOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_USE_128X128_SUPERBLOCK 2
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_USE_128X128_SUPERBLOCK() {
        return V4L2_AV1_SEQUENCE_FLAG_USE_128X128_SUPERBLOCK;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_FILTER_INTRA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_FILTER_INTRA 4
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_FILTER_INTRA() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_FILTER_INTRA;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTRA_EDGE_FILTER = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTRA_EDGE_FILTER 8
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTRA_EDGE_FILTER() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTRA_EDGE_FILTER;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTERINTRA_COMPOUND = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTERINTRA_COMPOUND 16
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTERINTRA_COMPOUND() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_INTERINTRA_COMPOUND;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_MASKED_COMPOUND = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_MASKED_COMPOUND 32
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_MASKED_COMPOUND() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_MASKED_COMPOUND;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_WARPED_MOTION = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_WARPED_MOTION 64
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_WARPED_MOTION() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_WARPED_MOTION;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_DUAL_FILTER = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_DUAL_FILTER 128
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_DUAL_FILTER() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_DUAL_FILTER;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_ORDER_HINT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_ORDER_HINT 256
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_ORDER_HINT() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_ORDER_HINT;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_JNT_COMP = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_JNT_COMP 512
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_JNT_COMP() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_JNT_COMP;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_REF_FRAME_MVS = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_REF_FRAME_MVS 1024
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_REF_FRAME_MVS() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_REF_FRAME_MVS;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_SUPERRES = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_SUPERRES 2048
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_SUPERRES() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_SUPERRES;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_CDEF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_CDEF 4096
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_CDEF() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_CDEF;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_ENABLE_RESTORATION = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_ENABLE_RESTORATION 8192
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_ENABLE_RESTORATION() {
        return V4L2_AV1_SEQUENCE_FLAG_ENABLE_RESTORATION;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_MONO_CHROME = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_MONO_CHROME 16384
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_MONO_CHROME() {
        return V4L2_AV1_SEQUENCE_FLAG_MONO_CHROME;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_COLOR_RANGE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_COLOR_RANGE 32768
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_COLOR_RANGE() {
        return V4L2_AV1_SEQUENCE_FLAG_COLOR_RANGE;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_X = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_X 65536
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_X() {
        return V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_X;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_Y = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_Y 131072
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_Y() {
        return V4L2_AV1_SEQUENCE_FLAG_SUBSAMPLING_Y;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_FILM_GRAIN_PARAMS_PRESENT = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_FILM_GRAIN_PARAMS_PRESENT 262144
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_FILM_GRAIN_PARAMS_PRESENT() {
        return V4L2_AV1_SEQUENCE_FLAG_FILM_GRAIN_PARAMS_PRESENT;
    }
    private static final int V4L2_AV1_SEQUENCE_FLAG_SEPARATE_UV_DELTA_Q = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEQUENCE_FLAG_SEPARATE_UV_DELTA_Q 524288
     * }
     */
    public static int V4L2_AV1_SEQUENCE_FLAG_SEPARATE_UV_DELTA_Q() {
        return V4L2_AV1_SEQUENCE_FLAG_SEPARATE_UV_DELTA_Q;
    }
    private static final int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_GLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_GLOBAL_MOTION_FLAG_IS_GLOBAL 1
     * }
     */
    public static int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_GLOBAL() {
        return V4L2_AV1_GLOBAL_MOTION_FLAG_IS_GLOBAL;
    }
    private static final int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_ROT_ZOOM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_GLOBAL_MOTION_FLAG_IS_ROT_ZOOM 2
     * }
     */
    public static int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_ROT_ZOOM() {
        return V4L2_AV1_GLOBAL_MOTION_FLAG_IS_ROT_ZOOM;
    }
    private static final int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_TRANSLATION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_GLOBAL_MOTION_FLAG_IS_TRANSLATION 4
     * }
     */
    public static int V4L2_AV1_GLOBAL_MOTION_FLAG_IS_TRANSLATION() {
        return V4L2_AV1_GLOBAL_MOTION_FLAG_IS_TRANSLATION;
    }
    private static final int V4L2_AV1_LOOP_RESTORATION_FLAG_USES_LR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_RESTORATION_FLAG_USES_LR 1
     * }
     */
    public static int V4L2_AV1_LOOP_RESTORATION_FLAG_USES_LR() {
        return V4L2_AV1_LOOP_RESTORATION_FLAG_USES_LR;
    }
    private static final int V4L2_AV1_LOOP_RESTORATION_FLAG_USES_CHROMA_LR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_RESTORATION_FLAG_USES_CHROMA_LR 2
     * }
     */
    public static int V4L2_AV1_LOOP_RESTORATION_FLAG_USES_CHROMA_LR() {
        return V4L2_AV1_LOOP_RESTORATION_FLAG_USES_CHROMA_LR;
    }
    private static final int V4L2_AV1_SEGMENTATION_FLAG_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEGMENTATION_FLAG_ENABLED 1
     * }
     */
    public static int V4L2_AV1_SEGMENTATION_FLAG_ENABLED() {
        return V4L2_AV1_SEGMENTATION_FLAG_ENABLED;
    }
    private static final int V4L2_AV1_SEGMENTATION_FLAG_UPDATE_MAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEGMENTATION_FLAG_UPDATE_MAP 2
     * }
     */
    public static int V4L2_AV1_SEGMENTATION_FLAG_UPDATE_MAP() {
        return V4L2_AV1_SEGMENTATION_FLAG_UPDATE_MAP;
    }
    private static final int V4L2_AV1_SEGMENTATION_FLAG_TEMPORAL_UPDATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEGMENTATION_FLAG_TEMPORAL_UPDATE 4
     * }
     */
    public static int V4L2_AV1_SEGMENTATION_FLAG_TEMPORAL_UPDATE() {
        return V4L2_AV1_SEGMENTATION_FLAG_TEMPORAL_UPDATE;
    }
    private static final int V4L2_AV1_SEGMENTATION_FLAG_UPDATE_DATA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEGMENTATION_FLAG_UPDATE_DATA 8
     * }
     */
    public static int V4L2_AV1_SEGMENTATION_FLAG_UPDATE_DATA() {
        return V4L2_AV1_SEGMENTATION_FLAG_UPDATE_DATA;
    }
    private static final int V4L2_AV1_SEGMENTATION_FLAG_SEG_ID_PRE_SKIP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_SEGMENTATION_FLAG_SEG_ID_PRE_SKIP 16
     * }
     */
    public static int V4L2_AV1_SEGMENTATION_FLAG_SEG_ID_PRE_SKIP() {
        return V4L2_AV1_SEGMENTATION_FLAG_SEG_ID_PRE_SKIP;
    }
    private static final int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_FILTER_FLAG_DELTA_ENABLED 1
     * }
     */
    public static int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_ENABLED() {
        return V4L2_AV1_LOOP_FILTER_FLAG_DELTA_ENABLED;
    }
    private static final int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_UPDATE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_FILTER_FLAG_DELTA_UPDATE 2
     * }
     */
    public static int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_UPDATE() {
        return V4L2_AV1_LOOP_FILTER_FLAG_DELTA_UPDATE;
    }
    private static final int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_PRESENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_PRESENT 4
     * }
     */
    public static int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_PRESENT() {
        return V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_PRESENT;
    }
    private static final int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_MULTI = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_MULTI 8
     * }
     */
    public static int V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_MULTI() {
        return V4L2_AV1_LOOP_FILTER_FLAG_DELTA_LF_MULTI;
    }
    private static final int V4L2_AV1_QUANTIZATION_FLAG_DIFF_UV_DELTA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_QUANTIZATION_FLAG_DIFF_UV_DELTA 1
     * }
     */
    public static int V4L2_AV1_QUANTIZATION_FLAG_DIFF_UV_DELTA() {
        return V4L2_AV1_QUANTIZATION_FLAG_DIFF_UV_DELTA;
    }
    private static final int V4L2_AV1_QUANTIZATION_FLAG_USING_QMATRIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_QUANTIZATION_FLAG_USING_QMATRIX 2
     * }
     */
    public static int V4L2_AV1_QUANTIZATION_FLAG_USING_QMATRIX() {
        return V4L2_AV1_QUANTIZATION_FLAG_USING_QMATRIX;
    }
    private static final int V4L2_AV1_QUANTIZATION_FLAG_DELTA_Q_PRESENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_QUANTIZATION_FLAG_DELTA_Q_PRESENT 4
     * }
     */
    public static int V4L2_AV1_QUANTIZATION_FLAG_DELTA_Q_PRESENT() {
        return V4L2_AV1_QUANTIZATION_FLAG_DELTA_Q_PRESENT;
    }
    private static final int V4L2_AV1_TILE_INFO_FLAG_UNIFORM_TILE_SPACING = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_TILE_INFO_FLAG_UNIFORM_TILE_SPACING 1
     * }
     */
    public static int V4L2_AV1_TILE_INFO_FLAG_UNIFORM_TILE_SPACING() {
        return V4L2_AV1_TILE_INFO_FLAG_UNIFORM_TILE_SPACING;
    }
    private static final int V4L2_AV1_FRAME_FLAG_SHOW_FRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_SHOW_FRAME 1
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_SHOW_FRAME() {
        return V4L2_AV1_FRAME_FLAG_SHOW_FRAME;
    }
    private static final int V4L2_AV1_FRAME_FLAG_SHOWABLE_FRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_SHOWABLE_FRAME 2
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_SHOWABLE_FRAME() {
        return V4L2_AV1_FRAME_FLAG_SHOWABLE_FRAME;
    }
    private static final int V4L2_AV1_FRAME_FLAG_ERROR_RESILIENT_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_ERROR_RESILIENT_MODE 4
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_ERROR_RESILIENT_MODE() {
        return V4L2_AV1_FRAME_FLAG_ERROR_RESILIENT_MODE;
    }
    private static final int V4L2_AV1_FRAME_FLAG_DISABLE_CDF_UPDATE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_DISABLE_CDF_UPDATE 8
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_DISABLE_CDF_UPDATE() {
        return V4L2_AV1_FRAME_FLAG_DISABLE_CDF_UPDATE;
    }
    private static final int V4L2_AV1_FRAME_FLAG_ALLOW_SCREEN_CONTENT_TOOLS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_ALLOW_SCREEN_CONTENT_TOOLS 16
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_ALLOW_SCREEN_CONTENT_TOOLS() {
        return V4L2_AV1_FRAME_FLAG_ALLOW_SCREEN_CONTENT_TOOLS;
    }
    private static final int V4L2_AV1_FRAME_FLAG_FORCE_INTEGER_MV = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_FORCE_INTEGER_MV 32
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_FORCE_INTEGER_MV() {
        return V4L2_AV1_FRAME_FLAG_FORCE_INTEGER_MV;
    }
    private static final int V4L2_AV1_FRAME_FLAG_ALLOW_INTRABC = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_ALLOW_INTRABC 64
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_ALLOW_INTRABC() {
        return V4L2_AV1_FRAME_FLAG_ALLOW_INTRABC;
    }
    private static final int V4L2_AV1_FRAME_FLAG_USE_SUPERRES = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_USE_SUPERRES 128
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_USE_SUPERRES() {
        return V4L2_AV1_FRAME_FLAG_USE_SUPERRES;
    }
    private static final int V4L2_AV1_FRAME_FLAG_ALLOW_HIGH_PRECISION_MV = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_ALLOW_HIGH_PRECISION_MV 256
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_ALLOW_HIGH_PRECISION_MV() {
        return V4L2_AV1_FRAME_FLAG_ALLOW_HIGH_PRECISION_MV;
    }
    private static final int V4L2_AV1_FRAME_FLAG_IS_MOTION_MODE_SWITCHABLE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_IS_MOTION_MODE_SWITCHABLE 512
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_IS_MOTION_MODE_SWITCHABLE() {
        return V4L2_AV1_FRAME_FLAG_IS_MOTION_MODE_SWITCHABLE;
    }
    private static final int V4L2_AV1_FRAME_FLAG_USE_REF_FRAME_MVS = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_USE_REF_FRAME_MVS 1024
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_USE_REF_FRAME_MVS() {
        return V4L2_AV1_FRAME_FLAG_USE_REF_FRAME_MVS;
    }
    private static final int V4L2_AV1_FRAME_FLAG_DISABLE_FRAME_END_UPDATE_CDF = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_DISABLE_FRAME_END_UPDATE_CDF 2048
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_DISABLE_FRAME_END_UPDATE_CDF() {
        return V4L2_AV1_FRAME_FLAG_DISABLE_FRAME_END_UPDATE_CDF;
    }
    private static final int V4L2_AV1_FRAME_FLAG_ALLOW_WARPED_MOTION = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_ALLOW_WARPED_MOTION 4096
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_ALLOW_WARPED_MOTION() {
        return V4L2_AV1_FRAME_FLAG_ALLOW_WARPED_MOTION;
    }
    private static final int V4L2_AV1_FRAME_FLAG_REFERENCE_SELECT = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_REFERENCE_SELECT 8192
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_REFERENCE_SELECT() {
        return V4L2_AV1_FRAME_FLAG_REFERENCE_SELECT;
    }
    private static final int V4L2_AV1_FRAME_FLAG_REDUCED_TX_SET = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_REDUCED_TX_SET 16384
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_REDUCED_TX_SET() {
        return V4L2_AV1_FRAME_FLAG_REDUCED_TX_SET;
    }
    private static final int V4L2_AV1_FRAME_FLAG_SKIP_MODE_ALLOWED = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_SKIP_MODE_ALLOWED 32768
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_SKIP_MODE_ALLOWED() {
        return V4L2_AV1_FRAME_FLAG_SKIP_MODE_ALLOWED;
    }
    private static final int V4L2_AV1_FRAME_FLAG_SKIP_MODE_PRESENT = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_SKIP_MODE_PRESENT 65536
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_SKIP_MODE_PRESENT() {
        return V4L2_AV1_FRAME_FLAG_SKIP_MODE_PRESENT;
    }
    private static final int V4L2_AV1_FRAME_FLAG_FRAME_SIZE_OVERRIDE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_FRAME_SIZE_OVERRIDE 131072
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_FRAME_SIZE_OVERRIDE() {
        return V4L2_AV1_FRAME_FLAG_FRAME_SIZE_OVERRIDE;
    }
    private static final int V4L2_AV1_FRAME_FLAG_BUFFER_REMOVAL_TIME_PRESENT = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_BUFFER_REMOVAL_TIME_PRESENT 262144
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_BUFFER_REMOVAL_TIME_PRESENT() {
        return V4L2_AV1_FRAME_FLAG_BUFFER_REMOVAL_TIME_PRESENT;
    }
    private static final int V4L2_AV1_FRAME_FLAG_FRAME_REFS_SHORT_SIGNALING = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FRAME_FLAG_FRAME_REFS_SHORT_SIGNALING 524288
     * }
     */
    public static int V4L2_AV1_FRAME_FLAG_FRAME_REFS_SHORT_SIGNALING() {
        return V4L2_AV1_FRAME_FLAG_FRAME_REFS_SHORT_SIGNALING;
    }
    private static final int V4L2_AV1_FILM_GRAIN_FLAG_APPLY_GRAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FILM_GRAIN_FLAG_APPLY_GRAIN 1
     * }
     */
    public static int V4L2_AV1_FILM_GRAIN_FLAG_APPLY_GRAIN() {
        return V4L2_AV1_FILM_GRAIN_FLAG_APPLY_GRAIN;
    }
    private static final int V4L2_AV1_FILM_GRAIN_FLAG_UPDATE_GRAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FILM_GRAIN_FLAG_UPDATE_GRAIN 2
     * }
     */
    public static int V4L2_AV1_FILM_GRAIN_FLAG_UPDATE_GRAIN() {
        return V4L2_AV1_FILM_GRAIN_FLAG_UPDATE_GRAIN;
    }
    private static final int V4L2_AV1_FILM_GRAIN_FLAG_CHROMA_SCALING_FROM_LUMA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FILM_GRAIN_FLAG_CHROMA_SCALING_FROM_LUMA 4
     * }
     */
    public static int V4L2_AV1_FILM_GRAIN_FLAG_CHROMA_SCALING_FROM_LUMA() {
        return V4L2_AV1_FILM_GRAIN_FLAG_CHROMA_SCALING_FROM_LUMA;
    }
    private static final int V4L2_AV1_FILM_GRAIN_FLAG_OVERLAP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FILM_GRAIN_FLAG_OVERLAP 8
     * }
     */
    public static int V4L2_AV1_FILM_GRAIN_FLAG_OVERLAP() {
        return V4L2_AV1_FILM_GRAIN_FLAG_OVERLAP;
    }
    private static final int V4L2_AV1_FILM_GRAIN_FLAG_CLIP_TO_RESTRICTED_RANGE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AV1_FILM_GRAIN_FLAG_CLIP_TO_RESTRICTED_RANGE 16
     * }
     */
    public static int V4L2_AV1_FILM_GRAIN_FLAG_CLIP_TO_RESTRICTED_RANGE() {
        return V4L2_AV1_FILM_GRAIN_FLAG_CLIP_TO_RESTRICTED_RANGE;
    }
    private static final int VIDEO_MAX_FRAME = (int)32L;
    /**
     * {@snippet lang=c :
     * #define VIDEO_MAX_FRAME 32
     * }
     */
    public static int VIDEO_MAX_FRAME() {
        return VIDEO_MAX_FRAME;
    }
    private static final int VIDEO_MAX_PLANES = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VIDEO_MAX_PLANES 8
     * }
     */
    public static int VIDEO_MAX_PLANES() {
        return VIDEO_MAX_PLANES;
    }
    private static final int V4L2_CAP_VIDEO_CAPTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_CAPTURE 1
     * }
     */
    public static int V4L2_CAP_VIDEO_CAPTURE() {
        return V4L2_CAP_VIDEO_CAPTURE;
    }
    private static final int V4L2_CAP_VIDEO_OUTPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_OUTPUT 2
     * }
     */
    public static int V4L2_CAP_VIDEO_OUTPUT() {
        return V4L2_CAP_VIDEO_OUTPUT;
    }
    private static final int V4L2_CAP_VIDEO_OVERLAY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_OVERLAY 4
     * }
     */
    public static int V4L2_CAP_VIDEO_OVERLAY() {
        return V4L2_CAP_VIDEO_OVERLAY;
    }
    private static final int V4L2_CAP_VBI_CAPTURE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VBI_CAPTURE 16
     * }
     */
    public static int V4L2_CAP_VBI_CAPTURE() {
        return V4L2_CAP_VBI_CAPTURE;
    }
    private static final int V4L2_CAP_VBI_OUTPUT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VBI_OUTPUT 32
     * }
     */
    public static int V4L2_CAP_VBI_OUTPUT() {
        return V4L2_CAP_VBI_OUTPUT;
    }
    private static final int V4L2_CAP_SLICED_VBI_CAPTURE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_SLICED_VBI_CAPTURE 64
     * }
     */
    public static int V4L2_CAP_SLICED_VBI_CAPTURE() {
        return V4L2_CAP_SLICED_VBI_CAPTURE;
    }
    private static final int V4L2_CAP_SLICED_VBI_OUTPUT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_SLICED_VBI_OUTPUT 128
     * }
     */
    public static int V4L2_CAP_SLICED_VBI_OUTPUT() {
        return V4L2_CAP_SLICED_VBI_OUTPUT;
    }
    private static final int V4L2_CAP_RDS_CAPTURE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_RDS_CAPTURE 256
     * }
     */
    public static int V4L2_CAP_RDS_CAPTURE() {
        return V4L2_CAP_RDS_CAPTURE;
    }
    private static final int V4L2_CAP_VIDEO_OUTPUT_OVERLAY = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_OUTPUT_OVERLAY 512
     * }
     */
    public static int V4L2_CAP_VIDEO_OUTPUT_OVERLAY() {
        return V4L2_CAP_VIDEO_OUTPUT_OVERLAY;
    }
    private static final int V4L2_CAP_HW_FREQ_SEEK = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_HW_FREQ_SEEK 1024
     * }
     */
    public static int V4L2_CAP_HW_FREQ_SEEK() {
        return V4L2_CAP_HW_FREQ_SEEK;
    }
    private static final int V4L2_CAP_RDS_OUTPUT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_RDS_OUTPUT 2048
     * }
     */
    public static int V4L2_CAP_RDS_OUTPUT() {
        return V4L2_CAP_RDS_OUTPUT;
    }
    private static final int V4L2_CAP_VIDEO_CAPTURE_MPLANE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_CAPTURE_MPLANE 4096
     * }
     */
    public static int V4L2_CAP_VIDEO_CAPTURE_MPLANE() {
        return V4L2_CAP_VIDEO_CAPTURE_MPLANE;
    }
    private static final int V4L2_CAP_VIDEO_OUTPUT_MPLANE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_OUTPUT_MPLANE 8192
     * }
     */
    public static int V4L2_CAP_VIDEO_OUTPUT_MPLANE() {
        return V4L2_CAP_VIDEO_OUTPUT_MPLANE;
    }
    private static final int V4L2_CAP_VIDEO_M2M_MPLANE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_M2M_MPLANE 16384
     * }
     */
    public static int V4L2_CAP_VIDEO_M2M_MPLANE() {
        return V4L2_CAP_VIDEO_M2M_MPLANE;
    }
    private static final int V4L2_CAP_VIDEO_M2M = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_VIDEO_M2M 32768
     * }
     */
    public static int V4L2_CAP_VIDEO_M2M() {
        return V4L2_CAP_VIDEO_M2M;
    }
    private static final int V4L2_CAP_TUNER = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_TUNER 65536
     * }
     */
    public static int V4L2_CAP_TUNER() {
        return V4L2_CAP_TUNER;
    }
    private static final int V4L2_CAP_AUDIO = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_AUDIO 131072
     * }
     */
    public static int V4L2_CAP_AUDIO() {
        return V4L2_CAP_AUDIO;
    }
    private static final int V4L2_CAP_RADIO = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_RADIO 262144
     * }
     */
    public static int V4L2_CAP_RADIO() {
        return V4L2_CAP_RADIO;
    }
    private static final int V4L2_CAP_MODULATOR = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_MODULATOR 524288
     * }
     */
    public static int V4L2_CAP_MODULATOR() {
        return V4L2_CAP_MODULATOR;
    }
    private static final int V4L2_CAP_SDR_CAPTURE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_SDR_CAPTURE 1048576
     * }
     */
    public static int V4L2_CAP_SDR_CAPTURE() {
        return V4L2_CAP_SDR_CAPTURE;
    }
    private static final int V4L2_CAP_EXT_PIX_FORMAT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_EXT_PIX_FORMAT 2097152
     * }
     */
    public static int V4L2_CAP_EXT_PIX_FORMAT() {
        return V4L2_CAP_EXT_PIX_FORMAT;
    }
    private static final int V4L2_CAP_SDR_OUTPUT = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_SDR_OUTPUT 4194304
     * }
     */
    public static int V4L2_CAP_SDR_OUTPUT() {
        return V4L2_CAP_SDR_OUTPUT;
    }
    private static final int V4L2_CAP_META_CAPTURE = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_META_CAPTURE 8388608
     * }
     */
    public static int V4L2_CAP_META_CAPTURE() {
        return V4L2_CAP_META_CAPTURE;
    }
    private static final int V4L2_CAP_READWRITE = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_READWRITE 16777216
     * }
     */
    public static int V4L2_CAP_READWRITE() {
        return V4L2_CAP_READWRITE;
    }
    private static final int V4L2_CAP_STREAMING = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_STREAMING 67108864
     * }
     */
    public static int V4L2_CAP_STREAMING() {
        return V4L2_CAP_STREAMING;
    }
    private static final int V4L2_CAP_META_OUTPUT = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_META_OUTPUT 134217728
     * }
     */
    public static int V4L2_CAP_META_OUTPUT() {
        return V4L2_CAP_META_OUTPUT;
    }
    private static final int V4L2_CAP_TOUCH = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_TOUCH 268435456
     * }
     */
    public static int V4L2_CAP_TOUCH() {
        return V4L2_CAP_TOUCH;
    }
    private static final int V4L2_CAP_IO_MC = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_IO_MC 536870912
     * }
     */
    public static int V4L2_CAP_IO_MC() {
        return V4L2_CAP_IO_MC;
    }
    private static final int V4L2_PIX_FMT_FLAG_PREMUL_ALPHA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_PIX_FMT_FLAG_PREMUL_ALPHA 1
     * }
     */
    public static int V4L2_PIX_FMT_FLAG_PREMUL_ALPHA() {
        return V4L2_PIX_FMT_FLAG_PREMUL_ALPHA;
    }
    private static final int V4L2_PIX_FMT_FLAG_SET_CSC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_PIX_FMT_FLAG_SET_CSC 2
     * }
     */
    public static int V4L2_PIX_FMT_FLAG_SET_CSC() {
        return V4L2_PIX_FMT_FLAG_SET_CSC;
    }
    private static final int V4L2_FMT_FLAG_COMPRESSED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_COMPRESSED 1
     * }
     */
    public static int V4L2_FMT_FLAG_COMPRESSED() {
        return V4L2_FMT_FLAG_COMPRESSED;
    }
    private static final int V4L2_FMT_FLAG_EMULATED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_EMULATED 2
     * }
     */
    public static int V4L2_FMT_FLAG_EMULATED() {
        return V4L2_FMT_FLAG_EMULATED;
    }
    private static final int V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM 4
     * }
     */
    public static int V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM() {
        return V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM;
    }
    private static final int V4L2_FMT_FLAG_DYN_RESOLUTION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_DYN_RESOLUTION 8
     * }
     */
    public static int V4L2_FMT_FLAG_DYN_RESOLUTION() {
        return V4L2_FMT_FLAG_DYN_RESOLUTION;
    }
    private static final int V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL 16
     * }
     */
    public static int V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL() {
        return V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL;
    }
    private static final int V4L2_FMT_FLAG_CSC_COLORSPACE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_CSC_COLORSPACE 32
     * }
     */
    public static int V4L2_FMT_FLAG_CSC_COLORSPACE() {
        return V4L2_FMT_FLAG_CSC_COLORSPACE;
    }
    private static final int V4L2_FMT_FLAG_CSC_XFER_FUNC = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_CSC_XFER_FUNC 64
     * }
     */
    public static int V4L2_FMT_FLAG_CSC_XFER_FUNC() {
        return V4L2_FMT_FLAG_CSC_XFER_FUNC;
    }
    private static final int V4L2_FMT_FLAG_CSC_YCBCR_ENC = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_CSC_YCBCR_ENC 128
     * }
     */
    public static int V4L2_FMT_FLAG_CSC_YCBCR_ENC() {
        return V4L2_FMT_FLAG_CSC_YCBCR_ENC;
    }
    private static final int V4L2_FMT_FLAG_CSC_QUANTIZATION = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FMT_FLAG_CSC_QUANTIZATION 256
     * }
     */
    public static int V4L2_FMT_FLAG_CSC_QUANTIZATION() {
        return V4L2_FMT_FLAG_CSC_QUANTIZATION;
    }
    private static final int V4L2_TC_TYPE_24FPS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_TYPE_24FPS 1
     * }
     */
    public static int V4L2_TC_TYPE_24FPS() {
        return V4L2_TC_TYPE_24FPS;
    }
    private static final int V4L2_TC_TYPE_25FPS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_TYPE_25FPS 2
     * }
     */
    public static int V4L2_TC_TYPE_25FPS() {
        return V4L2_TC_TYPE_25FPS;
    }
    private static final int V4L2_TC_TYPE_30FPS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_TYPE_30FPS 3
     * }
     */
    public static int V4L2_TC_TYPE_30FPS() {
        return V4L2_TC_TYPE_30FPS;
    }
    private static final int V4L2_TC_TYPE_50FPS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_TYPE_50FPS 4
     * }
     */
    public static int V4L2_TC_TYPE_50FPS() {
        return V4L2_TC_TYPE_50FPS;
    }
    private static final int V4L2_TC_TYPE_60FPS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_TYPE_60FPS 5
     * }
     */
    public static int V4L2_TC_TYPE_60FPS() {
        return V4L2_TC_TYPE_60FPS;
    }
    private static final int V4L2_TC_FLAG_DROPFRAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_FLAG_DROPFRAME 1
     * }
     */
    public static int V4L2_TC_FLAG_DROPFRAME() {
        return V4L2_TC_FLAG_DROPFRAME;
    }
    private static final int V4L2_TC_FLAG_COLORFRAME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_FLAG_COLORFRAME 2
     * }
     */
    public static int V4L2_TC_FLAG_COLORFRAME() {
        return V4L2_TC_FLAG_COLORFRAME;
    }
    private static final int V4L2_TC_USERBITS_field = (int)12L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_USERBITS_field 12
     * }
     */
    public static int V4L2_TC_USERBITS_field() {
        return V4L2_TC_USERBITS_field;
    }
    private static final int V4L2_TC_USERBITS_USERDEFINED = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_USERBITS_USERDEFINED 0
     * }
     */
    public static int V4L2_TC_USERBITS_USERDEFINED() {
        return V4L2_TC_USERBITS_USERDEFINED;
    }
    private static final int V4L2_TC_USERBITS_8BITCHARS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TC_USERBITS_8BITCHARS 8
     * }
     */
    public static int V4L2_TC_USERBITS_8BITCHARS() {
        return V4L2_TC_USERBITS_8BITCHARS;
    }
    private static final int V4L2_BUF_FLAG_MAPPED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_MAPPED 1
     * }
     */
    public static int V4L2_BUF_FLAG_MAPPED() {
        return V4L2_BUF_FLAG_MAPPED;
    }
    private static final int V4L2_BUF_FLAG_QUEUED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_QUEUED 2
     * }
     */
    public static int V4L2_BUF_FLAG_QUEUED() {
        return V4L2_BUF_FLAG_QUEUED;
    }
    private static final int V4L2_BUF_FLAG_DONE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_DONE 4
     * }
     */
    public static int V4L2_BUF_FLAG_DONE() {
        return V4L2_BUF_FLAG_DONE;
    }
    private static final int V4L2_BUF_FLAG_KEYFRAME = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_KEYFRAME 8
     * }
     */
    public static int V4L2_BUF_FLAG_KEYFRAME() {
        return V4L2_BUF_FLAG_KEYFRAME;
    }
    private static final int V4L2_BUF_FLAG_PFRAME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_PFRAME 16
     * }
     */
    public static int V4L2_BUF_FLAG_PFRAME() {
        return V4L2_BUF_FLAG_PFRAME;
    }
    private static final int V4L2_BUF_FLAG_BFRAME = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_BFRAME 32
     * }
     */
    public static int V4L2_BUF_FLAG_BFRAME() {
        return V4L2_BUF_FLAG_BFRAME;
    }
    private static final int V4L2_BUF_FLAG_ERROR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_ERROR 64
     * }
     */
    public static int V4L2_BUF_FLAG_ERROR() {
        return V4L2_BUF_FLAG_ERROR;
    }
    private static final int V4L2_BUF_FLAG_IN_REQUEST = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_IN_REQUEST 128
     * }
     */
    public static int V4L2_BUF_FLAG_IN_REQUEST() {
        return V4L2_BUF_FLAG_IN_REQUEST;
    }
    private static final int V4L2_BUF_FLAG_TIMECODE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TIMECODE 256
     * }
     */
    public static int V4L2_BUF_FLAG_TIMECODE() {
        return V4L2_BUF_FLAG_TIMECODE;
    }
    private static final int V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF 512
     * }
     */
    public static int V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF() {
        return V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF;
    }
    private static final int V4L2_BUF_FLAG_PREPARED = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_PREPARED 1024
     * }
     */
    public static int V4L2_BUF_FLAG_PREPARED() {
        return V4L2_BUF_FLAG_PREPARED;
    }
    private static final int V4L2_BUF_FLAG_NO_CACHE_INVALIDATE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_NO_CACHE_INVALIDATE 2048
     * }
     */
    public static int V4L2_BUF_FLAG_NO_CACHE_INVALIDATE() {
        return V4L2_BUF_FLAG_NO_CACHE_INVALIDATE;
    }
    private static final int V4L2_BUF_FLAG_NO_CACHE_CLEAN = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_NO_CACHE_CLEAN 4096
     * }
     */
    public static int V4L2_BUF_FLAG_NO_CACHE_CLEAN() {
        return V4L2_BUF_FLAG_NO_CACHE_CLEAN;
    }
    private static final int V4L2_BUF_FLAG_TIMESTAMP_MASK = (int)57344L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TIMESTAMP_MASK 57344
     * }
     */
    public static int V4L2_BUF_FLAG_TIMESTAMP_MASK() {
        return V4L2_BUF_FLAG_TIMESTAMP_MASK;
    }
    private static final int V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN 0
     * }
     */
    public static int V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN() {
        return V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN;
    }
    private static final int V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC 8192
     * }
     */
    public static int V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC() {
        return V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
    }
    private static final int V4L2_BUF_FLAG_TIMESTAMP_COPY = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TIMESTAMP_COPY 16384
     * }
     */
    public static int V4L2_BUF_FLAG_TIMESTAMP_COPY() {
        return V4L2_BUF_FLAG_TIMESTAMP_COPY;
    }
    private static final int V4L2_BUF_FLAG_TSTAMP_SRC_MASK = (int)458752L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TSTAMP_SRC_MASK 458752
     * }
     */
    public static int V4L2_BUF_FLAG_TSTAMP_SRC_MASK() {
        return V4L2_BUF_FLAG_TSTAMP_SRC_MASK;
    }
    private static final int V4L2_BUF_FLAG_TSTAMP_SRC_EOF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TSTAMP_SRC_EOF 0
     * }
     */
    public static int V4L2_BUF_FLAG_TSTAMP_SRC_EOF() {
        return V4L2_BUF_FLAG_TSTAMP_SRC_EOF;
    }
    private static final int V4L2_BUF_FLAG_TSTAMP_SRC_SOE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_TSTAMP_SRC_SOE 65536
     * }
     */
    public static int V4L2_BUF_FLAG_TSTAMP_SRC_SOE() {
        return V4L2_BUF_FLAG_TSTAMP_SRC_SOE;
    }
    private static final int V4L2_BUF_FLAG_LAST = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_LAST 1048576
     * }
     */
    public static int V4L2_BUF_FLAG_LAST() {
        return V4L2_BUF_FLAG_LAST;
    }
    private static final int V4L2_BUF_FLAG_REQUEST_FD = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define V4L2_BUF_FLAG_REQUEST_FD 8388608
     * }
     */
    public static int V4L2_BUF_FLAG_REQUEST_FD() {
        return V4L2_BUF_FLAG_REQUEST_FD;
    }
    private static final int V4L2_FBUF_CAP_EXTERNOVERLAY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_EXTERNOVERLAY 1
     * }
     */
    public static int V4L2_FBUF_CAP_EXTERNOVERLAY() {
        return V4L2_FBUF_CAP_EXTERNOVERLAY;
    }
    private static final int V4L2_FBUF_CAP_CHROMAKEY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_CHROMAKEY 2
     * }
     */
    public static int V4L2_FBUF_CAP_CHROMAKEY() {
        return V4L2_FBUF_CAP_CHROMAKEY;
    }
    private static final int V4L2_FBUF_CAP_LIST_CLIPPING = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_LIST_CLIPPING 4
     * }
     */
    public static int V4L2_FBUF_CAP_LIST_CLIPPING() {
        return V4L2_FBUF_CAP_LIST_CLIPPING;
    }
    private static final int V4L2_FBUF_CAP_BITMAP_CLIPPING = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_BITMAP_CLIPPING 8
     * }
     */
    public static int V4L2_FBUF_CAP_BITMAP_CLIPPING() {
        return V4L2_FBUF_CAP_BITMAP_CLIPPING;
    }
    private static final int V4L2_FBUF_CAP_LOCAL_ALPHA = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_LOCAL_ALPHA 16
     * }
     */
    public static int V4L2_FBUF_CAP_LOCAL_ALPHA() {
        return V4L2_FBUF_CAP_LOCAL_ALPHA;
    }
    private static final int V4L2_FBUF_CAP_GLOBAL_ALPHA = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_GLOBAL_ALPHA 32
     * }
     */
    public static int V4L2_FBUF_CAP_GLOBAL_ALPHA() {
        return V4L2_FBUF_CAP_GLOBAL_ALPHA;
    }
    private static final int V4L2_FBUF_CAP_LOCAL_INV_ALPHA = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_LOCAL_INV_ALPHA 64
     * }
     */
    public static int V4L2_FBUF_CAP_LOCAL_INV_ALPHA() {
        return V4L2_FBUF_CAP_LOCAL_INV_ALPHA;
    }
    private static final int V4L2_FBUF_CAP_SRC_CHROMAKEY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_CAP_SRC_CHROMAKEY 128
     * }
     */
    public static int V4L2_FBUF_CAP_SRC_CHROMAKEY() {
        return V4L2_FBUF_CAP_SRC_CHROMAKEY;
    }
    private static final int V4L2_FBUF_FLAG_PRIMARY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_PRIMARY 1
     * }
     */
    public static int V4L2_FBUF_FLAG_PRIMARY() {
        return V4L2_FBUF_FLAG_PRIMARY;
    }
    private static final int V4L2_FBUF_FLAG_OVERLAY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_OVERLAY 2
     * }
     */
    public static int V4L2_FBUF_FLAG_OVERLAY() {
        return V4L2_FBUF_FLAG_OVERLAY;
    }
    private static final int V4L2_FBUF_FLAG_CHROMAKEY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_CHROMAKEY 4
     * }
     */
    public static int V4L2_FBUF_FLAG_CHROMAKEY() {
        return V4L2_FBUF_FLAG_CHROMAKEY;
    }
    private static final int V4L2_FBUF_FLAG_LOCAL_ALPHA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_LOCAL_ALPHA 8
     * }
     */
    public static int V4L2_FBUF_FLAG_LOCAL_ALPHA() {
        return V4L2_FBUF_FLAG_LOCAL_ALPHA;
    }
    private static final int V4L2_FBUF_FLAG_GLOBAL_ALPHA = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_GLOBAL_ALPHA 16
     * }
     */
    public static int V4L2_FBUF_FLAG_GLOBAL_ALPHA() {
        return V4L2_FBUF_FLAG_GLOBAL_ALPHA;
    }
    private static final int V4L2_FBUF_FLAG_LOCAL_INV_ALPHA = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_LOCAL_INV_ALPHA 32
     * }
     */
    public static int V4L2_FBUF_FLAG_LOCAL_INV_ALPHA() {
        return V4L2_FBUF_FLAG_LOCAL_INV_ALPHA;
    }
    private static final int V4L2_FBUF_FLAG_SRC_CHROMAKEY = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_FBUF_FLAG_SRC_CHROMAKEY 64
     * }
     */
    public static int V4L2_FBUF_FLAG_SRC_CHROMAKEY() {
        return V4L2_FBUF_FLAG_SRC_CHROMAKEY;
    }
    private static final int V4L2_MODE_HIGHQUALITY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MODE_HIGHQUALITY 1
     * }
     */
    public static int V4L2_MODE_HIGHQUALITY() {
        return V4L2_MODE_HIGHQUALITY;
    }
    private static final int V4L2_CAP_TIMEPERFRAME = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_TIMEPERFRAME 4096
     * }
     */
    public static int V4L2_CAP_TIMEPERFRAME() {
        return V4L2_CAP_TIMEPERFRAME;
    }
    private static final int V4L2_STD_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_STD_UNKNOWN 0
     * }
     */
    public static int V4L2_STD_UNKNOWN() {
        return V4L2_STD_UNKNOWN;
    }
    private static final int V4L2_DV_PROGRESSIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_DV_PROGRESSIVE 0
     * }
     */
    public static int V4L2_DV_PROGRESSIVE() {
        return V4L2_DV_PROGRESSIVE;
    }
    private static final int V4L2_DV_INTERLACED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_DV_INTERLACED 1
     * }
     */
    public static int V4L2_DV_INTERLACED() {
        return V4L2_DV_INTERLACED;
    }
    private static final int V4L2_DV_VSYNC_POS_POL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_DV_VSYNC_POS_POL 1
     * }
     */
    public static int V4L2_DV_VSYNC_POS_POL() {
        return V4L2_DV_VSYNC_POS_POL;
    }
    private static final int V4L2_DV_HSYNC_POS_POL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_DV_HSYNC_POS_POL 2
     * }
     */
    public static int V4L2_DV_HSYNC_POS_POL() {
        return V4L2_DV_HSYNC_POS_POL;
    }
    private static final int V4L2_DV_BT_656_1120 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_DV_BT_656_1120 0
     * }
     */
    public static int V4L2_DV_BT_656_1120() {
        return V4L2_DV_BT_656_1120;
    }
    private static final int V4L2_INPUT_TYPE_TUNER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_INPUT_TYPE_TUNER 1
     * }
     */
    public static int V4L2_INPUT_TYPE_TUNER() {
        return V4L2_INPUT_TYPE_TUNER;
    }
    private static final int V4L2_INPUT_TYPE_CAMERA = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_INPUT_TYPE_CAMERA 2
     * }
     */
    public static int V4L2_INPUT_TYPE_CAMERA() {
        return V4L2_INPUT_TYPE_CAMERA;
    }
    private static final int V4L2_INPUT_TYPE_TOUCH = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_INPUT_TYPE_TOUCH 3
     * }
     */
    public static int V4L2_INPUT_TYPE_TOUCH() {
        return V4L2_INPUT_TYPE_TOUCH;
    }
    private static final int V4L2_IN_ST_NO_POWER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_POWER 1
     * }
     */
    public static int V4L2_IN_ST_NO_POWER() {
        return V4L2_IN_ST_NO_POWER;
    }
    private static final int V4L2_IN_ST_NO_SIGNAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_SIGNAL 2
     * }
     */
    public static int V4L2_IN_ST_NO_SIGNAL() {
        return V4L2_IN_ST_NO_SIGNAL;
    }
    private static final int V4L2_IN_ST_NO_COLOR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_COLOR 4
     * }
     */
    public static int V4L2_IN_ST_NO_COLOR() {
        return V4L2_IN_ST_NO_COLOR;
    }
    private static final int V4L2_IN_ST_HFLIP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_HFLIP 16
     * }
     */
    public static int V4L2_IN_ST_HFLIP() {
        return V4L2_IN_ST_HFLIP;
    }
    private static final int V4L2_IN_ST_VFLIP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_VFLIP 32
     * }
     */
    public static int V4L2_IN_ST_VFLIP() {
        return V4L2_IN_ST_VFLIP;
    }
    private static final int V4L2_IN_ST_NO_H_LOCK = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_H_LOCK 256
     * }
     */
    public static int V4L2_IN_ST_NO_H_LOCK() {
        return V4L2_IN_ST_NO_H_LOCK;
    }
    private static final int V4L2_IN_ST_COLOR_KILL = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_COLOR_KILL 512
     * }
     */
    public static int V4L2_IN_ST_COLOR_KILL() {
        return V4L2_IN_ST_COLOR_KILL;
    }
    private static final int V4L2_IN_ST_NO_V_LOCK = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_V_LOCK 1024
     * }
     */
    public static int V4L2_IN_ST_NO_V_LOCK() {
        return V4L2_IN_ST_NO_V_LOCK;
    }
    private static final int V4L2_IN_ST_NO_STD_LOCK = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_STD_LOCK 2048
     * }
     */
    public static int V4L2_IN_ST_NO_STD_LOCK() {
        return V4L2_IN_ST_NO_STD_LOCK;
    }
    private static final int V4L2_IN_ST_NO_SYNC = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_SYNC 65536
     * }
     */
    public static int V4L2_IN_ST_NO_SYNC() {
        return V4L2_IN_ST_NO_SYNC;
    }
    private static final int V4L2_IN_ST_NO_EQU = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_EQU 131072
     * }
     */
    public static int V4L2_IN_ST_NO_EQU() {
        return V4L2_IN_ST_NO_EQU;
    }
    private static final int V4L2_IN_ST_NO_CARRIER = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_CARRIER 262144
     * }
     */
    public static int V4L2_IN_ST_NO_CARRIER() {
        return V4L2_IN_ST_NO_CARRIER;
    }
    private static final int V4L2_IN_ST_MACROVISION = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_MACROVISION 16777216
     * }
     */
    public static int V4L2_IN_ST_MACROVISION() {
        return V4L2_IN_ST_MACROVISION;
    }
    private static final int V4L2_IN_ST_NO_ACCESS = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_NO_ACCESS 33554432
     * }
     */
    public static int V4L2_IN_ST_NO_ACCESS() {
        return V4L2_IN_ST_NO_ACCESS;
    }
    private static final int V4L2_IN_ST_VTR = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_ST_VTR 67108864
     * }
     */
    public static int V4L2_IN_ST_VTR() {
        return V4L2_IN_ST_VTR;
    }
    private static final int V4L2_IN_CAP_DV_TIMINGS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_CAP_DV_TIMINGS 2
     * }
     */
    public static int V4L2_IN_CAP_DV_TIMINGS() {
        return V4L2_IN_CAP_DV_TIMINGS;
    }
    private static final int V4L2_IN_CAP_STD = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_CAP_STD 4
     * }
     */
    public static int V4L2_IN_CAP_STD() {
        return V4L2_IN_CAP_STD;
    }
    private static final int V4L2_IN_CAP_NATIVE_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_IN_CAP_NATIVE_SIZE 8
     * }
     */
    public static int V4L2_IN_CAP_NATIVE_SIZE() {
        return V4L2_IN_CAP_NATIVE_SIZE;
    }
    private static final int V4L2_OUTPUT_TYPE_MODULATOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUTPUT_TYPE_MODULATOR 1
     * }
     */
    public static int V4L2_OUTPUT_TYPE_MODULATOR() {
        return V4L2_OUTPUT_TYPE_MODULATOR;
    }
    private static final int V4L2_OUTPUT_TYPE_ANALOG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUTPUT_TYPE_ANALOG 2
     * }
     */
    public static int V4L2_OUTPUT_TYPE_ANALOG() {
        return V4L2_OUTPUT_TYPE_ANALOG;
    }
    private static final int V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY 3
     * }
     */
    public static int V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY() {
        return V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY;
    }
    private static final int V4L2_OUT_CAP_DV_TIMINGS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUT_CAP_DV_TIMINGS 2
     * }
     */
    public static int V4L2_OUT_CAP_DV_TIMINGS() {
        return V4L2_OUT_CAP_DV_TIMINGS;
    }
    private static final int V4L2_OUT_CAP_STD = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUT_CAP_STD 4
     * }
     */
    public static int V4L2_OUT_CAP_STD() {
        return V4L2_OUT_CAP_STD;
    }
    private static final int V4L2_OUT_CAP_NATIVE_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_OUT_CAP_NATIVE_SIZE 8
     * }
     */
    public static int V4L2_OUT_CAP_NATIVE_SIZE() {
        return V4L2_OUT_CAP_NATIVE_SIZE;
    }
    private static final int V4L2_CTRL_WHICH_CUR_VAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_WHICH_CUR_VAL 0
     * }
     */
    public static int V4L2_CTRL_WHICH_CUR_VAL() {
        return V4L2_CTRL_WHICH_CUR_VAL;
    }
    private static final int V4L2_CTRL_WHICH_DEF_VAL = (int)251658240L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_WHICH_DEF_VAL 251658240
     * }
     */
    public static int V4L2_CTRL_WHICH_DEF_VAL() {
        return V4L2_CTRL_WHICH_DEF_VAL;
    }
    private static final int V4L2_CTRL_WHICH_REQUEST_VAL = (int)251723776L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_WHICH_REQUEST_VAL 251723776
     * }
     */
    public static int V4L2_CTRL_WHICH_REQUEST_VAL() {
        return V4L2_CTRL_WHICH_REQUEST_VAL;
    }
    private static final int V4L2_CTRL_FLAG_DISABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_DISABLED 1
     * }
     */
    public static int V4L2_CTRL_FLAG_DISABLED() {
        return V4L2_CTRL_FLAG_DISABLED;
    }
    private static final int V4L2_CTRL_FLAG_GRABBED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_GRABBED 2
     * }
     */
    public static int V4L2_CTRL_FLAG_GRABBED() {
        return V4L2_CTRL_FLAG_GRABBED;
    }
    private static final int V4L2_CTRL_FLAG_READ_ONLY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_READ_ONLY 4
     * }
     */
    public static int V4L2_CTRL_FLAG_READ_ONLY() {
        return V4L2_CTRL_FLAG_READ_ONLY;
    }
    private static final int V4L2_CTRL_FLAG_UPDATE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_UPDATE 8
     * }
     */
    public static int V4L2_CTRL_FLAG_UPDATE() {
        return V4L2_CTRL_FLAG_UPDATE;
    }
    private static final int V4L2_CTRL_FLAG_INACTIVE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_INACTIVE 16
     * }
     */
    public static int V4L2_CTRL_FLAG_INACTIVE() {
        return V4L2_CTRL_FLAG_INACTIVE;
    }
    private static final int V4L2_CTRL_FLAG_SLIDER = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_SLIDER 32
     * }
     */
    public static int V4L2_CTRL_FLAG_SLIDER() {
        return V4L2_CTRL_FLAG_SLIDER;
    }
    private static final int V4L2_CTRL_FLAG_WRITE_ONLY = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_WRITE_ONLY 64
     * }
     */
    public static int V4L2_CTRL_FLAG_WRITE_ONLY() {
        return V4L2_CTRL_FLAG_WRITE_ONLY;
    }
    private static final int V4L2_CTRL_FLAG_VOLATILE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_VOLATILE 128
     * }
     */
    public static int V4L2_CTRL_FLAG_VOLATILE() {
        return V4L2_CTRL_FLAG_VOLATILE;
    }
    private static final int V4L2_CTRL_FLAG_HAS_PAYLOAD = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_HAS_PAYLOAD 256
     * }
     */
    public static int V4L2_CTRL_FLAG_HAS_PAYLOAD() {
        return V4L2_CTRL_FLAG_HAS_PAYLOAD;
    }
    private static final int V4L2_CTRL_FLAG_EXECUTE_ON_WRITE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_EXECUTE_ON_WRITE 512
     * }
     */
    public static int V4L2_CTRL_FLAG_EXECUTE_ON_WRITE() {
        return V4L2_CTRL_FLAG_EXECUTE_ON_WRITE;
    }
    private static final int V4L2_CTRL_FLAG_MODIFY_LAYOUT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_MODIFY_LAYOUT 1024
     * }
     */
    public static int V4L2_CTRL_FLAG_MODIFY_LAYOUT() {
        return V4L2_CTRL_FLAG_MODIFY_LAYOUT;
    }
    private static final int V4L2_CTRL_FLAG_DYNAMIC_ARRAY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_DYNAMIC_ARRAY 2048
     * }
     */
    public static int V4L2_CTRL_FLAG_DYNAMIC_ARRAY() {
        return V4L2_CTRL_FLAG_DYNAMIC_ARRAY;
    }
    private static final int V4L2_CTRL_FLAG_NEXT_COMPOUND = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CTRL_FLAG_NEXT_COMPOUND 1073741824
     * }
     */
    public static int V4L2_CTRL_FLAG_NEXT_COMPOUND() {
        return V4L2_CTRL_FLAG_NEXT_COMPOUND;
    }
    private static final int V4L2_CID_MAX_CTRLS = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_MAX_CTRLS 1024
     * }
     */
    public static int V4L2_CID_MAX_CTRLS() {
        return V4L2_CID_MAX_CTRLS;
    }
    private static final int V4L2_CID_PRIVATE_BASE = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CID_PRIVATE_BASE 134217728
     * }
     */
    public static int V4L2_CID_PRIVATE_BASE() {
        return V4L2_CID_PRIVATE_BASE;
    }
    private static final int V4L2_TUNER_CAP_LOW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_LOW 1
     * }
     */
    public static int V4L2_TUNER_CAP_LOW() {
        return V4L2_TUNER_CAP_LOW;
    }
    private static final int V4L2_TUNER_CAP_NORM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_NORM 2
     * }
     */
    public static int V4L2_TUNER_CAP_NORM() {
        return V4L2_TUNER_CAP_NORM;
    }
    private static final int V4L2_TUNER_CAP_HWSEEK_BOUNDED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_HWSEEK_BOUNDED 4
     * }
     */
    public static int V4L2_TUNER_CAP_HWSEEK_BOUNDED() {
        return V4L2_TUNER_CAP_HWSEEK_BOUNDED;
    }
    private static final int V4L2_TUNER_CAP_HWSEEK_WRAP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_HWSEEK_WRAP 8
     * }
     */
    public static int V4L2_TUNER_CAP_HWSEEK_WRAP() {
        return V4L2_TUNER_CAP_HWSEEK_WRAP;
    }
    private static final int V4L2_TUNER_CAP_STEREO = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_STEREO 16
     * }
     */
    public static int V4L2_TUNER_CAP_STEREO() {
        return V4L2_TUNER_CAP_STEREO;
    }
    private static final int V4L2_TUNER_CAP_LANG2 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_LANG2 32
     * }
     */
    public static int V4L2_TUNER_CAP_LANG2() {
        return V4L2_TUNER_CAP_LANG2;
    }
    private static final int V4L2_TUNER_CAP_SAP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_SAP 32
     * }
     */
    public static int V4L2_TUNER_CAP_SAP() {
        return V4L2_TUNER_CAP_SAP;
    }
    private static final int V4L2_TUNER_CAP_LANG1 = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_LANG1 64
     * }
     */
    public static int V4L2_TUNER_CAP_LANG1() {
        return V4L2_TUNER_CAP_LANG1;
    }
    private static final int V4L2_TUNER_CAP_RDS = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_RDS 128
     * }
     */
    public static int V4L2_TUNER_CAP_RDS() {
        return V4L2_TUNER_CAP_RDS;
    }
    private static final int V4L2_TUNER_CAP_RDS_BLOCK_IO = (int)256L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_RDS_BLOCK_IO 256
     * }
     */
    public static int V4L2_TUNER_CAP_RDS_BLOCK_IO() {
        return V4L2_TUNER_CAP_RDS_BLOCK_IO;
    }
    private static final int V4L2_TUNER_CAP_RDS_CONTROLS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_RDS_CONTROLS 512
     * }
     */
    public static int V4L2_TUNER_CAP_RDS_CONTROLS() {
        return V4L2_TUNER_CAP_RDS_CONTROLS;
    }
    private static final int V4L2_TUNER_CAP_FREQ_BANDS = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_FREQ_BANDS 1024
     * }
     */
    public static int V4L2_TUNER_CAP_FREQ_BANDS() {
        return V4L2_TUNER_CAP_FREQ_BANDS;
    }
    private static final int V4L2_TUNER_CAP_HWSEEK_PROG_LIM = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_HWSEEK_PROG_LIM 2048
     * }
     */
    public static int V4L2_TUNER_CAP_HWSEEK_PROG_LIM() {
        return V4L2_TUNER_CAP_HWSEEK_PROG_LIM;
    }
    private static final int V4L2_TUNER_CAP_1HZ = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_CAP_1HZ 4096
     * }
     */
    public static int V4L2_TUNER_CAP_1HZ() {
        return V4L2_TUNER_CAP_1HZ;
    }
    private static final int V4L2_TUNER_SUB_MONO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_MONO 1
     * }
     */
    public static int V4L2_TUNER_SUB_MONO() {
        return V4L2_TUNER_SUB_MONO;
    }
    private static final int V4L2_TUNER_SUB_STEREO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_STEREO 2
     * }
     */
    public static int V4L2_TUNER_SUB_STEREO() {
        return V4L2_TUNER_SUB_STEREO;
    }
    private static final int V4L2_TUNER_SUB_LANG2 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_LANG2 4
     * }
     */
    public static int V4L2_TUNER_SUB_LANG2() {
        return V4L2_TUNER_SUB_LANG2;
    }
    private static final int V4L2_TUNER_SUB_SAP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_SAP 4
     * }
     */
    public static int V4L2_TUNER_SUB_SAP() {
        return V4L2_TUNER_SUB_SAP;
    }
    private static final int V4L2_TUNER_SUB_LANG1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_LANG1 8
     * }
     */
    public static int V4L2_TUNER_SUB_LANG1() {
        return V4L2_TUNER_SUB_LANG1;
    }
    private static final int V4L2_TUNER_SUB_RDS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_SUB_RDS 16
     * }
     */
    public static int V4L2_TUNER_SUB_RDS() {
        return V4L2_TUNER_SUB_RDS;
    }
    private static final int V4L2_TUNER_MODE_MONO = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_MONO 0
     * }
     */
    public static int V4L2_TUNER_MODE_MONO() {
        return V4L2_TUNER_MODE_MONO;
    }
    private static final int V4L2_TUNER_MODE_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_STEREO 1
     * }
     */
    public static int V4L2_TUNER_MODE_STEREO() {
        return V4L2_TUNER_MODE_STEREO;
    }
    private static final int V4L2_TUNER_MODE_LANG2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_LANG2 2
     * }
     */
    public static int V4L2_TUNER_MODE_LANG2() {
        return V4L2_TUNER_MODE_LANG2;
    }
    private static final int V4L2_TUNER_MODE_SAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_SAP 2
     * }
     */
    public static int V4L2_TUNER_MODE_SAP() {
        return V4L2_TUNER_MODE_SAP;
    }
    private static final int V4L2_TUNER_MODE_LANG1 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_LANG1 3
     * }
     */
    public static int V4L2_TUNER_MODE_LANG1() {
        return V4L2_TUNER_MODE_LANG1;
    }
    private static final int V4L2_TUNER_MODE_LANG1_LANG2 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_TUNER_MODE_LANG1_LANG2 4
     * }
     */
    public static int V4L2_TUNER_MODE_LANG1_LANG2() {
        return V4L2_TUNER_MODE_LANG1_LANG2;
    }
    private static final int V4L2_RDS_BLOCK_MSK = (int)7L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_MSK 7
     * }
     */
    public static int V4L2_RDS_BLOCK_MSK() {
        return V4L2_RDS_BLOCK_MSK;
    }
    private static final int V4L2_RDS_BLOCK_A = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_A 0
     * }
     */
    public static int V4L2_RDS_BLOCK_A() {
        return V4L2_RDS_BLOCK_A;
    }
    private static final int V4L2_RDS_BLOCK_B = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_B 1
     * }
     */
    public static int V4L2_RDS_BLOCK_B() {
        return V4L2_RDS_BLOCK_B;
    }
    private static final int V4L2_RDS_BLOCK_C = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_C 2
     * }
     */
    public static int V4L2_RDS_BLOCK_C() {
        return V4L2_RDS_BLOCK_C;
    }
    private static final int V4L2_RDS_BLOCK_D = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_D 3
     * }
     */
    public static int V4L2_RDS_BLOCK_D() {
        return V4L2_RDS_BLOCK_D;
    }
    private static final int V4L2_RDS_BLOCK_C_ALT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_C_ALT 4
     * }
     */
    public static int V4L2_RDS_BLOCK_C_ALT() {
        return V4L2_RDS_BLOCK_C_ALT;
    }
    private static final int V4L2_RDS_BLOCK_INVALID = (int)7L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_INVALID 7
     * }
     */
    public static int V4L2_RDS_BLOCK_INVALID() {
        return V4L2_RDS_BLOCK_INVALID;
    }
    private static final int V4L2_RDS_BLOCK_CORRECTED = (int)64L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_CORRECTED 64
     * }
     */
    public static int V4L2_RDS_BLOCK_CORRECTED() {
        return V4L2_RDS_BLOCK_CORRECTED;
    }
    private static final int V4L2_RDS_BLOCK_ERROR = (int)128L;
    /**
     * {@snippet lang=c :
     * #define V4L2_RDS_BLOCK_ERROR 128
     * }
     */
    public static int V4L2_RDS_BLOCK_ERROR() {
        return V4L2_RDS_BLOCK_ERROR;
    }
    private static final int V4L2_AUDCAP_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AUDCAP_STEREO 1
     * }
     */
    public static int V4L2_AUDCAP_STEREO() {
        return V4L2_AUDCAP_STEREO;
    }
    private static final int V4L2_AUDCAP_AVL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AUDCAP_AVL 2
     * }
     */
    public static int V4L2_AUDCAP_AVL() {
        return V4L2_AUDCAP_AVL;
    }
    private static final int V4L2_AUDMODE_AVL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_AUDMODE_AVL 1
     * }
     */
    public static int V4L2_AUDMODE_AVL() {
        return V4L2_AUDMODE_AVL;
    }
    private static final int V4L2_EVENT_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_ALL 0
     * }
     */
    public static int V4L2_EVENT_ALL() {
        return V4L2_EVENT_ALL;
    }
    private static final int V4L2_EVENT_VSYNC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_VSYNC 1
     * }
     */
    public static int V4L2_EVENT_VSYNC() {
        return V4L2_EVENT_VSYNC;
    }
    private static final int V4L2_EVENT_EOS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_EOS 2
     * }
     */
    public static int V4L2_EVENT_EOS() {
        return V4L2_EVENT_EOS;
    }
    private static final int V4L2_EVENT_CTRL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_CTRL 3
     * }
     */
    public static int V4L2_EVENT_CTRL() {
        return V4L2_EVENT_CTRL;
    }
    private static final int V4L2_EVENT_FRAME_SYNC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_FRAME_SYNC 4
     * }
     */
    public static int V4L2_EVENT_FRAME_SYNC() {
        return V4L2_EVENT_FRAME_SYNC;
    }
    private static final int V4L2_EVENT_SOURCE_CHANGE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_SOURCE_CHANGE 5
     * }
     */
    public static int V4L2_EVENT_SOURCE_CHANGE() {
        return V4L2_EVENT_SOURCE_CHANGE;
    }
    private static final int V4L2_EVENT_MOTION_DET = (int)6L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_MOTION_DET 6
     * }
     */
    public static int V4L2_EVENT_MOTION_DET() {
        return V4L2_EVENT_MOTION_DET;
    }
    private static final int V4L2_EVENT_PRIVATE_START = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define V4L2_EVENT_PRIVATE_START 134217728
     * }
     */
    public static int V4L2_EVENT_PRIVATE_START() {
        return V4L2_EVENT_PRIVATE_START;
    }
    private static final int V4L2_CHIP_MATCH_BRIDGE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CHIP_MATCH_BRIDGE 0
     * }
     */
    public static int V4L2_CHIP_MATCH_BRIDGE() {
        return V4L2_CHIP_MATCH_BRIDGE;
    }
    private static final int V4L2_CHIP_MATCH_SUBDEV = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CHIP_MATCH_SUBDEV 4
     * }
     */
    public static int V4L2_CHIP_MATCH_SUBDEV() {
        return V4L2_CHIP_MATCH_SUBDEV;
    }
    private static final int V4L2_CHIP_MATCH_I2C_DRIVER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CHIP_MATCH_I2C_DRIVER 1
     * }
     */
    public static int V4L2_CHIP_MATCH_I2C_DRIVER() {
        return V4L2_CHIP_MATCH_I2C_DRIVER;
    }
    private static final int V4L2_CHIP_MATCH_I2C_ADDR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CHIP_MATCH_I2C_ADDR 2
     * }
     */
    public static int V4L2_CHIP_MATCH_I2C_ADDR() {
        return V4L2_CHIP_MATCH_I2C_ADDR;
    }
    private static final int V4L2_CHIP_MATCH_AC97 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CHIP_MATCH_AC97 3
     * }
     */
    public static int V4L2_CHIP_MATCH_AC97() {
        return V4L2_CHIP_MATCH_AC97;
    }
    private static final int BASE_VIDIOC_PRIVATE = (int)192L;
    /**
     * {@snippet lang=c :
     * #define BASE_VIDIOC_PRIVATE 192
     * }
     */
    public static int BASE_VIDIOC_PRIVATE() {
        return BASE_VIDIOC_PRIVATE;
    }
    private static final int V4L2_CAP_ASYNCIO = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define V4L2_CAP_ASYNCIO 33554432
     * }
     */
    public static int V4L2_CAP_ASYNCIO() {
        return V4L2_CAP_ASYNCIO;
    }
    private static final int V4L2_MBUS_FRAMEFMT_SET_CSC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_MBUS_FRAMEFMT_SET_CSC 1
     * }
     */
    public static int V4L2_MBUS_FRAMEFMT_SET_CSC() {
        return V4L2_MBUS_FRAMEFMT_SET_CSC;
    }
    private static final int V4L2_SUBDEV_MBUS_CODE_CSC_COLORSPACE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_MBUS_CODE_CSC_COLORSPACE 1
     * }
     */
    public static int V4L2_SUBDEV_MBUS_CODE_CSC_COLORSPACE() {
        return V4L2_SUBDEV_MBUS_CODE_CSC_COLORSPACE;
    }
    private static final int V4L2_SUBDEV_MBUS_CODE_CSC_XFER_FUNC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_MBUS_CODE_CSC_XFER_FUNC 2
     * }
     */
    public static int V4L2_SUBDEV_MBUS_CODE_CSC_XFER_FUNC() {
        return V4L2_SUBDEV_MBUS_CODE_CSC_XFER_FUNC;
    }
    private static final int V4L2_SUBDEV_MBUS_CODE_CSC_YCBCR_ENC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_MBUS_CODE_CSC_YCBCR_ENC 4
     * }
     */
    public static int V4L2_SUBDEV_MBUS_CODE_CSC_YCBCR_ENC() {
        return V4L2_SUBDEV_MBUS_CODE_CSC_YCBCR_ENC;
    }
    private static final int V4L2_SUBDEV_MBUS_CODE_CSC_QUANTIZATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_MBUS_CODE_CSC_QUANTIZATION 8
     * }
     */
    public static int V4L2_SUBDEV_MBUS_CODE_CSC_QUANTIZATION() {
        return V4L2_SUBDEV_MBUS_CODE_CSC_QUANTIZATION;
    }
    private static final int V4L2_SUBDEV_CAP_RO_SUBDEV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_CAP_RO_SUBDEV 1
     * }
     */
    public static int V4L2_SUBDEV_CAP_RO_SUBDEV() {
        return V4L2_SUBDEV_CAP_RO_SUBDEV;
    }
    private static final int V4L2_SUBDEV_CAP_STREAMS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define V4L2_SUBDEV_CAP_STREAMS 2
     * }
     */
    public static int V4L2_SUBDEV_CAP_STREAMS() {
        return V4L2_SUBDEV_CAP_STREAMS;
    }
    private static final int LOG2_GAIN_SHIFT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define LOG2_GAIN_SHIFT 12
     * }
     */
    public static int LOG2_GAIN_SHIFT() {
        return LOG2_GAIN_SHIFT;
    }
    private static final int SHUTTER_TIME_SHIFT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SHUTTER_TIME_SHIFT 12
     * }
     */
    public static int SHUTTER_TIME_SHIFT() {
        return SHUTTER_TIME_SHIFT;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __nlink_t
     * }
     */
    public static final OfInt __nlink_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = mediaAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __blksize_t
     * }
     */
    public static final OfInt __blksize_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = mediaAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = mediaAPI.C_LONG;

    private static class stdin$constants {
        public static final AddressLayout LAYOUT = mediaAPI.C_POINTER;
        public static final MemorySegment SEGMENT = mediaAPI.findOrThrow("stdin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static AddressLayout stdin$layout() {
        return stdin$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin$segment() {
        return stdin$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin() {
        return stdin$constants.SEGMENT.get(stdin$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static void stdin(MemorySegment varValue) {
        stdin$constants.SEGMENT.set(stdin$constants.LAYOUT, 0L, varValue);
    }

    private static class stdout$constants {
        public static final AddressLayout LAYOUT = mediaAPI.C_POINTER;
        public static final MemorySegment SEGMENT = mediaAPI.findOrThrow("stdout").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static AddressLayout stdout$layout() {
        return stdout$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout$segment() {
        return stdout$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout() {
        return stdout$constants.SEGMENT.get(stdout$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static void stdout(MemorySegment varValue) {
        stdout$constants.SEGMENT.set(stdout$constants.LAYOUT, 0L, varValue);
    }

    private static class stderr$constants {
        public static final AddressLayout LAYOUT = mediaAPI.C_POINTER;
        public static final MemorySegment SEGMENT = mediaAPI.findOrThrow("stderr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static AddressLayout stderr$layout() {
        return stderr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr$segment() {
        return stderr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr() {
        return stderr$constants.SEGMENT.get(stderr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static void stderr(MemorySegment varValue) {
        stderr$constants.SEGMENT.set(stderr$constants.LAYOUT, 0L, varValue);
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", __filename);
            }
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MemorySegment renameat$address() {
        return renameat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", __oldfd, __old, __newfd, __new);
            }
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER    );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("tmpnam_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static FunctionDescriptor tmpnam_r$descriptor() {
        return tmpnam_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MethodHandle tmpnam_r$handle() {
        return tmpnam_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r$address() {
        return tmpnam_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam_r", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __pfx);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fflush_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush_unlocked$descriptor() {
        return fflush_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fflush_unlocked$handle() {
        return fflush_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fflush_unlocked$address() {
        return fflush_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", __filename, __modes, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", __fd, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopencookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            _IO_cookie_io_functions_t.layout()
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fopencookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes, cookie_io_functions_t __io_funcs)
     * }
     */
    public static FunctionDescriptor fopencookie$descriptor() {
        return fopencookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes, cookie_io_functions_t __io_funcs)
     * }
     */
    public static MethodHandle fopencookie$handle() {
        return fopencookie.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes, cookie_io_functions_t __io_funcs)
     * }
     */
    public static MemorySegment fopencookie$address() {
        return fopencookie.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes, cookie_io_functions_t __io_funcs)
     * }
     */
    public static MemorySegment fopencookie(MemorySegment __magic_cookie, MemorySegment __modes, MemorySegment __io_funcs) {
        var mh$ = fopencookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopencookie", __magic_cookie, __modes, __io_funcs);
            }
            return (MemorySegment)mh$.invokeExact(__magic_cookie, __modes, __io_funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen$address() {
        return fmemopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __s, __len, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream$address() {
        return open_memstream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufloc, __sizeloc);
            }
            return (MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", __stream, __buf);
            }
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", __stream, __buf, __modes, __n);
            }
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MemorySegment setbuffer$address() {
        return setbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", __stream, __buf, __size);
            }
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MemorySegment setlinebuf$address() {
        return setlinebuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", __stream, __format, x2);
                }
                return (int) spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int printf(const char *restrict __format, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int printf(const char *restrict __format, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", __format, x1);
                }
                return (int) spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", __s, __format, x2);
                }
                return (int) spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_LONG,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __s, __maxlen, __format, x3);
                }
                return (int) spreader.invokeExact(__s, __maxlen, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
     * }
     */
    public static class __asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("__asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
         * }
         */
        public static __asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__asprintf", __ptr, __fmt, x2);
                }
                return (int) spreader.invokeExact(__ptr, __fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
     * }
     */
    public static class asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
         * }
         */
        public static asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("asprintf", __ptr, __fmt, x2);
                }
                return (int) spreader.invokeExact(__ptr, __fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int dprintf(int __fd, const char *restrict __fmt, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_INT,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int dprintf(int __fd, const char *restrict __fmt, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, MemorySegment __fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", __fd, __fmt, x2);
                }
                return (int) spreader.invokeExact(__fd, __fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", __stream, __format, x2);
                }
                return (int) spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int scanf(const char *restrict __format, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int scanf(const char *restrict __format, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", __format, x1);
                }
                return (int) spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mediaAPI.C_INT,
                mediaAPI.C_POINTER,
                mediaAPI.C_POINTER
            );
        private static final MemorySegment ADDR = mediaAPI.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", __s, __format, x2);
                }
                return (int) spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = mediaAPI.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = mediaAPI.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = mediaAPI.C_DOUBLE;

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT    );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment getc_unlocked$address() {
        return getc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT    );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MemorySegment getchar_unlocked$address() {
        return getchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fgetc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc_unlocked$descriptor() {
        return fgetc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc_unlocked$handle() {
        return fgetc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc_unlocked$address() {
        return fgetc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fputc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc_unlocked$descriptor() {
        return fputc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc_unlocked$handle() {
        return fputc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc_unlocked$address() {
        return fputc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc_unlocked$address() {
        return putc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MemorySegment putchar_unlocked$address() {
        return putchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", __w, __stream);
            }
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", __s, __n, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor __getdelim$descriptor() {
        return __getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle __getdelim$handle() {
        return __getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment __getdelim$address() {
        return __getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() {
        return getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() {
        return getline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __lineptr, __n, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", __s, __stream);
            }
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", __s);
            }
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __n, __s);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fread_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread_unlocked$descriptor() {
        return fread_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread_unlocked$handle() {
        return fread_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread_unlocked$address() {
        return fread_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fwrite_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fwrite_unlocked$descriptor() {
        return fwrite_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fwrite_unlocked$handle() {
        return fwrite_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fwrite_unlocked$address() {
        return fwrite_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() {
        return fseeko.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() {
        return ftello.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("clearerr_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr_unlocked$descriptor() {
        return clearerr_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr_unlocked$handle() {
        return clearerr_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr_unlocked$address() {
        return clearerr_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr_unlocked", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("feof_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof_unlocked$descriptor() {
        return feof_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle feof_unlocked$handle() {
        return feof_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment feof_unlocked$address() {
        return feof_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ferror_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror_unlocked$descriptor() {
        return ferror_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle ferror_unlocked$handle() {
        return ferror_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment ferror_unlocked$address() {
        return ferror_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", __s);
            }
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("fileno_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno_unlocked$descriptor() {
        return fileno_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fileno_unlocked$handle() {
        return fileno_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fileno_unlocked$address() {
        return fileno_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MemorySegment pclose$address() {
        return pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen$address() {
        return popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", __command, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid$address() {
        return ctermid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MemorySegment flockfile$address() {
        return flockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MemorySegment ftrylockfile$address() {
        return ftrylockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MemorySegment funlockfile$address() {
        return funlockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __uflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__uflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static FunctionDescriptor __uflow$descriptor() {
        return __uflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MethodHandle __uflow$handle() {
        return __uflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MemorySegment __uflow$address() {
        return __uflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__uflow", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __overflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__overflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static FunctionDescriptor __overflow$descriptor() {
        return __overflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MethodHandle __overflow$handle() {
        return __overflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MemorySegment __overflow$address() {
        return __overflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__overflow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor memcpy$descriptor() {
        return memcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle memcpy$handle() {
        return memcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment memcpy$address() {
        return memcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment memcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memcpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memmove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memmove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memmove(void *__dest, const void *__src, size_t __n)
     * }
     */
    public static FunctionDescriptor memmove$descriptor() {
        return memmove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memmove(void *__dest, const void *__src, size_t __n)
     * }
     */
    public static MethodHandle memmove$handle() {
        return memmove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memmove(void *__dest, const void *__src, size_t __n)
     * }
     */
    public static MemorySegment memmove$address() {
        return memmove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memmove(void *__dest, const void *__src, size_t __n)
     * }
     */
    public static MemorySegment memmove(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memmove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memmove", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memccpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memccpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memccpy$descriptor() {
        return memccpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static MethodHandle memccpy$handle() {
        return memccpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static MemorySegment memccpy$address() {
        return memccpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static MemorySegment memccpy(MemorySegment __dest, MemorySegment __src, int __c, long __n) {
        var mh$ = memccpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memccpy", __dest, __src, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memset$descriptor() {
        return memset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static MethodHandle memset$handle() {
        return memset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memset$address() {
        return memset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memset(MemorySegment __s, int __c, long __n) {
        var mh$ = memset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memset", __s, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memcmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor memcmp$descriptor() {
        return memcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle memcmp$handle() {
        return memcmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MemorySegment memcmp$address() {
        return memcmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memcmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __memcmpeq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__memcmpeq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor __memcmpeq$descriptor() {
        return __memcmpeq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle __memcmpeq$handle() {
        return __memcmpeq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MemorySegment __memcmpeq$address() {
        return __memcmpeq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int __memcmpeq(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = __memcmpeq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__memcmpeq", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memchr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memchr$descriptor() {
        return memchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static MethodHandle memchr$handle() {
        return memchr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memchr$address() {
        return memchr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memchr", __s, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor strcpy$descriptor() {
        return strcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle strcpy$handle() {
        return strcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcpy$address() {
        return strcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strncpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strncpy$descriptor() {
        return strncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strncpy$handle() {
        return strncpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncpy$address() {
        return strncpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor strcat$descriptor() {
        return strcat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle strcat$handle() {
        return strcat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcat$address() {
        return strcat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcat(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcat", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strncat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strncat$descriptor() {
        return strncat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strncat$handle() {
        return strncat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncat$address() {
        return strncat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncat", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcmp$descriptor() {
        return strcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcmp$handle() {
        return strcmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static MemorySegment strcmp$address() {
        return strcmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcmp", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strncmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor strncmp$descriptor() {
        return strncmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MethodHandle strncmp$handle() {
        return strncmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MemorySegment strncmp$address() {
        return strncmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcoll$descriptor() {
        return strcoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcoll$handle() {
        return strcoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static MemorySegment strcoll$address() {
        return strcoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcoll", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strxfrm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strxfrm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strxfrm$descriptor() {
        return strxfrm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strxfrm$handle() {
        return strxfrm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strxfrm$address() {
        return strxfrm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static long strxfrm(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strxfrm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strxfrm", __dest, __src, __n);
            }
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct __locale_struct {
     *     struct __locale_data *__locales[13];
     *     const unsigned short *__ctype_b;
     *     const int *__ctype_tolower;
     *     const int *__ctype_toupper;
     *     const char *__names[13];
     * } *__locale_t
     * }
     */
    public static final AddressLayout __locale_t = mediaAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __locale_t locale_t
     * }
     */
    public static final AddressLayout locale_t = mediaAPI.C_POINTER;

    private static class strcoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static FunctionDescriptor strcoll_l$descriptor() {
        return strcoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static MethodHandle strcoll_l$handle() {
        return strcoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static MemorySegment strcoll_l$address() {
        return strcoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static int strcoll_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __l) {
        var mh$ = strcoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcoll_l", __s1, __s2, __l);
            }
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strxfrm_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strxfrm_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static FunctionDescriptor strxfrm_l$descriptor() {
        return strxfrm_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static MethodHandle strxfrm_l$handle() {
        return strxfrm_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static MemorySegment strxfrm_l$address() {
        return strxfrm_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static long strxfrm_l(MemorySegment __dest, MemorySegment __src, long __n, MemorySegment __l) {
        var mh$ = strxfrm_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strxfrm_l", __dest, __src, __n, __l);
            }
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strdup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static FunctionDescriptor strdup$descriptor() {
        return strdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static MethodHandle strdup$handle() {
        return strdup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static MemorySegment strdup$address() {
        return strdup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static MemorySegment strdup(MemorySegment __s) {
        var mh$ = strdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strdup", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strndup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strndup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static FunctionDescriptor strndup$descriptor() {
        return strndup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static MethodHandle strndup$handle() {
        return strndup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static MemorySegment strndup$address() {
        return strndup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static MemorySegment strndup(MemorySegment __string, long __n) {
        var mh$ = strndup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strndup", __string, __n);
            }
            return (MemorySegment)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strchr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor strchr$descriptor() {
        return strchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static MethodHandle strchr$handle() {
        return strchr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strchr$address() {
        return strchr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strchr", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strrchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strrchr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor strrchr$descriptor() {
        return strrchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static MethodHandle strrchr$handle() {
        return strrchr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strrchr$address() {
        return strrchr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strrchr", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strchrnul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strchrnul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strchrnul(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor strchrnul$descriptor() {
        return strchrnul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strchrnul(const char *__s, int __c)
     * }
     */
    public static MethodHandle strchrnul$handle() {
        return strchrnul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strchrnul(const char *__s, int __c)
     * }
     */
    public static MemorySegment strchrnul$address() {
        return strchrnul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strchrnul(const char *__s, int __c)
     * }
     */
    public static MemorySegment strchrnul(MemorySegment __s, int __c) {
        var mh$ = strchrnul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strchrnul", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcspn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcspn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static FunctionDescriptor strcspn$descriptor() {
        return strcspn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static MethodHandle strcspn$handle() {
        return strcspn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static MemorySegment strcspn$address() {
        return strcspn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __reject) {
        var mh$ = strcspn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcspn", __s, __reject);
            }
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strspn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strspn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static FunctionDescriptor strspn$descriptor() {
        return strspn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static MethodHandle strspn$handle() {
        return strspn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static MemorySegment strspn$address() {
        return strspn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strspn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strspn", __s, __accept);
            }
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strpbrk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strpbrk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static FunctionDescriptor strpbrk$descriptor() {
        return strpbrk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static MethodHandle strpbrk$handle() {
        return strpbrk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static MemorySegment strpbrk$address() {
        return strpbrk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strpbrk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strpbrk", __s, __accept);
            }
            return (MemorySegment)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static FunctionDescriptor strstr$descriptor() {
        return strstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static MethodHandle strstr$handle() {
        return strstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static MemorySegment strstr$address() {
        return strstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static MemorySegment strstr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strstr", __haystack, __needle);
            }
            return (MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtok {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strtok");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static FunctionDescriptor strtok$descriptor() {
        return strtok.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static MethodHandle strtok$handle() {
        return strtok.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static MemorySegment strtok$address() {
        return strtok.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static MemorySegment strtok(MemorySegment __s, MemorySegment __delim) {
        var mh$ = strtok.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtok", __s, __delim);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __strtok_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__strtok_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static FunctionDescriptor __strtok_r$descriptor() {
        return __strtok_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MethodHandle __strtok_r$handle() {
        return __strtok_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment __strtok_r$address() {
        return __strtok_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment __strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = __strtok_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__strtok_r", __s, __delim, __save_ptr);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtok_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strtok_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static FunctionDescriptor strtok_r$descriptor() {
        return strtok_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MethodHandle strtok_r$handle() {
        return strtok_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment strtok_r$address() {
        return strtok_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = strtok_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtok_r", __s, __delim, __save_ptr);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcasestr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcasestr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strcasestr(const char *__haystack, const char *__needle)
     * }
     */
    public static FunctionDescriptor strcasestr$descriptor() {
        return strcasestr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strcasestr(const char *__haystack, const char *__needle)
     * }
     */
    public static MethodHandle strcasestr$handle() {
        return strcasestr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strcasestr(const char *__haystack, const char *__needle)
     * }
     */
    public static MemorySegment strcasestr$address() {
        return strcasestr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strcasestr(const char *__haystack, const char *__needle)
     * }
     */
    public static MemorySegment strcasestr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strcasestr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcasestr", __haystack, __needle);
            }
            return (MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memmem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("memmem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen)
     * }
     */
    public static FunctionDescriptor memmem$descriptor() {
        return memmem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen)
     * }
     */
    public static MethodHandle memmem$handle() {
        return memmem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen)
     * }
     */
    public static MemorySegment memmem$address() {
        return memmem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen)
     * }
     */
    public static MemorySegment memmem(MemorySegment __haystack, long __haystacklen, MemorySegment __needle, long __needlelen) {
        var mh$ = memmem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memmem", __haystack, __haystacklen, __needle, __needlelen);
            }
            return (MemorySegment)mh$.invokeExact(__haystack, __haystacklen, __needle, __needlelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __mempcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__mempcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor __mempcpy$descriptor() {
        return __mempcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle __mempcpy$handle() {
        return __mempcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment __mempcpy$address() {
        return __mempcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment __mempcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __mempcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__mempcpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mempcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("mempcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor mempcpy$descriptor() {
        return mempcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle mempcpy$handle() {
        return mempcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment mempcpy$address() {
        return mempcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment mempcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = mempcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mempcpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static FunctionDescriptor strlen$descriptor() {
        return strlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static MethodHandle strlen$handle() {
        return strlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static MemorySegment strlen$address() {
        return strlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strlen", __s);
            }
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strnlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strnlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static FunctionDescriptor strnlen$descriptor() {
        return strnlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static MethodHandle strnlen$handle() {
        return strnlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static MemorySegment strnlen$address() {
        return strnlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static long strnlen(MemorySegment __string, long __maxlen) {
        var mh$ = strnlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strnlen", __string, __maxlen);
            }
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static FunctionDescriptor strerror$descriptor() {
        return strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static MethodHandle strerror$handle() {
        return strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static MemorySegment strerror$address() {
        return strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror", __errnum);
            }
            return (MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__xpg_strerror_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static FunctionDescriptor strerror_r$descriptor() {
        return strerror_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static MethodHandle strerror_r$handle() {
        return strerror_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static MemorySegment strerror_r$address() {
        return strerror_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __buf, long __buflen) {
        var mh$ = strerror_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror_r", __errnum, __buf, __buflen);
            }
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strerror_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static FunctionDescriptor strerror_l$descriptor() {
        return strerror_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static MethodHandle strerror_l$handle() {
        return strerror_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static MemorySegment strerror_l$address() {
        return strerror_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static MemorySegment strerror_l(int __errnum, MemorySegment __l) {
        var mh$ = strerror_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror_l", __errnum, __l);
            }
            return (MemorySegment)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("bcmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor bcmp$descriptor() {
        return bcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle bcmp$handle() {
        return bcmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MemorySegment bcmp$address() {
        return bcmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int bcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = bcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bcmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bcopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("bcopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static FunctionDescriptor bcopy$descriptor() {
        return bcopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static MethodHandle bcopy$handle() {
        return bcopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static MemorySegment bcopy$address() {
        return bcopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static void bcopy(MemorySegment __src, MemorySegment __dest, long __n) {
        var mh$ = bcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bcopy", __src, __dest, __n);
            }
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bzero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("bzero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor bzero$descriptor() {
        return bzero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static MethodHandle bzero$handle() {
        return bzero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static MemorySegment bzero$address() {
        return bzero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static void bzero(MemorySegment __s, long __n) {
        var mh$ = bzero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bzero", __s, __n);
            }
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor index$descriptor() {
        return index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static MethodHandle index$handle() {
        return index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static MemorySegment index$address() {
        return index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static MemorySegment index(MemorySegment __s, int __c) {
        var mh$ = index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("index", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rindex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("rindex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor rindex$descriptor() {
        return rindex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static MethodHandle rindex$handle() {
        return rindex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static MemorySegment rindex$address() {
        return rindex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static MemorySegment rindex(MemorySegment __s, int __c) {
        var mh$ = rindex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rindex", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ffs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static FunctionDescriptor ffs$descriptor() {
        return ffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static MethodHandle ffs$handle() {
        return ffs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static MemorySegment ffs$address() {
        return ffs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static int ffs(int __i) {
        var mh$ = ffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffs", __i);
            }
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffsl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ffsl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static FunctionDescriptor ffsl$descriptor() {
        return ffsl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static MethodHandle ffsl$handle() {
        return ffsl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static MemorySegment ffsl$address() {
        return ffsl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static int ffsl(long __l) {
        var mh$ = ffsl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffsl", __l);
            }
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffsll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("ffsll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static FunctionDescriptor ffsll$descriptor() {
        return ffsll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static MethodHandle ffsll$handle() {
        return ffsll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static MemorySegment ffsll$address() {
        return ffsll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static int ffsll(long __ll) {
        var mh$ = ffsll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffsll", __ll);
            }
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcasecmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcasecmp$descriptor() {
        return strcasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcasecmp$handle() {
        return strcasecmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static MemorySegment strcasecmp$address() {
        return strcasecmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static int strcasecmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcasecmp", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strncasecmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor strncasecmp$descriptor() {
        return strncasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MethodHandle strncasecmp$handle() {
        return strncasecmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MemorySegment strncasecmp$address() {
        return strncasecmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static int strncasecmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncasecmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcasecmp_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strcasecmp_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static FunctionDescriptor strcasecmp_l$descriptor() {
        return strcasecmp_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static MethodHandle strcasecmp_l$handle() {
        return strcasecmp_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static MemorySegment strcasecmp_l$address() {
        return strcasecmp_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static int strcasecmp_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __loc) {
        var mh$ = strcasecmp_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcasecmp_l", __s1, __s2, __loc);
            }
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncasecmp_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strncasecmp_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static FunctionDescriptor strncasecmp_l$descriptor() {
        return strncasecmp_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static MethodHandle strncasecmp_l$handle() {
        return strncasecmp_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static MemorySegment strncasecmp_l$address() {
        return strncasecmp_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static int strncasecmp_l(MemorySegment __s1, MemorySegment __s2, long __n, MemorySegment __loc) {
        var mh$ = strncasecmp_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncasecmp_l", __s1, __s2, __n, __loc);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class explicit_bzero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("explicit_bzero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor explicit_bzero$descriptor() {
        return explicit_bzero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static MethodHandle explicit_bzero$handle() {
        return explicit_bzero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static MemorySegment explicit_bzero$address() {
        return explicit_bzero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static void explicit_bzero(MemorySegment __s, long __n) {
        var mh$ = explicit_bzero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("explicit_bzero", __s, __n);
            }
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strsep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strsep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static FunctionDescriptor strsep$descriptor() {
        return strsep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static MethodHandle strsep$handle() {
        return strsep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static MemorySegment strsep$address() {
        return strsep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strsep", __stringp, __delim);
            }
            return (MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strsignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strsignal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static FunctionDescriptor strsignal$descriptor() {
        return strsignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static MethodHandle strsignal$handle() {
        return strsignal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static MemorySegment strsignal$address() {
        return strsignal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strsignal", __sig);
            }
            return (MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stpcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__stpcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor __stpcpy$descriptor() {
        return __stpcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle __stpcpy$handle() {
        return __stpcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment __stpcpy$address() {
        return __stpcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment __stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = __stpcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stpcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stpcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("stpcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor stpcpy$descriptor() {
        return stpcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle stpcpy$handle() {
        return stpcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment stpcpy$address() {
        return stpcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = stpcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stpcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stpncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("__stpncpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor __stpncpy$descriptor() {
        return __stpncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle __stpncpy$handle() {
        return __stpncpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment __stpncpy$address() {
        return __stpncpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment __stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __stpncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stpncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stpncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("stpncpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor stpncpy$descriptor() {
        return stpncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle stpncpy$handle() {
        return stpncpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment stpncpy$address() {
        return stpncpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = stpncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stpncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strlcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strlcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strlcpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strlcpy$descriptor() {
        return strlcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strlcpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strlcpy$handle() {
        return strlcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strlcpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strlcpy$address() {
        return strlcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strlcpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static long strlcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strlcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strlcpy", __dest, __src, __n);
            }
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strlcat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_LONG,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("strlcat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strlcat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strlcat$descriptor() {
        return strlcat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strlcat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strlcat$handle() {
        return strlcat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strlcat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strlcat$address() {
        return strlcat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strlcat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static long strlcat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strlcat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strlcat", __dest, __src, __n);
            }
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char __s8
     * }
     */
    public static final OfByte __s8 = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u8
     * }
     */
    public static final OfByte __u8 = mediaAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __s16
     * }
     */
    public static final OfShort __s16 = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u16
     * }
     */
    public static final OfShort __u16 = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __s32
     * }
     */
    public static final OfInt __s32 = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u32
     * }
     */
    public static final OfInt __u32 = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __s64
     * }
     */
    public static final OfLong __s64 = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __u64
     * }
     */
    public static final OfLong __u64 = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_key_t
     * }
     */
    public static final OfInt __kernel_key_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_mqd_t
     * }
     */
    public static final OfInt __kernel_mqd_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_uid_t
     * }
     */
    public static final OfShort __kernel_old_uid_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_gid_t
     * }
     */
    public static final OfShort __kernel_old_gid_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long __kernel_long_t
     * }
     */
    public static final OfLong __kernel_long_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_ulong_t
     * }
     */
    public static final OfLong __kernel_ulong_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_ino_t
     * }
     */
    public static final OfLong __kernel_ino_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_mode_t
     * }
     */
    public static final OfInt __kernel_mode_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_pid_t
     * }
     */
    public static final OfInt __kernel_pid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_ipc_pid_t
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid_t
     * }
     */
    public static final OfInt __kernel_uid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid_t
     * }
     */
    public static final OfInt __kernel_gid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_suseconds_t
     * }
     */
    public static final OfLong __kernel_suseconds_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_daddr_t
     * }
     */
    public static final OfInt __kernel_daddr_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid32_t
     * }
     */
    public static final OfInt __kernel_uid32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid32_t
     * }
     */
    public static final OfInt __kernel_gid32_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_old_dev_t
     * }
     */
    public static final OfInt __kernel_old_dev_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_size_t
     * }
     */
    public static final OfLong __kernel_size_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ssize_t
     * }
     */
    public static final OfLong __kernel_ssize_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ptrdiff_t
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_off_t
     * }
     */
    public static final OfLong __kernel_off_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_loff_t
     * }
     */
    public static final OfLong __kernel_loff_t = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_old_time_t
     * }
     */
    public static final OfLong __kernel_old_time_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_time_t
     * }
     */
    public static final OfLong __kernel_time_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_time64_t
     * }
     */
    public static final OfLong __kernel_time64_t = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_clock_t
     * }
     */
    public static final OfLong __kernel_clock_t = mediaAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_timer_t
     * }
     */
    public static final OfInt __kernel_timer_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_clockid_t
     * }
     */
    public static final OfInt __kernel_clockid_t = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char *__kernel_caddr_t
     * }
     */
    public static final AddressLayout __kernel_caddr_t = mediaAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_uid16_t
     * }
     */
    public static final OfShort __kernel_uid16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_gid16_t
     * }
     */
    public static final OfShort __kernel_gid16_t = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __le16
     * }
     */
    public static final OfShort __le16 = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __be16
     * }
     */
    public static final OfShort __be16 = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __le32
     * }
     */
    public static final OfInt __le32 = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __be32
     * }
     */
    public static final OfInt __be32 = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u64 __le64
     * }
     */
    public static final OfLong __le64 = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u64 __be64
     * }
     */
    public static final OfLong __be64 = mediaAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u16 __sum16
     * }
     */
    public static final OfShort __sum16 = mediaAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __wsum
     * }
     */
    public static final OfInt __wsum = mediaAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __poll_t
     * }
     */
    public static final OfInt __poll_t = mediaAPI.C_INT;

    private static class media_device_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = MangledMediaAPI.findOrThrow("media_device_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_device *media_device_new(const char *devnode)
     * }
     */
    public static FunctionDescriptor media_device_new$descriptor() {
        return media_device_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_device *media_device_new(const char *devnode)
     * }
     */
    public static MethodHandle media_device_new$handle() {
        return media_device_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_device *media_device_new(const char *devnode)
     * }
     */
    public static MemorySegment media_device_new$address() {
        return media_device_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_device *media_device_new(const char *devnode)
     * }
     */
    public static MemorySegment media_device_new(MemorySegment devnode) {
        var mh$ = media_device_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_new", devnode);
            }
            return (MemorySegment)mh$.invokeExact(devnode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_new_with_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_new_with_fd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_with_fd(int fd)
     * }
     */
    public static FunctionDescriptor media_device_new_with_fd$descriptor() {
        return media_device_new_with_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_with_fd(int fd)
     * }
     */
    public static MethodHandle media_device_new_with_fd$handle() {
        return media_device_new_with_fd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_with_fd(int fd)
     * }
     */
    public static MemorySegment media_device_new_with_fd$address() {
        return media_device_new_with_fd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_device *media_device_new_with_fd(int fd)
     * }
     */
    public static MemorySegment media_device_new_with_fd(int fd) {
        var mh$ = media_device_new_with_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_new_with_fd", fd);
            }
            return (MemorySegment)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_new_emulated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_new_emulated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_emulated(struct media_device_info *info)
     * }
     */
    public static FunctionDescriptor media_device_new_emulated$descriptor() {
        return media_device_new_emulated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_emulated(struct media_device_info *info)
     * }
     */
    public static MethodHandle media_device_new_emulated$handle() {
        return media_device_new_emulated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_device *media_device_new_emulated(struct media_device_info *info)
     * }
     */
    public static MemorySegment media_device_new_emulated$address() {
        return media_device_new_emulated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_device *media_device_new_emulated(struct media_device_info *info)
     * }
     */
    public static MemorySegment media_device_new_emulated(MemorySegment info) {
        var mh$ = media_device_new_emulated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_new_emulated", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_device *media_device_ref(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_device_ref$descriptor() {
        return media_device_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_device *media_device_ref(struct media_device *media)
     * }
     */
    public static MethodHandle media_device_ref$handle() {
        return media_device_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_device *media_device_ref(struct media_device *media)
     * }
     */
    public static MemorySegment media_device_ref$address() {
        return media_device_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_device *media_device_ref(struct media_device *media)
     * }
     */
    public static MemorySegment media_device_ref(MemorySegment media) {
        var mh$ = media_device_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_ref", media);
            }
            return (MemorySegment)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void media_device_unref(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_device_unref$descriptor() {
        return media_device_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void media_device_unref(struct media_device *media)
     * }
     */
    public static MethodHandle media_device_unref$handle() {
        return media_device_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void media_device_unref(struct media_device *media)
     * }
     */
    public static MemorySegment media_device_unref$address() {
        return media_device_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void media_device_unref(struct media_device *media)
     * }
     */
    public static void media_device_unref(MemorySegment media) {
        var mh$ = media_device_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_unref", media);
            }
            mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_add_entity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_add_entity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_device_add_entity(struct media_device *media, const struct media_entity_desc *desc, const char *devnode)
     * }
     */
    public static FunctionDescriptor media_device_add_entity$descriptor() {
        return media_device_add_entity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_device_add_entity(struct media_device *media, const struct media_entity_desc *desc, const char *devnode)
     * }
     */
    public static MethodHandle media_device_add_entity$handle() {
        return media_device_add_entity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_device_add_entity(struct media_device *media, const struct media_entity_desc *desc, const char *devnode)
     * }
     */
    public static MemorySegment media_device_add_entity$address() {
        return media_device_add_entity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_device_add_entity(struct media_device *media, const struct media_entity_desc *desc, const char *devnode)
     * }
     */
    public static int media_device_add_entity(MemorySegment media, MemorySegment desc, MemorySegment devnode) {
        var mh$ = media_device_add_entity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_add_entity", media, desc, devnode);
            }
            return (int)mh$.invokeExact(media, desc, devnode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_device_enumerate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_device_enumerate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int media_device_enumerate(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_device_enumerate$descriptor() {
        return media_device_enumerate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int media_device_enumerate(struct media_device *media)
     * }
     */
    public static MethodHandle media_device_enumerate$handle() {
        return media_device_enumerate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int media_device_enumerate(struct media_device *media)
     * }
     */
    public static MemorySegment media_device_enumerate$address() {
        return media_device_enumerate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int media_device_enumerate(struct media_device *media)
     * }
     */
    public static int media_device_enumerate(MemorySegment media) {
        var mh$ = media_device_enumerate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_device_enumerate", media);
            }
            return (int)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_remote_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_remote_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_pad *media_entity_remote_source(struct media_pad *pad)
     * }
     */
    public static FunctionDescriptor media_entity_remote_source$descriptor() {
        return media_entity_remote_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_pad *media_entity_remote_source(struct media_pad *pad)
     * }
     */
    public static MethodHandle media_entity_remote_source$handle() {
        return media_entity_remote_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_pad *media_entity_remote_source(struct media_pad *pad)
     * }
     */
    public static MemorySegment media_entity_remote_source$address() {
        return media_entity_remote_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_pad *media_entity_remote_source(struct media_pad *pad)
     * }
     */
    public static MemorySegment media_entity_remote_source(MemorySegment pad) {
        var mh$ = media_entity_remote_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_remote_source", pad);
            }
            return (MemorySegment)mh$.invokeExact(pad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_get_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct media_entity_desc *media_entity_get_info(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor media_entity_get_info$descriptor() {
        return media_entity_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct media_entity_desc *media_entity_get_info(struct media_entity *entity)
     * }
     */
    public static MethodHandle media_entity_get_info$handle() {
        return media_entity_get_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct media_entity_desc *media_entity_get_info(struct media_entity *entity)
     * }
     */
    public static MemorySegment media_entity_get_info$address() {
        return media_entity_get_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct media_entity_desc *media_entity_get_info(struct media_entity *entity)
     * }
     */
    public static MemorySegment media_entity_get_info(MemorySegment entity) {
        var mh$ = media_entity_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_get_info", entity);
            }
            return (MemorySegment)mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_get_pad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_get_pad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct media_pad *media_entity_get_pad(struct media_entity *entity, unsigned int index)
     * }
     */
    public static FunctionDescriptor media_entity_get_pad$descriptor() {
        return media_entity_get_pad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct media_pad *media_entity_get_pad(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MethodHandle media_entity_get_pad$handle() {
        return media_entity_get_pad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct media_pad *media_entity_get_pad(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MemorySegment media_entity_get_pad$address() {
        return media_entity_get_pad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct media_pad *media_entity_get_pad(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MemorySegment media_entity_get_pad(MemorySegment entity, int index) {
        var mh$ = media_entity_get_pad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_get_pad", entity, index);
            }
            return (MemorySegment)mh$.invokeExact(entity, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_get_links_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_get_links_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int media_entity_get_links_count(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor media_entity_get_links_count$descriptor() {
        return media_entity_get_links_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int media_entity_get_links_count(struct media_entity *entity)
     * }
     */
    public static MethodHandle media_entity_get_links_count$handle() {
        return media_entity_get_links_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int media_entity_get_links_count(struct media_entity *entity)
     * }
     */
    public static MemorySegment media_entity_get_links_count$address() {
        return media_entity_get_links_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int media_entity_get_links_count(struct media_entity *entity)
     * }
     */
    public static int media_entity_get_links_count(MemorySegment entity) {
        var mh$ = media_entity_get_links_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_get_links_count", entity);
            }
            return (int)mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_get_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_get_link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct media_link *media_entity_get_link(struct media_entity *entity, unsigned int index)
     * }
     */
    public static FunctionDescriptor media_entity_get_link$descriptor() {
        return media_entity_get_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct media_link *media_entity_get_link(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MethodHandle media_entity_get_link$handle() {
        return media_entity_get_link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct media_link *media_entity_get_link(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MemorySegment media_entity_get_link$address() {
        return media_entity_get_link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct media_link *media_entity_get_link(struct media_entity *entity, unsigned int index)
     * }
     */
    public static MemorySegment media_entity_get_link(MemorySegment entity, int index) {
        var mh$ = media_entity_get_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_get_link", entity, index);
            }
            return (MemorySegment)mh$.invokeExact(entity, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_entity_get_devname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_entity_get_devname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *media_entity_get_devname(struct media_entity *entity)
     * }
     */
    public static FunctionDescriptor media_entity_get_devname$descriptor() {
        return media_entity_get_devname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *media_entity_get_devname(struct media_entity *entity)
     * }
     */
    public static MethodHandle media_entity_get_devname$handle() {
        return media_entity_get_devname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *media_entity_get_devname(struct media_entity *entity)
     * }
     */
    public static MemorySegment media_entity_get_devname$address() {
        return media_entity_get_devname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *media_entity_get_devname(struct media_entity *entity)
     * }
     */
    public static MemorySegment media_entity_get_devname(MemorySegment entity) {
        var mh$ = media_entity_get_devname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_entity_get_devname", entity);
            }
            return (MemorySegment)mh$.invokeExact(entity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_entity_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_LONG
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_entity_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_name(struct media_device *media, const char *name, size_t length)
     * }
     */
    public static FunctionDescriptor media_get_entity_by_name$descriptor() {
        return media_get_entity_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_name(struct media_device *media, const char *name, size_t length)
     * }
     */
    public static MethodHandle media_get_entity_by_name$handle() {
        return media_get_entity_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_name(struct media_device *media, const char *name, size_t length)
     * }
     */
    public static MemorySegment media_get_entity_by_name$address() {
        return media_get_entity_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_name(struct media_device *media, const char *name, size_t length)
     * }
     */
    public static MemorySegment media_get_entity_by_name(MemorySegment media, MemorySegment name, long length) {
        var mh$ = media_get_entity_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_entity_by_name", media, name, length);
            }
            return (MemorySegment)mh$.invokeExact(media, name, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_entity_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_entity_by_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_id(struct media_device *media, __u32 id)
     * }
     */
    public static FunctionDescriptor media_get_entity_by_id$descriptor() {
        return media_get_entity_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_id(struct media_device *media, __u32 id)
     * }
     */
    public static MethodHandle media_get_entity_by_id$handle() {
        return media_get_entity_by_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_id(struct media_device *media, __u32 id)
     * }
     */
    public static MemorySegment media_get_entity_by_id$address() {
        return media_get_entity_by_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_entity *media_get_entity_by_id(struct media_device *media, __u32 id)
     * }
     */
    public static MemorySegment media_get_entity_by_id(MemorySegment media, int id) {
        var mh$ = media_get_entity_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_entity_by_id", media, id);
            }
            return (MemorySegment)mh$.invokeExact(media, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_entities_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_entities_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int media_get_entities_count(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_get_entities_count$descriptor() {
        return media_get_entities_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int media_get_entities_count(struct media_device *media)
     * }
     */
    public static MethodHandle media_get_entities_count$handle() {
        return media_get_entities_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int media_get_entities_count(struct media_device *media)
     * }
     */
    public static MemorySegment media_get_entities_count$address() {
        return media_get_entities_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int media_get_entities_count(struct media_device *media)
     * }
     */
    public static int media_get_entities_count(MemorySegment media) {
        var mh$ = media_get_entities_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_entities_count", media);
            }
            return (int)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_entity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_entity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity(struct media_device *media, unsigned int index)
     * }
     */
    public static FunctionDescriptor media_get_entity$descriptor() {
        return media_get_entity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity(struct media_device *media, unsigned int index)
     * }
     */
    public static MethodHandle media_get_entity$handle() {
        return media_get_entity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_entity *media_get_entity(struct media_device *media, unsigned int index)
     * }
     */
    public static MemorySegment media_get_entity$address() {
        return media_get_entity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_entity *media_get_entity(struct media_device *media, unsigned int index)
     * }
     */
    public static MemorySegment media_get_entity(MemorySegment media, int index) {
        var mh$ = media_get_entity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_entity", media, index);
            }
            return (MemorySegment)mh$.invokeExact(media, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_default_entity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_default_entity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct media_entity *media_get_default_entity(struct media_device *media, unsigned int type)
     * }
     */
    public static FunctionDescriptor media_get_default_entity$descriptor() {
        return media_get_default_entity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct media_entity *media_get_default_entity(struct media_device *media, unsigned int type)
     * }
     */
    public static MethodHandle media_get_default_entity$handle() {
        return media_get_default_entity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct media_entity *media_get_default_entity(struct media_device *media, unsigned int type)
     * }
     */
    public static MemorySegment media_get_default_entity$address() {
        return media_get_default_entity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct media_entity *media_get_default_entity(struct media_device *media, unsigned int type)
     * }
     */
    public static MemorySegment media_get_default_entity(MemorySegment media, int type) {
        var mh$ = media_get_default_entity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_default_entity", media, type);
            }
            return (MemorySegment)mh$.invokeExact(media, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class media_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_POINTER
        );

        public static final MemorySegment ADDR = mediaAPI.findOrThrow("media_get_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct media_device_info *media_get_info(struct media_device *media)
     * }
     */
    public static FunctionDescriptor media_get_info$descriptor() {
        return media_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct media_device_info *media_get_info(struct media_device *media)
     * }
     */
    public static MethodHandle media_get_info$handle() {
        return media_get_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct media_device_info *media_get_info(struct media_device *media)
     * }
     */
    public static MemorySegment media_get_info$address() {
        return media_get_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct media_device_info *media_get_info(struct media_device *media)
     * }
     */
    public static MemorySegment media_get_info(MemorySegment media) {
        var mh$ = media_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("media_get_info", media);
            }
            return (MemorySegment)mh$.invokeExact(media);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

