// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     void (*pfn_lens_move)(uint32_t, uint16_t);
 *     void (*pfn_lens_stop)(uint32_t);
 *     uint8_t (*pfn_lens_is_moving)(uint32_t);
 *     uint16_t (*pfn_lens_get_pos)(uint32_t);
 *     int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t);
 *     void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *);
 *     const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t);
 *     void (*pfn_lens_move_zoom)(uint32_t, uint16_t);
 *     uint8_t (*pfn_lens_is_zooming)(uint32_t);
 * }
 * }
 */
public class ALG_LENS_FUNC_S {

    ALG_LENS_FUNC_S() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_POINTER.withName("pfn_lens_move"),
        mediaAPI.C_POINTER.withName("pfn_lens_stop"),
        mediaAPI.C_POINTER.withName("pfn_lens_is_moving"),
        mediaAPI.C_POINTER.withName("pfn_lens_get_pos"),
        mediaAPI.C_POINTER.withName("pfn_lens_write_register"),
        mediaAPI.C_POINTER.withName("pfn_lens_read_register"),
        mediaAPI.C_POINTER.withName("pfn_lens_get_parameters"),
        mediaAPI.C_POINTER.withName("pfn_lens_move_zoom"),
        mediaAPI.C_POINTER.withName("pfn_lens_is_zooming")
    ).withName("$anon$118:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_lens_move)(uint32_t, uint16_t)
     * }
     */
    public static class pfn_lens_move {

        pfn_lens_move() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_move.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_move.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, short _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_move$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_move"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move)(uint32_t, uint16_t)
     * }
     */
    public static final AddressLayout pfn_lens_move$layout() {
        return pfn_lens_move$LAYOUT;
    }

    private static final long pfn_lens_move$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move)(uint32_t, uint16_t)
     * }
     */
    public static final long pfn_lens_move$offset() {
        return pfn_lens_move$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move)(uint32_t, uint16_t)
     * }
     */
    public static MemorySegment pfn_lens_move(MemorySegment struct) {
        return struct.get(pfn_lens_move$LAYOUT, pfn_lens_move$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move)(uint32_t, uint16_t)
     * }
     */
    public static void pfn_lens_move(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_move$LAYOUT, pfn_lens_move$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_lens_stop)(uint32_t)
     * }
     */
    public static class pfn_lens_stop {

        pfn_lens_stop() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_stop.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_stop.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_stop$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_stop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_lens_stop)(uint32_t)
     * }
     */
    public static final AddressLayout pfn_lens_stop$layout() {
        return pfn_lens_stop$LAYOUT;
    }

    private static final long pfn_lens_stop$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_lens_stop)(uint32_t)
     * }
     */
    public static final long pfn_lens_stop$offset() {
        return pfn_lens_stop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_stop)(uint32_t)
     * }
     */
    public static MemorySegment pfn_lens_stop(MemorySegment struct) {
        return struct.get(pfn_lens_stop$LAYOUT, pfn_lens_stop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_stop)(uint32_t)
     * }
     */
    public static void pfn_lens_stop(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_stop$LAYOUT, pfn_lens_stop$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_moving)(uint32_t)
     * }
     */
    public static class pfn_lens_is_moving {

        pfn_lens_is_moving() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            byte apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_CHAR,
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_is_moving.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_is_moving.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static byte invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (byte) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_is_moving$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_is_moving"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_moving)(uint32_t)
     * }
     */
    public static final AddressLayout pfn_lens_is_moving$layout() {
        return pfn_lens_is_moving$LAYOUT;
    }

    private static final long pfn_lens_is_moving$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_moving)(uint32_t)
     * }
     */
    public static final long pfn_lens_is_moving$offset() {
        return pfn_lens_is_moving$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_moving)(uint32_t)
     * }
     */
    public static MemorySegment pfn_lens_is_moving(MemorySegment struct) {
        return struct.get(pfn_lens_is_moving$LAYOUT, pfn_lens_is_moving$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_moving)(uint32_t)
     * }
     */
    public static void pfn_lens_is_moving(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_is_moving$LAYOUT, pfn_lens_is_moving$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * uint16_t (*pfn_lens_get_pos)(uint32_t)
     * }
     */
    public static class pfn_lens_get_pos {

        pfn_lens_get_pos() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            short apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_SHORT,
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_get_pos.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_get_pos.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static short invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (short) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_get_pos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_get_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t (*pfn_lens_get_pos)(uint32_t)
     * }
     */
    public static final AddressLayout pfn_lens_get_pos$layout() {
        return pfn_lens_get_pos$LAYOUT;
    }

    private static final long pfn_lens_get_pos$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t (*pfn_lens_get_pos)(uint32_t)
     * }
     */
    public static final long pfn_lens_get_pos$offset() {
        return pfn_lens_get_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t (*pfn_lens_get_pos)(uint32_t)
     * }
     */
    public static MemorySegment pfn_lens_get_pos(MemorySegment struct) {
        return struct.get(pfn_lens_get_pos$LAYOUT, pfn_lens_get_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t (*pfn_lens_get_pos)(uint32_t)
     * }
     */
    public static void pfn_lens_get_pos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_get_pos$LAYOUT, pfn_lens_get_pos$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t)
     * }
     */
    public static class pfn_lens_write_register {

        pfn_lens_write_register() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, byte _x1, short _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_INT,
            mediaAPI.C_POINTER,
            mediaAPI.C_CHAR,
            mediaAPI.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_write_register.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_write_register.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, byte _x1, short _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_write_register$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_write_register"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t)
     * }
     */
    public static final AddressLayout pfn_lens_write_register$layout() {
        return pfn_lens_write_register$LAYOUT;
    }

    private static final long pfn_lens_write_register$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t)
     * }
     */
    public static final long pfn_lens_write_register$offset() {
        return pfn_lens_write_register$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t)
     * }
     */
    public static MemorySegment pfn_lens_write_register(MemorySegment struct) {
        return struct.get(pfn_lens_write_register$LAYOUT, pfn_lens_write_register$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t (*pfn_lens_write_register)(void *, uint8_t, uint16_t)
     * }
     */
    public static void pfn_lens_write_register(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_write_register$LAYOUT, pfn_lens_write_register$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *)
     * }
     */
    public static class pfn_lens_read_register {

        pfn_lens_read_register() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, byte _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_POINTER,
            mediaAPI.C_CHAR,
            mediaAPI.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_read_register.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_read_register.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, byte _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_read_register$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_read_register"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *)
     * }
     */
    public static final AddressLayout pfn_lens_read_register$layout() {
        return pfn_lens_read_register$LAYOUT;
    }

    private static final long pfn_lens_read_register$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *)
     * }
     */
    public static final long pfn_lens_read_register$offset() {
        return pfn_lens_read_register$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *)
     * }
     */
    public static MemorySegment pfn_lens_read_register(MemorySegment struct) {
        return struct.get(pfn_lens_read_register$LAYOUT, pfn_lens_read_register$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_read_register)(void *, uint8_t, uint16_t *)
     * }
     */
    public static void pfn_lens_read_register(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_read_register$LAYOUT, pfn_lens_read_register$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t)
     * }
     */
    public static class pfn_lens_get_parameters {

        pfn_lens_get_parameters() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_POINTER,
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_get_parameters.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_get_parameters.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_get_parameters$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_get_parameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t)
     * }
     */
    public static final AddressLayout pfn_lens_get_parameters$layout() {
        return pfn_lens_get_parameters$LAYOUT;
    }

    private static final long pfn_lens_get_parameters$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t)
     * }
     */
    public static final long pfn_lens_get_parameters$offset() {
        return pfn_lens_get_parameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t)
     * }
     */
    public static MemorySegment pfn_lens_get_parameters(MemorySegment struct) {
        return struct.get(pfn_lens_get_parameters$LAYOUT, pfn_lens_get_parameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const LENS_PARAM_T *(*pfn_lens_get_parameters)(uint32_t)
     * }
     */
    public static void pfn_lens_get_parameters(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_get_parameters$LAYOUT, pfn_lens_get_parameters$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pfn_lens_move_zoom)(uint32_t, uint16_t)
     * }
     */
    public static class pfn_lens_move_zoom {

        pfn_lens_move_zoom() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mediaAPI.C_INT,
            mediaAPI.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_move_zoom.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_move_zoom.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0, short _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_move_zoom$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_move_zoom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move_zoom)(uint32_t, uint16_t)
     * }
     */
    public static final AddressLayout pfn_lens_move_zoom$layout() {
        return pfn_lens_move_zoom$LAYOUT;
    }

    private static final long pfn_lens_move_zoom$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move_zoom)(uint32_t, uint16_t)
     * }
     */
    public static final long pfn_lens_move_zoom$offset() {
        return pfn_lens_move_zoom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move_zoom)(uint32_t, uint16_t)
     * }
     */
    public static MemorySegment pfn_lens_move_zoom(MemorySegment struct) {
        return struct.get(pfn_lens_move_zoom$LAYOUT, pfn_lens_move_zoom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pfn_lens_move_zoom)(uint32_t, uint16_t)
     * }
     */
    public static void pfn_lens_move_zoom(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_move_zoom$LAYOUT, pfn_lens_move_zoom$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_zooming)(uint32_t)
     * }
     */
    public static class pfn_lens_is_zooming {

        pfn_lens_is_zooming() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            byte apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mediaAPI.C_CHAR,
            mediaAPI.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mediaAPI.upcallHandle(pfn_lens_is_zooming.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pfn_lens_is_zooming.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static byte invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (byte) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pfn_lens_is_zooming$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfn_lens_is_zooming"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_zooming)(uint32_t)
     * }
     */
    public static final AddressLayout pfn_lens_is_zooming$layout() {
        return pfn_lens_is_zooming$LAYOUT;
    }

    private static final long pfn_lens_is_zooming$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_zooming)(uint32_t)
     * }
     */
    public static final long pfn_lens_is_zooming$offset() {
        return pfn_lens_is_zooming$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_zooming)(uint32_t)
     * }
     */
    public static MemorySegment pfn_lens_is_zooming(MemorySegment struct) {
        return struct.get(pfn_lens_is_zooming$LAYOUT, pfn_lens_is_zooming$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t (*pfn_lens_is_zooming)(uint32_t)
     * }
     */
    public static void pfn_lens_is_zooming(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfn_lens_is_zooming$LAYOUT, pfn_lens_is_zooming$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

