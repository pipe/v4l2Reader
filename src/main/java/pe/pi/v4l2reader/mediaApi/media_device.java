// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct media_device {
 *     int fd;
 *     int refcount;
 *     char *devnode;
 *     struct media_device_info info;
 *     struct media_entity *entities;
 *     unsigned int entities_count;
 *     void (*debug_handler)(const char *, ...);
 *     void *debug_priv;
 *     struct {
 *         struct media_entity *v4l;
 *         struct media_entity *fb;
 *         struct media_entity *alsa;
 *         struct media_entity *dvb;
 *     } def;
 * }
 * }
 */
public class media_device {

    media_device() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("fd"),
        mediaAPI.C_INT.withName("refcount"),
        mediaAPI.C_POINTER.withName("devnode"),
        media_device_info.layout().withName("info"),
        mediaAPI.C_POINTER.withName("entities"),
        mediaAPI.C_INT.withName("entities_count"),
        MemoryLayout.paddingLayout(12),
        mediaAPI.C_POINTER.withName("debug_priv"),
        media_device.def.layout().withName("def")
    ).withName("media_device");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final OfInt refcount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("refcount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int refcount
     * }
     */
    public static final OfInt refcount$layout() {
        return refcount$LAYOUT;
    }

    private static final long refcount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int refcount
     * }
     */
    public static final long refcount$offset() {
        return refcount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int refcount
     * }
     */
    public static int refcount(MemorySegment struct) {
        return struct.get(refcount$LAYOUT, refcount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int refcount
     * }
     */
    public static void refcount(MemorySegment struct, int fieldValue) {
        struct.set(refcount$LAYOUT, refcount$OFFSET, fieldValue);
    }

    private static final AddressLayout devnode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("devnode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *devnode
     * }
     */
    public static final AddressLayout devnode$layout() {
        return devnode$LAYOUT;
    }

    private static final long devnode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *devnode
     * }
     */
    public static final long devnode$offset() {
        return devnode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *devnode
     * }
     */
    public static MemorySegment devnode(MemorySegment struct) {
        return struct.get(devnode$LAYOUT, devnode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *devnode
     * }
     */
    public static void devnode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(devnode$LAYOUT, devnode$OFFSET, fieldValue);
    }

    private static final GroupLayout info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_device_info info
     * }
     */
    public static final GroupLayout info$layout() {
        return info$LAYOUT;
    }

    private static final long info$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_device_info info
     * }
     */
    public static final long info$offset() {
        return info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_device_info info
     * }
     */
    public static MemorySegment info(MemorySegment struct) {
        return struct.asSlice(info$OFFSET, info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_device_info info
     * }
     */
    public static void info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, info$OFFSET, info$LAYOUT.byteSize());
    }

    private static final AddressLayout entities$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct media_entity *entities
     * }
     */
    public static final AddressLayout entities$layout() {
        return entities$LAYOUT;
    }

    private static final long entities$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct media_entity *entities
     * }
     */
    public static final long entities$offset() {
        return entities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct media_entity *entities
     * }
     */
    public static MemorySegment entities(MemorySegment struct) {
        return struct.get(entities$LAYOUT, entities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct media_entity *entities
     * }
     */
    public static void entities(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entities$LAYOUT, entities$OFFSET, fieldValue);
    }

    private static final OfInt entities_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("entities_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int entities_count
     * }
     */
    public static final OfInt entities_count$layout() {
        return entities_count$LAYOUT;
    }

    private static final long entities_count$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int entities_count
     * }
     */
    public static final long entities_count$offset() {
        return entities_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int entities_count
     * }
     */
    public static int entities_count(MemorySegment struct) {
        return struct.get(entities_count$LAYOUT, entities_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int entities_count
     * }
     */
    public static void entities_count(MemorySegment struct, int fieldValue) {
        struct.set(entities_count$LAYOUT, entities_count$OFFSET, fieldValue);
    }

    private static final AddressLayout debug_priv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("debug_priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *debug_priv
     * }
     */
    public static final AddressLayout debug_priv$layout() {
        return debug_priv$LAYOUT;
    }

    private static final long debug_priv$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *debug_priv
     * }
     */
    public static final long debug_priv$offset() {
        return debug_priv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *debug_priv
     * }
     */
    public static MemorySegment debug_priv(MemorySegment struct) {
        return struct.get(debug_priv$LAYOUT, debug_priv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *debug_priv
     * }
     */
    public static void debug_priv(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(debug_priv$LAYOUT, debug_priv$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct media_entity *v4l;
     *     struct media_entity *fb;
     *     struct media_entity *alsa;
     *     struct media_entity *dvb;
     * }
     * }
     */
    public static class def {

        def() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            mediaAPI.C_POINTER.withName("v4l"),
            mediaAPI.C_POINTER.withName("fb"),
            mediaAPI.C_POINTER.withName("alsa"),
            mediaAPI.C_POINTER.withName("dvb")
        ).withName("$anon$34:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout v4l$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("v4l"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct media_entity *v4l
         * }
         */
        public static final AddressLayout v4l$layout() {
            return v4l$LAYOUT;
        }

        private static final long v4l$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct media_entity *v4l
         * }
         */
        public static final long v4l$offset() {
            return v4l$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct media_entity *v4l
         * }
         */
        public static MemorySegment v4l(MemorySegment struct) {
            return struct.get(v4l$LAYOUT, v4l$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct media_entity *v4l
         * }
         */
        public static void v4l(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(v4l$LAYOUT, v4l$OFFSET, fieldValue);
        }

        private static final AddressLayout fb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fb"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct media_entity *fb
         * }
         */
        public static final AddressLayout fb$layout() {
            return fb$LAYOUT;
        }

        private static final long fb$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct media_entity *fb
         * }
         */
        public static final long fb$offset() {
            return fb$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct media_entity *fb
         * }
         */
        public static MemorySegment fb(MemorySegment struct) {
            return struct.get(fb$LAYOUT, fb$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct media_entity *fb
         * }
         */
        public static void fb(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(fb$LAYOUT, fb$OFFSET, fieldValue);
        }

        private static final AddressLayout alsa$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alsa"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct media_entity *alsa
         * }
         */
        public static final AddressLayout alsa$layout() {
            return alsa$LAYOUT;
        }

        private static final long alsa$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct media_entity *alsa
         * }
         */
        public static final long alsa$offset() {
            return alsa$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct media_entity *alsa
         * }
         */
        public static MemorySegment alsa(MemorySegment struct) {
            return struct.get(alsa$LAYOUT, alsa$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct media_entity *alsa
         * }
         */
        public static void alsa(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(alsa$LAYOUT, alsa$OFFSET, fieldValue);
        }

        private static final AddressLayout dvb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dvb"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct media_entity *dvb
         * }
         */
        public static final AddressLayout dvb$layout() {
            return dvb$LAYOUT;
        }

        private static final long dvb$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct media_entity *dvb
         * }
         */
        public static final long dvb$offset() {
            return dvb$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct media_entity *dvb
         * }
         */
        public static MemorySegment dvb(MemorySegment struct) {
            return struct.get(dvb$LAYOUT, dvb$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct media_entity *dvb
         * }
         */
        public static void dvb(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(dvb$LAYOUT, dvb$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout def$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("def"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct media_entity *v4l;
     *     struct media_entity *fb;
     *     struct media_entity *alsa;
     *     struct media_entity *dvb;
     * } def
     * }
     */
    public static final GroupLayout def$layout() {
        return def$LAYOUT;
    }

    private static final long def$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct media_entity *v4l;
     *     struct media_entity *fb;
     *     struct media_entity *alsa;
     *     struct media_entity *dvb;
     * } def
     * }
     */
    public static final long def$offset() {
        return def$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct media_entity *v4l;
     *     struct media_entity *fb;
     *     struct media_entity *alsa;
     *     struct media_entity *dvb;
     * } def
     * }
     */
    public static MemorySegment def(MemorySegment struct) {
        return struct.asSlice(def$OFFSET, def$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct media_entity *v4l;
     *     struct media_entity *fb;
     *     struct media_entity *alsa;
     *     struct media_entity *dvb;
     * } def
     * }
     */
    public static void def(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, def$OFFSET, def$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

