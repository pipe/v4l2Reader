// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint32_t fps;
 *     uint32_t pixels_per_line;
 *     int hcg_fixed_ratio;
 *     int again_log2;
 *     int again_log2_max;
 *     int again_high_log2;
 *     int again_high_log2_max;
 *     int dgain_log2;
 *     int dgain_log2_max;
 *     int dgain_high_log2;
 *     int dgain_high_log2_max;
 *     int again_accuracy_fmt;
 *     int again_accuracy;
 *     int again_high_accuracy_fmt;
 *     int again_high_accuracy;
 *     int dgain_accuracy_fmt;
 *     int dgain_accuracy;
 *     int dgain_high_accuracy_fmt;
 *     int dgain_high_accuracy;
 *     int expos_lines;
 *     int expos_accuracy;
 *     int sexpos_lines;
 *     int sexpos_accuracy;
 *     int vsexpos_lines;
 *     int vsexpos_accuracy;
 *     int vvsexpos_lines;
 *     int vvsexpos_accuracy;
 *     uint32_t integration_time_min;
 *     uint32_t integration_time_max;
 *     uint32_t integration_time_long_max;
 *     uint32_t integration_time_limit;
 *     uint16_t day_light_integration_time_max;
 *     uint8_t integration_time_apply_delay;
 *     uint8_t isp_exposure_channel_delay;
 *     uint8_t gain_apply_delay;
 *     int xoffset;
 *     int yoffset;
 *     uint32_t lines_per_second;
 *     int sensor_exp_number;
 *     int sensor_gain_number;
 *     uint8_t bits;
 *     uint8_t raw_mode;
 *     uint8_t pattern;
 *     image_resolution_t total;
 *     image_resolution_t active;
 *     uint32_t u32AGain[4];
 *     uint32_t u32DGain[4];
 *     uint32_t u32Inttime[2][4];
 *     uint16_t u16GainCnt;
 *     uint16_t u16IntTimeCnt;
 * }
 * }
 */
public class ALG_SENSOR_DEFAULT_S {

    ALG_SENSOR_DEFAULT_S() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mediaAPI.C_INT.withName("fps"),
        mediaAPI.C_INT.withName("pixels_per_line"),
        mediaAPI.C_INT.withName("hcg_fixed_ratio"),
        mediaAPI.C_INT.withName("again_log2"),
        mediaAPI.C_INT.withName("again_log2_max"),
        mediaAPI.C_INT.withName("again_high_log2"),
        mediaAPI.C_INT.withName("again_high_log2_max"),
        mediaAPI.C_INT.withName("dgain_log2"),
        mediaAPI.C_INT.withName("dgain_log2_max"),
        mediaAPI.C_INT.withName("dgain_high_log2"),
        mediaAPI.C_INT.withName("dgain_high_log2_max"),
        mediaAPI.C_INT.withName("again_accuracy_fmt"),
        mediaAPI.C_INT.withName("again_accuracy"),
        mediaAPI.C_INT.withName("again_high_accuracy_fmt"),
        mediaAPI.C_INT.withName("again_high_accuracy"),
        mediaAPI.C_INT.withName("dgain_accuracy_fmt"),
        mediaAPI.C_INT.withName("dgain_accuracy"),
        mediaAPI.C_INT.withName("dgain_high_accuracy_fmt"),
        mediaAPI.C_INT.withName("dgain_high_accuracy"),
        mediaAPI.C_INT.withName("expos_lines"),
        mediaAPI.C_INT.withName("expos_accuracy"),
        mediaAPI.C_INT.withName("sexpos_lines"),
        mediaAPI.C_INT.withName("sexpos_accuracy"),
        mediaAPI.C_INT.withName("vsexpos_lines"),
        mediaAPI.C_INT.withName("vsexpos_accuracy"),
        mediaAPI.C_INT.withName("vvsexpos_lines"),
        mediaAPI.C_INT.withName("vvsexpos_accuracy"),
        mediaAPI.C_INT.withName("integration_time_min"),
        mediaAPI.C_INT.withName("integration_time_max"),
        mediaAPI.C_INT.withName("integration_time_long_max"),
        mediaAPI.C_INT.withName("integration_time_limit"),
        mediaAPI.C_SHORT.withName("day_light_integration_time_max"),
        mediaAPI.C_CHAR.withName("integration_time_apply_delay"),
        mediaAPI.C_CHAR.withName("isp_exposure_channel_delay"),
        mediaAPI.C_CHAR.withName("gain_apply_delay"),
        MemoryLayout.paddingLayout(3),
        mediaAPI.C_INT.withName("xoffset"),
        mediaAPI.C_INT.withName("yoffset"),
        mediaAPI.C_INT.withName("lines_per_second"),
        mediaAPI.C_INT.withName("sensor_exp_number"),
        mediaAPI.C_INT.withName("sensor_gain_number"),
        mediaAPI.C_CHAR.withName("bits"),
        mediaAPI.C_CHAR.withName("raw_mode"),
        mediaAPI.C_CHAR.withName("pattern"),
        MemoryLayout.paddingLayout(1),
        _image_resolution_t.layout().withName("total"),
        _image_resolution_t.layout().withName("active"),
        MemoryLayout.sequenceLayout(4, mediaAPI.C_INT).withName("u32AGain"),
        MemoryLayout.sequenceLayout(4, mediaAPI.C_INT).withName("u32DGain"),
        MemoryLayout.sequenceLayout(2, MemoryLayout.sequenceLayout(4, mediaAPI.C_INT)).withName("u32Inttime"),
        mediaAPI.C_SHORT.withName("u16GainCnt"),
        mediaAPI.C_SHORT.withName("u16IntTimeCnt")
    ).withName("$anon$35:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt fps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t fps
     * }
     */
    public static final OfInt fps$layout() {
        return fps$LAYOUT;
    }

    private static final long fps$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t fps
     * }
     */
    public static final long fps$offset() {
        return fps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t fps
     * }
     */
    public static int fps(MemorySegment struct) {
        return struct.get(fps$LAYOUT, fps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t fps
     * }
     */
    public static void fps(MemorySegment struct, int fieldValue) {
        struct.set(fps$LAYOUT, fps$OFFSET, fieldValue);
    }

    private static final OfInt pixels_per_line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pixels_per_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pixels_per_line
     * }
     */
    public static final OfInt pixels_per_line$layout() {
        return pixels_per_line$LAYOUT;
    }

    private static final long pixels_per_line$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pixels_per_line
     * }
     */
    public static final long pixels_per_line$offset() {
        return pixels_per_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pixels_per_line
     * }
     */
    public static int pixels_per_line(MemorySegment struct) {
        return struct.get(pixels_per_line$LAYOUT, pixels_per_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pixels_per_line
     * }
     */
    public static void pixels_per_line(MemorySegment struct, int fieldValue) {
        struct.set(pixels_per_line$LAYOUT, pixels_per_line$OFFSET, fieldValue);
    }

    private static final OfInt hcg_fixed_ratio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hcg_fixed_ratio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int hcg_fixed_ratio
     * }
     */
    public static final OfInt hcg_fixed_ratio$layout() {
        return hcg_fixed_ratio$LAYOUT;
    }

    private static final long hcg_fixed_ratio$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int hcg_fixed_ratio
     * }
     */
    public static final long hcg_fixed_ratio$offset() {
        return hcg_fixed_ratio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int hcg_fixed_ratio
     * }
     */
    public static int hcg_fixed_ratio(MemorySegment struct) {
        return struct.get(hcg_fixed_ratio$LAYOUT, hcg_fixed_ratio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int hcg_fixed_ratio
     * }
     */
    public static void hcg_fixed_ratio(MemorySegment struct, int fieldValue) {
        struct.set(hcg_fixed_ratio$LAYOUT, hcg_fixed_ratio$OFFSET, fieldValue);
    }

    private static final OfInt again_log2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_log2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_log2
     * }
     */
    public static final OfInt again_log2$layout() {
        return again_log2$LAYOUT;
    }

    private static final long again_log2$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_log2
     * }
     */
    public static final long again_log2$offset() {
        return again_log2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_log2
     * }
     */
    public static int again_log2(MemorySegment struct) {
        return struct.get(again_log2$LAYOUT, again_log2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_log2
     * }
     */
    public static void again_log2(MemorySegment struct, int fieldValue) {
        struct.set(again_log2$LAYOUT, again_log2$OFFSET, fieldValue);
    }

    private static final OfInt again_log2_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_log2_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_log2_max
     * }
     */
    public static final OfInt again_log2_max$layout() {
        return again_log2_max$LAYOUT;
    }

    private static final long again_log2_max$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_log2_max
     * }
     */
    public static final long again_log2_max$offset() {
        return again_log2_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_log2_max
     * }
     */
    public static int again_log2_max(MemorySegment struct) {
        return struct.get(again_log2_max$LAYOUT, again_log2_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_log2_max
     * }
     */
    public static void again_log2_max(MemorySegment struct, int fieldValue) {
        struct.set(again_log2_max$LAYOUT, again_log2_max$OFFSET, fieldValue);
    }

    private static final OfInt again_high_log2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_high_log2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_high_log2
     * }
     */
    public static final OfInt again_high_log2$layout() {
        return again_high_log2$LAYOUT;
    }

    private static final long again_high_log2$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_high_log2
     * }
     */
    public static final long again_high_log2$offset() {
        return again_high_log2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_high_log2
     * }
     */
    public static int again_high_log2(MemorySegment struct) {
        return struct.get(again_high_log2$LAYOUT, again_high_log2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_high_log2
     * }
     */
    public static void again_high_log2(MemorySegment struct, int fieldValue) {
        struct.set(again_high_log2$LAYOUT, again_high_log2$OFFSET, fieldValue);
    }

    private static final OfInt again_high_log2_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_high_log2_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_high_log2_max
     * }
     */
    public static final OfInt again_high_log2_max$layout() {
        return again_high_log2_max$LAYOUT;
    }

    private static final long again_high_log2_max$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_high_log2_max
     * }
     */
    public static final long again_high_log2_max$offset() {
        return again_high_log2_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_high_log2_max
     * }
     */
    public static int again_high_log2_max(MemorySegment struct) {
        return struct.get(again_high_log2_max$LAYOUT, again_high_log2_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_high_log2_max
     * }
     */
    public static void again_high_log2_max(MemorySegment struct, int fieldValue) {
        struct.set(again_high_log2_max$LAYOUT, again_high_log2_max$OFFSET, fieldValue);
    }

    private static final OfInt dgain_log2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_log2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_log2
     * }
     */
    public static final OfInt dgain_log2$layout() {
        return dgain_log2$LAYOUT;
    }

    private static final long dgain_log2$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_log2
     * }
     */
    public static final long dgain_log2$offset() {
        return dgain_log2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_log2
     * }
     */
    public static int dgain_log2(MemorySegment struct) {
        return struct.get(dgain_log2$LAYOUT, dgain_log2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_log2
     * }
     */
    public static void dgain_log2(MemorySegment struct, int fieldValue) {
        struct.set(dgain_log2$LAYOUT, dgain_log2$OFFSET, fieldValue);
    }

    private static final OfInt dgain_log2_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_log2_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_log2_max
     * }
     */
    public static final OfInt dgain_log2_max$layout() {
        return dgain_log2_max$LAYOUT;
    }

    private static final long dgain_log2_max$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_log2_max
     * }
     */
    public static final long dgain_log2_max$offset() {
        return dgain_log2_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_log2_max
     * }
     */
    public static int dgain_log2_max(MemorySegment struct) {
        return struct.get(dgain_log2_max$LAYOUT, dgain_log2_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_log2_max
     * }
     */
    public static void dgain_log2_max(MemorySegment struct, int fieldValue) {
        struct.set(dgain_log2_max$LAYOUT, dgain_log2_max$OFFSET, fieldValue);
    }

    private static final OfInt dgain_high_log2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_high_log2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_high_log2
     * }
     */
    public static final OfInt dgain_high_log2$layout() {
        return dgain_high_log2$LAYOUT;
    }

    private static final long dgain_high_log2$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_high_log2
     * }
     */
    public static final long dgain_high_log2$offset() {
        return dgain_high_log2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_high_log2
     * }
     */
    public static int dgain_high_log2(MemorySegment struct) {
        return struct.get(dgain_high_log2$LAYOUT, dgain_high_log2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_high_log2
     * }
     */
    public static void dgain_high_log2(MemorySegment struct, int fieldValue) {
        struct.set(dgain_high_log2$LAYOUT, dgain_high_log2$OFFSET, fieldValue);
    }

    private static final OfInt dgain_high_log2_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_high_log2_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_high_log2_max
     * }
     */
    public static final OfInt dgain_high_log2_max$layout() {
        return dgain_high_log2_max$LAYOUT;
    }

    private static final long dgain_high_log2_max$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_high_log2_max
     * }
     */
    public static final long dgain_high_log2_max$offset() {
        return dgain_high_log2_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_high_log2_max
     * }
     */
    public static int dgain_high_log2_max(MemorySegment struct) {
        return struct.get(dgain_high_log2_max$LAYOUT, dgain_high_log2_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_high_log2_max
     * }
     */
    public static void dgain_high_log2_max(MemorySegment struct, int fieldValue) {
        struct.set(dgain_high_log2_max$LAYOUT, dgain_high_log2_max$OFFSET, fieldValue);
    }

    private static final OfInt again_accuracy_fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_accuracy_fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_accuracy_fmt
     * }
     */
    public static final OfInt again_accuracy_fmt$layout() {
        return again_accuracy_fmt$LAYOUT;
    }

    private static final long again_accuracy_fmt$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_accuracy_fmt
     * }
     */
    public static final long again_accuracy_fmt$offset() {
        return again_accuracy_fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_accuracy_fmt
     * }
     */
    public static int again_accuracy_fmt(MemorySegment struct) {
        return struct.get(again_accuracy_fmt$LAYOUT, again_accuracy_fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_accuracy_fmt
     * }
     */
    public static void again_accuracy_fmt(MemorySegment struct, int fieldValue) {
        struct.set(again_accuracy_fmt$LAYOUT, again_accuracy_fmt$OFFSET, fieldValue);
    }

    private static final OfInt again_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_accuracy
     * }
     */
    public static final OfInt again_accuracy$layout() {
        return again_accuracy$LAYOUT;
    }

    private static final long again_accuracy$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_accuracy
     * }
     */
    public static final long again_accuracy$offset() {
        return again_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_accuracy
     * }
     */
    public static int again_accuracy(MemorySegment struct) {
        return struct.get(again_accuracy$LAYOUT, again_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_accuracy
     * }
     */
    public static void again_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(again_accuracy$LAYOUT, again_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt again_high_accuracy_fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_high_accuracy_fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_high_accuracy_fmt
     * }
     */
    public static final OfInt again_high_accuracy_fmt$layout() {
        return again_high_accuracy_fmt$LAYOUT;
    }

    private static final long again_high_accuracy_fmt$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_high_accuracy_fmt
     * }
     */
    public static final long again_high_accuracy_fmt$offset() {
        return again_high_accuracy_fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_high_accuracy_fmt
     * }
     */
    public static int again_high_accuracy_fmt(MemorySegment struct) {
        return struct.get(again_high_accuracy_fmt$LAYOUT, again_high_accuracy_fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_high_accuracy_fmt
     * }
     */
    public static void again_high_accuracy_fmt(MemorySegment struct, int fieldValue) {
        struct.set(again_high_accuracy_fmt$LAYOUT, again_high_accuracy_fmt$OFFSET, fieldValue);
    }

    private static final OfInt again_high_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("again_high_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int again_high_accuracy
     * }
     */
    public static final OfInt again_high_accuracy$layout() {
        return again_high_accuracy$LAYOUT;
    }

    private static final long again_high_accuracy$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int again_high_accuracy
     * }
     */
    public static final long again_high_accuracy$offset() {
        return again_high_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int again_high_accuracy
     * }
     */
    public static int again_high_accuracy(MemorySegment struct) {
        return struct.get(again_high_accuracy$LAYOUT, again_high_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int again_high_accuracy
     * }
     */
    public static void again_high_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(again_high_accuracy$LAYOUT, again_high_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt dgain_accuracy_fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_accuracy_fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_accuracy_fmt
     * }
     */
    public static final OfInt dgain_accuracy_fmt$layout() {
        return dgain_accuracy_fmt$LAYOUT;
    }

    private static final long dgain_accuracy_fmt$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_accuracy_fmt
     * }
     */
    public static final long dgain_accuracy_fmt$offset() {
        return dgain_accuracy_fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_accuracy_fmt
     * }
     */
    public static int dgain_accuracy_fmt(MemorySegment struct) {
        return struct.get(dgain_accuracy_fmt$LAYOUT, dgain_accuracy_fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_accuracy_fmt
     * }
     */
    public static void dgain_accuracy_fmt(MemorySegment struct, int fieldValue) {
        struct.set(dgain_accuracy_fmt$LAYOUT, dgain_accuracy_fmt$OFFSET, fieldValue);
    }

    private static final OfInt dgain_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_accuracy
     * }
     */
    public static final OfInt dgain_accuracy$layout() {
        return dgain_accuracy$LAYOUT;
    }

    private static final long dgain_accuracy$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_accuracy
     * }
     */
    public static final long dgain_accuracy$offset() {
        return dgain_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_accuracy
     * }
     */
    public static int dgain_accuracy(MemorySegment struct) {
        return struct.get(dgain_accuracy$LAYOUT, dgain_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_accuracy
     * }
     */
    public static void dgain_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(dgain_accuracy$LAYOUT, dgain_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt dgain_high_accuracy_fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_high_accuracy_fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy_fmt
     * }
     */
    public static final OfInt dgain_high_accuracy_fmt$layout() {
        return dgain_high_accuracy_fmt$LAYOUT;
    }

    private static final long dgain_high_accuracy_fmt$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy_fmt
     * }
     */
    public static final long dgain_high_accuracy_fmt$offset() {
        return dgain_high_accuracy_fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy_fmt
     * }
     */
    public static int dgain_high_accuracy_fmt(MemorySegment struct) {
        return struct.get(dgain_high_accuracy_fmt$LAYOUT, dgain_high_accuracy_fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy_fmt
     * }
     */
    public static void dgain_high_accuracy_fmt(MemorySegment struct, int fieldValue) {
        struct.set(dgain_high_accuracy_fmt$LAYOUT, dgain_high_accuracy_fmt$OFFSET, fieldValue);
    }

    private static final OfInt dgain_high_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dgain_high_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy
     * }
     */
    public static final OfInt dgain_high_accuracy$layout() {
        return dgain_high_accuracy$LAYOUT;
    }

    private static final long dgain_high_accuracy$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy
     * }
     */
    public static final long dgain_high_accuracy$offset() {
        return dgain_high_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy
     * }
     */
    public static int dgain_high_accuracy(MemorySegment struct) {
        return struct.get(dgain_high_accuracy$LAYOUT, dgain_high_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dgain_high_accuracy
     * }
     */
    public static void dgain_high_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(dgain_high_accuracy$LAYOUT, dgain_high_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt expos_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("expos_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int expos_lines
     * }
     */
    public static final OfInt expos_lines$layout() {
        return expos_lines$LAYOUT;
    }

    private static final long expos_lines$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int expos_lines
     * }
     */
    public static final long expos_lines$offset() {
        return expos_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int expos_lines
     * }
     */
    public static int expos_lines(MemorySegment struct) {
        return struct.get(expos_lines$LAYOUT, expos_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int expos_lines
     * }
     */
    public static void expos_lines(MemorySegment struct, int fieldValue) {
        struct.set(expos_lines$LAYOUT, expos_lines$OFFSET, fieldValue);
    }

    private static final OfInt expos_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("expos_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int expos_accuracy
     * }
     */
    public static final OfInt expos_accuracy$layout() {
        return expos_accuracy$LAYOUT;
    }

    private static final long expos_accuracy$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int expos_accuracy
     * }
     */
    public static final long expos_accuracy$offset() {
        return expos_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int expos_accuracy
     * }
     */
    public static int expos_accuracy(MemorySegment struct) {
        return struct.get(expos_accuracy$LAYOUT, expos_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int expos_accuracy
     * }
     */
    public static void expos_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(expos_accuracy$LAYOUT, expos_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt sexpos_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sexpos_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sexpos_lines
     * }
     */
    public static final OfInt sexpos_lines$layout() {
        return sexpos_lines$LAYOUT;
    }

    private static final long sexpos_lines$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sexpos_lines
     * }
     */
    public static final long sexpos_lines$offset() {
        return sexpos_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sexpos_lines
     * }
     */
    public static int sexpos_lines(MemorySegment struct) {
        return struct.get(sexpos_lines$LAYOUT, sexpos_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sexpos_lines
     * }
     */
    public static void sexpos_lines(MemorySegment struct, int fieldValue) {
        struct.set(sexpos_lines$LAYOUT, sexpos_lines$OFFSET, fieldValue);
    }

    private static final OfInt sexpos_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sexpos_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sexpos_accuracy
     * }
     */
    public static final OfInt sexpos_accuracy$layout() {
        return sexpos_accuracy$LAYOUT;
    }

    private static final long sexpos_accuracy$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sexpos_accuracy
     * }
     */
    public static final long sexpos_accuracy$offset() {
        return sexpos_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sexpos_accuracy
     * }
     */
    public static int sexpos_accuracy(MemorySegment struct) {
        return struct.get(sexpos_accuracy$LAYOUT, sexpos_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sexpos_accuracy
     * }
     */
    public static void sexpos_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(sexpos_accuracy$LAYOUT, sexpos_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt vsexpos_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vsexpos_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vsexpos_lines
     * }
     */
    public static final OfInt vsexpos_lines$layout() {
        return vsexpos_lines$LAYOUT;
    }

    private static final long vsexpos_lines$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vsexpos_lines
     * }
     */
    public static final long vsexpos_lines$offset() {
        return vsexpos_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vsexpos_lines
     * }
     */
    public static int vsexpos_lines(MemorySegment struct) {
        return struct.get(vsexpos_lines$LAYOUT, vsexpos_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vsexpos_lines
     * }
     */
    public static void vsexpos_lines(MemorySegment struct, int fieldValue) {
        struct.set(vsexpos_lines$LAYOUT, vsexpos_lines$OFFSET, fieldValue);
    }

    private static final OfInt vsexpos_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vsexpos_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vsexpos_accuracy
     * }
     */
    public static final OfInt vsexpos_accuracy$layout() {
        return vsexpos_accuracy$LAYOUT;
    }

    private static final long vsexpos_accuracy$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vsexpos_accuracy
     * }
     */
    public static final long vsexpos_accuracy$offset() {
        return vsexpos_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vsexpos_accuracy
     * }
     */
    public static int vsexpos_accuracy(MemorySegment struct) {
        return struct.get(vsexpos_accuracy$LAYOUT, vsexpos_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vsexpos_accuracy
     * }
     */
    public static void vsexpos_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(vsexpos_accuracy$LAYOUT, vsexpos_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt vvsexpos_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vvsexpos_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vvsexpos_lines
     * }
     */
    public static final OfInt vvsexpos_lines$layout() {
        return vvsexpos_lines$LAYOUT;
    }

    private static final long vvsexpos_lines$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vvsexpos_lines
     * }
     */
    public static final long vvsexpos_lines$offset() {
        return vvsexpos_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vvsexpos_lines
     * }
     */
    public static int vvsexpos_lines(MemorySegment struct) {
        return struct.get(vvsexpos_lines$LAYOUT, vvsexpos_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vvsexpos_lines
     * }
     */
    public static void vvsexpos_lines(MemorySegment struct, int fieldValue) {
        struct.set(vvsexpos_lines$LAYOUT, vvsexpos_lines$OFFSET, fieldValue);
    }

    private static final OfInt vvsexpos_accuracy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vvsexpos_accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vvsexpos_accuracy
     * }
     */
    public static final OfInt vvsexpos_accuracy$layout() {
        return vvsexpos_accuracy$LAYOUT;
    }

    private static final long vvsexpos_accuracy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vvsexpos_accuracy
     * }
     */
    public static final long vvsexpos_accuracy$offset() {
        return vvsexpos_accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vvsexpos_accuracy
     * }
     */
    public static int vvsexpos_accuracy(MemorySegment struct) {
        return struct.get(vvsexpos_accuracy$LAYOUT, vvsexpos_accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vvsexpos_accuracy
     * }
     */
    public static void vvsexpos_accuracy(MemorySegment struct, int fieldValue) {
        struct.set(vvsexpos_accuracy$LAYOUT, vvsexpos_accuracy$OFFSET, fieldValue);
    }

    private static final OfInt integration_time_min$LAYOUT = (OfInt)$LAYOUT.select(groupElement("integration_time_min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t integration_time_min
     * }
     */
    public static final OfInt integration_time_min$layout() {
        return integration_time_min$LAYOUT;
    }

    private static final long integration_time_min$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t integration_time_min
     * }
     */
    public static final long integration_time_min$offset() {
        return integration_time_min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_min
     * }
     */
    public static int integration_time_min(MemorySegment struct) {
        return struct.get(integration_time_min$LAYOUT, integration_time_min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_min
     * }
     */
    public static void integration_time_min(MemorySegment struct, int fieldValue) {
        struct.set(integration_time_min$LAYOUT, integration_time_min$OFFSET, fieldValue);
    }

    private static final OfInt integration_time_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("integration_time_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t integration_time_max
     * }
     */
    public static final OfInt integration_time_max$layout() {
        return integration_time_max$LAYOUT;
    }

    private static final long integration_time_max$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t integration_time_max
     * }
     */
    public static final long integration_time_max$offset() {
        return integration_time_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_max
     * }
     */
    public static int integration_time_max(MemorySegment struct) {
        return struct.get(integration_time_max$LAYOUT, integration_time_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_max
     * }
     */
    public static void integration_time_max(MemorySegment struct, int fieldValue) {
        struct.set(integration_time_max$LAYOUT, integration_time_max$OFFSET, fieldValue);
    }

    private static final OfInt integration_time_long_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("integration_time_long_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t integration_time_long_max
     * }
     */
    public static final OfInt integration_time_long_max$layout() {
        return integration_time_long_max$LAYOUT;
    }

    private static final long integration_time_long_max$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t integration_time_long_max
     * }
     */
    public static final long integration_time_long_max$offset() {
        return integration_time_long_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_long_max
     * }
     */
    public static int integration_time_long_max(MemorySegment struct) {
        return struct.get(integration_time_long_max$LAYOUT, integration_time_long_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_long_max
     * }
     */
    public static void integration_time_long_max(MemorySegment struct, int fieldValue) {
        struct.set(integration_time_long_max$LAYOUT, integration_time_long_max$OFFSET, fieldValue);
    }

    private static final OfInt integration_time_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("integration_time_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t integration_time_limit
     * }
     */
    public static final OfInt integration_time_limit$layout() {
        return integration_time_limit$LAYOUT;
    }

    private static final long integration_time_limit$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t integration_time_limit
     * }
     */
    public static final long integration_time_limit$offset() {
        return integration_time_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_limit
     * }
     */
    public static int integration_time_limit(MemorySegment struct) {
        return struct.get(integration_time_limit$LAYOUT, integration_time_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t integration_time_limit
     * }
     */
    public static void integration_time_limit(MemorySegment struct, int fieldValue) {
        struct.set(integration_time_limit$LAYOUT, integration_time_limit$OFFSET, fieldValue);
    }

    private static final OfShort day_light_integration_time_max$LAYOUT = (OfShort)$LAYOUT.select(groupElement("day_light_integration_time_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t day_light_integration_time_max
     * }
     */
    public static final OfShort day_light_integration_time_max$layout() {
        return day_light_integration_time_max$LAYOUT;
    }

    private static final long day_light_integration_time_max$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t day_light_integration_time_max
     * }
     */
    public static final long day_light_integration_time_max$offset() {
        return day_light_integration_time_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t day_light_integration_time_max
     * }
     */
    public static short day_light_integration_time_max(MemorySegment struct) {
        return struct.get(day_light_integration_time_max$LAYOUT, day_light_integration_time_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t day_light_integration_time_max
     * }
     */
    public static void day_light_integration_time_max(MemorySegment struct, short fieldValue) {
        struct.set(day_light_integration_time_max$LAYOUT, day_light_integration_time_max$OFFSET, fieldValue);
    }

    private static final OfByte integration_time_apply_delay$LAYOUT = (OfByte)$LAYOUT.select(groupElement("integration_time_apply_delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t integration_time_apply_delay
     * }
     */
    public static final OfByte integration_time_apply_delay$layout() {
        return integration_time_apply_delay$LAYOUT;
    }

    private static final long integration_time_apply_delay$OFFSET = 126;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t integration_time_apply_delay
     * }
     */
    public static final long integration_time_apply_delay$offset() {
        return integration_time_apply_delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t integration_time_apply_delay
     * }
     */
    public static byte integration_time_apply_delay(MemorySegment struct) {
        return struct.get(integration_time_apply_delay$LAYOUT, integration_time_apply_delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t integration_time_apply_delay
     * }
     */
    public static void integration_time_apply_delay(MemorySegment struct, byte fieldValue) {
        struct.set(integration_time_apply_delay$LAYOUT, integration_time_apply_delay$OFFSET, fieldValue);
    }

    private static final OfByte isp_exposure_channel_delay$LAYOUT = (OfByte)$LAYOUT.select(groupElement("isp_exposure_channel_delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t isp_exposure_channel_delay
     * }
     */
    public static final OfByte isp_exposure_channel_delay$layout() {
        return isp_exposure_channel_delay$LAYOUT;
    }

    private static final long isp_exposure_channel_delay$OFFSET = 127;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t isp_exposure_channel_delay
     * }
     */
    public static final long isp_exposure_channel_delay$offset() {
        return isp_exposure_channel_delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t isp_exposure_channel_delay
     * }
     */
    public static byte isp_exposure_channel_delay(MemorySegment struct) {
        return struct.get(isp_exposure_channel_delay$LAYOUT, isp_exposure_channel_delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t isp_exposure_channel_delay
     * }
     */
    public static void isp_exposure_channel_delay(MemorySegment struct, byte fieldValue) {
        struct.set(isp_exposure_channel_delay$LAYOUT, isp_exposure_channel_delay$OFFSET, fieldValue);
    }

    private static final OfByte gain_apply_delay$LAYOUT = (OfByte)$LAYOUT.select(groupElement("gain_apply_delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t gain_apply_delay
     * }
     */
    public static final OfByte gain_apply_delay$layout() {
        return gain_apply_delay$LAYOUT;
    }

    private static final long gain_apply_delay$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t gain_apply_delay
     * }
     */
    public static final long gain_apply_delay$offset() {
        return gain_apply_delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t gain_apply_delay
     * }
     */
    public static byte gain_apply_delay(MemorySegment struct) {
        return struct.get(gain_apply_delay$LAYOUT, gain_apply_delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t gain_apply_delay
     * }
     */
    public static void gain_apply_delay(MemorySegment struct, byte fieldValue) {
        struct.set(gain_apply_delay$LAYOUT, gain_apply_delay$OFFSET, fieldValue);
    }

    private static final OfInt xoffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int xoffset
     * }
     */
    public static final OfInt xoffset$layout() {
        return xoffset$LAYOUT;
    }

    private static final long xoffset$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int xoffset
     * }
     */
    public static final long xoffset$offset() {
        return xoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int xoffset
     * }
     */
    public static int xoffset(MemorySegment struct) {
        return struct.get(xoffset$LAYOUT, xoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int xoffset
     * }
     */
    public static void xoffset(MemorySegment struct, int fieldValue) {
        struct.set(xoffset$LAYOUT, xoffset$OFFSET, fieldValue);
    }

    private static final OfInt yoffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("yoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int yoffset
     * }
     */
    public static final OfInt yoffset$layout() {
        return yoffset$LAYOUT;
    }

    private static final long yoffset$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int yoffset
     * }
     */
    public static final long yoffset$offset() {
        return yoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int yoffset
     * }
     */
    public static int yoffset(MemorySegment struct) {
        return struct.get(yoffset$LAYOUT, yoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int yoffset
     * }
     */
    public static void yoffset(MemorySegment struct, int fieldValue) {
        struct.set(yoffset$LAYOUT, yoffset$OFFSET, fieldValue);
    }

    private static final OfInt lines_per_second$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lines_per_second"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t lines_per_second
     * }
     */
    public static final OfInt lines_per_second$layout() {
        return lines_per_second$LAYOUT;
    }

    private static final long lines_per_second$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t lines_per_second
     * }
     */
    public static final long lines_per_second$offset() {
        return lines_per_second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t lines_per_second
     * }
     */
    public static int lines_per_second(MemorySegment struct) {
        return struct.get(lines_per_second$LAYOUT, lines_per_second$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t lines_per_second
     * }
     */
    public static void lines_per_second(MemorySegment struct, int fieldValue) {
        struct.set(lines_per_second$LAYOUT, lines_per_second$OFFSET, fieldValue);
    }

    private static final OfInt sensor_exp_number$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sensor_exp_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sensor_exp_number
     * }
     */
    public static final OfInt sensor_exp_number$layout() {
        return sensor_exp_number$LAYOUT;
    }

    private static final long sensor_exp_number$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sensor_exp_number
     * }
     */
    public static final long sensor_exp_number$offset() {
        return sensor_exp_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sensor_exp_number
     * }
     */
    public static int sensor_exp_number(MemorySegment struct) {
        return struct.get(sensor_exp_number$LAYOUT, sensor_exp_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sensor_exp_number
     * }
     */
    public static void sensor_exp_number(MemorySegment struct, int fieldValue) {
        struct.set(sensor_exp_number$LAYOUT, sensor_exp_number$OFFSET, fieldValue);
    }

    private static final OfInt sensor_gain_number$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sensor_gain_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sensor_gain_number
     * }
     */
    public static final OfInt sensor_gain_number$layout() {
        return sensor_gain_number$LAYOUT;
    }

    private static final long sensor_gain_number$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sensor_gain_number
     * }
     */
    public static final long sensor_gain_number$offset() {
        return sensor_gain_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sensor_gain_number
     * }
     */
    public static int sensor_gain_number(MemorySegment struct) {
        return struct.get(sensor_gain_number$LAYOUT, sensor_gain_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sensor_gain_number
     * }
     */
    public static void sensor_gain_number(MemorySegment struct, int fieldValue) {
        struct.set(sensor_gain_number$LAYOUT, sensor_gain_number$OFFSET, fieldValue);
    }

    private static final OfByte bits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bits
     * }
     */
    public static final OfByte bits$layout() {
        return bits$LAYOUT;
    }

    private static final long bits$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bits
     * }
     */
    public static final long bits$offset() {
        return bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bits
     * }
     */
    public static byte bits(MemorySegment struct) {
        return struct.get(bits$LAYOUT, bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bits
     * }
     */
    public static void bits(MemorySegment struct, byte fieldValue) {
        struct.set(bits$LAYOUT, bits$OFFSET, fieldValue);
    }

    private static final OfByte raw_mode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("raw_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t raw_mode
     * }
     */
    public static final OfByte raw_mode$layout() {
        return raw_mode$LAYOUT;
    }

    private static final long raw_mode$OFFSET = 153;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t raw_mode
     * }
     */
    public static final long raw_mode$offset() {
        return raw_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t raw_mode
     * }
     */
    public static byte raw_mode(MemorySegment struct) {
        return struct.get(raw_mode$LAYOUT, raw_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t raw_mode
     * }
     */
    public static void raw_mode(MemorySegment struct, byte fieldValue) {
        struct.set(raw_mode$LAYOUT, raw_mode$OFFSET, fieldValue);
    }

    private static final OfByte pattern$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pattern"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pattern
     * }
     */
    public static final OfByte pattern$layout() {
        return pattern$LAYOUT;
    }

    private static final long pattern$OFFSET = 154;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pattern
     * }
     */
    public static final long pattern$offset() {
        return pattern$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pattern
     * }
     */
    public static byte pattern(MemorySegment struct) {
        return struct.get(pattern$LAYOUT, pattern$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pattern
     * }
     */
    public static void pattern(MemorySegment struct, byte fieldValue) {
        struct.set(pattern$LAYOUT, pattern$OFFSET, fieldValue);
    }

    private static final GroupLayout total$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * image_resolution_t total
     * }
     */
    public static final GroupLayout total$layout() {
        return total$LAYOUT;
    }

    private static final long total$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * image_resolution_t total
     * }
     */
    public static final long total$offset() {
        return total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * image_resolution_t total
     * }
     */
    public static MemorySegment total(MemorySegment struct) {
        return struct.asSlice(total$OFFSET, total$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * image_resolution_t total
     * }
     */
    public static void total(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, total$OFFSET, total$LAYOUT.byteSize());
    }

    private static final GroupLayout active$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("active"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * image_resolution_t active
     * }
     */
    public static final GroupLayout active$layout() {
        return active$LAYOUT;
    }

    private static final long active$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * image_resolution_t active
     * }
     */
    public static final long active$offset() {
        return active$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * image_resolution_t active
     * }
     */
    public static MemorySegment active(MemorySegment struct) {
        return struct.asSlice(active$OFFSET, active$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * image_resolution_t active
     * }
     */
    public static void active(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, active$OFFSET, active$LAYOUT.byteSize());
    }

    private static final SequenceLayout u32AGain$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("u32AGain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static final SequenceLayout u32AGain$layout() {
        return u32AGain$LAYOUT;
    }

    private static final long u32AGain$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static final long u32AGain$offset() {
        return u32AGain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static MemorySegment u32AGain(MemorySegment struct) {
        return struct.asSlice(u32AGain$OFFSET, u32AGain$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static void u32AGain(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u32AGain$OFFSET, u32AGain$LAYOUT.byteSize());
    }

    private static long[] u32AGain$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static long[] u32AGain$dimensions() {
        return u32AGain$DIMS;
    }
    private static final VarHandle u32AGain$ELEM_HANDLE = u32AGain$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static int u32AGain(MemorySegment struct, long index0) {
        return (int)u32AGain$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t u32AGain[4]
     * }
     */
    public static void u32AGain(MemorySegment struct, long index0, int fieldValue) {
        u32AGain$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout u32DGain$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("u32DGain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static final SequenceLayout u32DGain$layout() {
        return u32DGain$LAYOUT;
    }

    private static final long u32DGain$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static final long u32DGain$offset() {
        return u32DGain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static MemorySegment u32DGain(MemorySegment struct) {
        return struct.asSlice(u32DGain$OFFSET, u32DGain$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static void u32DGain(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u32DGain$OFFSET, u32DGain$LAYOUT.byteSize());
    }

    private static long[] u32DGain$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static long[] u32DGain$dimensions() {
        return u32DGain$DIMS;
    }
    private static final VarHandle u32DGain$ELEM_HANDLE = u32DGain$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static int u32DGain(MemorySegment struct, long index0) {
        return (int)u32DGain$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t u32DGain[4]
     * }
     */
    public static void u32DGain(MemorySegment struct, long index0, int fieldValue) {
        u32DGain$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout u32Inttime$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("u32Inttime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static final SequenceLayout u32Inttime$layout() {
        return u32Inttime$LAYOUT;
    }

    private static final long u32Inttime$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static final long u32Inttime$offset() {
        return u32Inttime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static MemorySegment u32Inttime(MemorySegment struct) {
        return struct.asSlice(u32Inttime$OFFSET, u32Inttime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static void u32Inttime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u32Inttime$OFFSET, u32Inttime$LAYOUT.byteSize());
    }

    private static long[] u32Inttime$DIMS = { 2, 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static long[] u32Inttime$dimensions() {
        return u32Inttime$DIMS;
    }
    private static final VarHandle u32Inttime$ELEM_HANDLE = u32Inttime$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static int u32Inttime(MemorySegment struct, long index0, long index1) {
        return (int)u32Inttime$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t u32Inttime[2][4]
     * }
     */
    public static void u32Inttime(MemorySegment struct, long index0, long index1, int fieldValue) {
        u32Inttime$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final OfShort u16GainCnt$LAYOUT = (OfShort)$LAYOUT.select(groupElement("u16GainCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t u16GainCnt
     * }
     */
    public static final OfShort u16GainCnt$layout() {
        return u16GainCnt$LAYOUT;
    }

    private static final long u16GainCnt$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t u16GainCnt
     * }
     */
    public static final long u16GainCnt$offset() {
        return u16GainCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t u16GainCnt
     * }
     */
    public static short u16GainCnt(MemorySegment struct) {
        return struct.get(u16GainCnt$LAYOUT, u16GainCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t u16GainCnt
     * }
     */
    public static void u16GainCnt(MemorySegment struct, short fieldValue) {
        struct.set(u16GainCnt$LAYOUT, u16GainCnt$OFFSET, fieldValue);
    }

    private static final OfShort u16IntTimeCnt$LAYOUT = (OfShort)$LAYOUT.select(groupElement("u16IntTimeCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t u16IntTimeCnt
     * }
     */
    public static final OfShort u16IntTimeCnt$layout() {
        return u16IntTimeCnt$LAYOUT;
    }

    private static final long u16IntTimeCnt$OFFSET = 238;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t u16IntTimeCnt
     * }
     */
    public static final long u16IntTimeCnt$offset() {
        return u16IntTimeCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t u16IntTimeCnt
     * }
     */
    public static short u16IntTimeCnt(MemorySegment struct) {
        return struct.get(u16IntTimeCnt$LAYOUT, u16IntTimeCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t u16IntTimeCnt
     * }
     */
    public static void u16IntTimeCnt(MemorySegment struct, short fieldValue) {
        struct.set(u16IntTimeCnt$LAYOUT, u16IntTimeCnt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

