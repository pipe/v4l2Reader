// Generated by jextract

package pe.pi.v4l2reader.mediaApi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct media_device_info {
 *     char driver[16];
 *     char model[32];
 *     char serial[40];
 *     char bus_info[32];
 *     __u32 media_version;
 *     __u32 hw_revision;
 *     __u32 driver_version;
 *     __u32 reserved[31];
 * }
 * }
 */
public class media_device_info {

    media_device_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, mediaAPI.C_CHAR).withName("driver"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("model"),
        MemoryLayout.sequenceLayout(40, mediaAPI.C_CHAR).withName("serial"),
        MemoryLayout.sequenceLayout(32, mediaAPI.C_CHAR).withName("bus_info"),
        mediaAPI.C_INT.withName("media_version"),
        mediaAPI.C_INT.withName("hw_revision"),
        mediaAPI.C_INT.withName("driver_version"),
        MemoryLayout.sequenceLayout(31, mediaAPI.C_INT).withName("reserved")
    ).withName("media_device_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout driver$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("driver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static final SequenceLayout driver$layout() {
        return driver$LAYOUT;
    }

    private static final long driver$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static final long driver$offset() {
        return driver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static MemorySegment driver(MemorySegment struct) {
        return struct.asSlice(driver$OFFSET, driver$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static void driver(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, driver$OFFSET, driver$LAYOUT.byteSize());
    }

    private static long[] driver$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static long[] driver$dimensions() {
        return driver$DIMS;
    }
    private static final VarHandle driver$ELEM_HANDLE = driver$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static byte driver(MemorySegment struct, long index0) {
        return (byte)driver$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char driver[16]
     * }
     */
    public static void driver(MemorySegment struct, long index0, byte fieldValue) {
        driver$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout model$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static final SequenceLayout model$layout() {
        return model$LAYOUT;
    }

    private static final long model$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static final long model$offset() {
        return model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static MemorySegment model(MemorySegment struct) {
        return struct.asSlice(model$OFFSET, model$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static void model(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, model$OFFSET, model$LAYOUT.byteSize());
    }

    private static long[] model$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static long[] model$dimensions() {
        return model$DIMS;
    }
    private static final VarHandle model$ELEM_HANDLE = model$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static byte model(MemorySegment struct, long index0) {
        return (byte)model$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char model[32]
     * }
     */
    public static void model(MemorySegment struct, long index0, byte fieldValue) {
        model$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout serial$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static final SequenceLayout serial$layout() {
        return serial$LAYOUT;
    }

    private static final long serial$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static final long serial$offset() {
        return serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static MemorySegment serial(MemorySegment struct) {
        return struct.asSlice(serial$OFFSET, serial$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static void serial(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, serial$OFFSET, serial$LAYOUT.byteSize());
    }

    private static long[] serial$DIMS = { 40 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static long[] serial$dimensions() {
        return serial$DIMS;
    }
    private static final VarHandle serial$ELEM_HANDLE = serial$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static byte serial(MemorySegment struct, long index0) {
        return (byte)serial$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char serial[40]
     * }
     */
    public static void serial(MemorySegment struct, long index0, byte fieldValue) {
        serial$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout bus_info$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bus_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static final SequenceLayout bus_info$layout() {
        return bus_info$LAYOUT;
    }

    private static final long bus_info$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static final long bus_info$offset() {
        return bus_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static MemorySegment bus_info(MemorySegment struct) {
        return struct.asSlice(bus_info$OFFSET, bus_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static void bus_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bus_info$OFFSET, bus_info$LAYOUT.byteSize());
    }

    private static long[] bus_info$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static long[] bus_info$dimensions() {
        return bus_info$DIMS;
    }
    private static final VarHandle bus_info$ELEM_HANDLE = bus_info$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static byte bus_info(MemorySegment struct, long index0) {
        return (byte)bus_info$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char bus_info[32]
     * }
     */
    public static void bus_info(MemorySegment struct, long index0, byte fieldValue) {
        bus_info$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt media_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("media_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 media_version
     * }
     */
    public static final OfInt media_version$layout() {
        return media_version$LAYOUT;
    }

    private static final long media_version$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 media_version
     * }
     */
    public static final long media_version$offset() {
        return media_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 media_version
     * }
     */
    public static int media_version(MemorySegment struct) {
        return struct.get(media_version$LAYOUT, media_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 media_version
     * }
     */
    public static void media_version(MemorySegment struct, int fieldValue) {
        struct.set(media_version$LAYOUT, media_version$OFFSET, fieldValue);
    }

    private static final OfInt hw_revision$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hw_revision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 hw_revision
     * }
     */
    public static final OfInt hw_revision$layout() {
        return hw_revision$LAYOUT;
    }

    private static final long hw_revision$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 hw_revision
     * }
     */
    public static final long hw_revision$offset() {
        return hw_revision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 hw_revision
     * }
     */
    public static int hw_revision(MemorySegment struct) {
        return struct.get(hw_revision$LAYOUT, hw_revision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 hw_revision
     * }
     */
    public static void hw_revision(MemorySegment struct, int fieldValue) {
        struct.set(hw_revision$LAYOUT, hw_revision$OFFSET, fieldValue);
    }

    private static final OfInt driver_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("driver_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 driver_version
     * }
     */
    public static final OfInt driver_version$layout() {
        return driver_version$LAYOUT;
    }

    private static final long driver_version$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 driver_version
     * }
     */
    public static final long driver_version$offset() {
        return driver_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 driver_version
     * }
     */
    public static int driver_version(MemorySegment struct) {
        return struct.get(driver_version$LAYOUT, driver_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 driver_version
     * }
     */
    public static void driver_version(MemorySegment struct, int fieldValue) {
        struct.set(driver_version$LAYOUT, driver_version$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 31 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 reserved[31]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

